{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stemmer","stopWordFilter","trimmer"]},"docs":[{"location":"","title":"Home","text":"<p>Home</p>"},{"location":"#welcome-to-the-common-build-infrastructure-at-eclipse-foundation","title":"Welcome to the Common Build Infrastructure at Eclipse Foundation","text":"<p>Eclipse CBI (Common Build Infrastructure), is a crucial component within the Eclipse Foundation's ecosystem, dedicated to streamlining and enhancing the software development process. CBI provides a unified and efficient build system for Eclipse projects, ensuring consistency and reliability across the vast array of projects hosted within the Eclipse community.</p> <p>CBI's primary goal is to simplify the development and build processes for Eclipse projects, promoting collaboration among developers and contributors worldwide. By offering a standardized build infrastructure, CBI empowers Eclipse project teams to focus on writing high-quality code, while automation takes care of the intricate and repetitive tasks associated with software builds, testing, and distribution.</p> <p>Key Features of Eclipse CBI:</p> <ul> <li>Build Consistency: CBI enforces consistent build practices across Eclipse projects, ensuring that builds are reproducible and reliable.</li> <li>Dependency Management: It handles the resolution and management of project dependencies, reducing the burden on developers.</li> <li>Efficient CI/CD Integration: CBI seamlessly integrates with Continuous Integration/Continuous Deployment (CI/CD) pipelines, enabling automated testing and rapid feedback loops.</li> <li>Artifact Repository: CBI provides a central repository for storing and distributing project artifacts, making it easy for users to access and consume Eclipse project releases.</li> <li>Cross-Platform Support: Eclipse CBI is designed to support multiple platforms, allowing projects to build and distribute software for various operating systems and architectures.</li> <li>Community Collaboration: CBI is an open-source initiative, inviting contributions from the Eclipse community and fostering collaboration among developers, organizations, and enthusiasts.</li> </ul>"},{"location":"blog/","title":"Index","text":"<p>Home / blog</p>"},{"location":"blog/#welcome-to-the-eclipse-foundation-common-build-infrastructure-cbi-blog","title":"Welcome to the Eclipse Foundation Common Build Infrastructure (CBI) Blog","text":"<p>Your one-stop resource for insights, updates, and best practices about the Eclipse Foundation's Common Build Infrastructure (CBI). Designed to empower the open-source community, CBI provides reliable, scalable, and modern tools for building, testing, and releasing software projects across the Eclipse ecosystem.</p>"},{"location":"blog/#what-is-common-build-infrastructure","title":"What is Common Build Infrastructure?","text":"<p>The CBI is a comprehensive framework that simplifies software development for Eclipse projects. With pre-configured environments, CI/CD pipelines, and an array of supported tools, it allows developers to focus on writing code while the infrastructure handles the heavy lifting of builds and deployments.</p>"},{"location":"blog/#why-follow-our-blog","title":"Why Follow Our Blog?","text":"<p>Stay informed about:</p> <ul> <li>Latest Updates: Learn about new features, integrations, and improvements to the CBI.</li> <li>Best Practices: Explore tips and tricks to optimize your project's build and release pipelines.</li> <li>Case Studies: Discover how other Eclipse projects leverage the CBI to streamline their workflows.</li> <li>Guides and Tutorials: Step-by-step instructions to help you maximize the potential of the CBI tools.</li> <li>Community Announcements: Important news, upcoming events, and ways to engage with the CBI team.</li> </ul>"},{"location":"blog/#who-is-this-blog-for","title":"Who Is This Blog For?","text":"<p>Whether you're an Eclipse committer, contributor, or a member of the open-source community, this blog offers valuable content tailored to your needs:</p> <ul> <li>Project Teams: Learn how to set up and maintain efficient build systems.</li> <li>New Contributors: Get started with accessible guides and resources.</li> <li>Open Source Enthusiasts: Stay updated on the latest advancements in CI/CD practices at Eclipse.</li> </ul>"},{"location":"blog/#explore-and-collaborate","title":"Explore and Collaborate","text":"<p>We invite you to explore the blog, share your feedback, and collaborate with us as we continue to enhance the Eclipse Foundation\u2019s Common Build Infrastructure. Together, we can build better software, faster!</p> <p>Start exploring today and join the conversation that powers innovation in the Eclipse ecosystem.</p>"},{"location":"blog/2024/12/05/chat-service/","title":"Chat service","text":"<p>Home / blog / 2024 / 12 / 05 / chat-service NOTE: Generated with AI for test purpose.</p>","tags":["chat","matrix"]},{"location":"blog/2024/12/05/chat-service/#stay-connected-with-the-eclipse-foundation-chat-service","title":"Stay Connected with the Eclipse Foundation Chat Service","text":"<p>The Eclipse Foundation is committed to fostering collaboration, transparency, and innovation within its global open-source community. To support this mission, we are excited to offer the Eclipse Foundation Chat Service, a modern, secure, and open collaboration platform for all our members and contributors.</p>","tags":["chat","matrix"]},{"location":"blog/2024/12/05/chat-service/#what-is-the-eclipse-foundation-chat-service","title":"What is the Eclipse Foundation Chat Service?","text":"<p>The Chat Service is a real-time communication tool that provides project teams, contributors, and the broader Eclipse community with an easy way to stay connected. Powered by Matrix, an open and decentralized communication protocol, the service ensures data security, privacy, and seamless integration with other collaboration tools.</p>","tags":["chat","matrix"]},{"location":"blog/2024/12/05/chat-service/#key-features","title":"Key Features:","text":"<ul> <li>Open Collaboration: Join project-specific rooms to discuss ideas, share progress, and collaborate with contributors worldwide.</li> <li>Transparency: In alignment with Eclipse's principles, all discussions are open and accessible to foster inclusivity and transparency.</li> <li>Cross-Platform Support: Accessible on desktop, mobile, and web, the service ensures you can stay connected anytime, anywhere.</li> <li>Integration with Tools: Matrix bridges enable integration with tools like Slack, IRC, and more, allowing for unified communication.</li> </ul>","tags":["chat","matrix"]},{"location":"blog/2024/12/05/chat-service/#who-can-use-it","title":"Who Can Use It?","text":"<p>The Chat Service is open to all members of the Eclipse community, including project contributors, committers, and stakeholders. It\u2019s a great way to enhance communication within your project and stay informed about the latest updates.</p>","tags":["chat","matrix"]},{"location":"blog/2024/12/05/chat-service/#getting-started","title":"Getting Started:","text":"<ul> <li>Visit the Eclipse Foundation Chat Service</li> <li>Explore the FAQ and documentation to understand how to join rooms and navigate the platform.</li> <li>Start collaborating in your favorite project room today!</li> </ul> <p>The Eclipse Foundation Chat Service is more than just a messaging tool\u2014it\u2019s a space where ideas come to life, projects grow, and community thrives. Join us and be part of the open-source movement shaping the future of technology!</p> <p>For more information, check out our FAQ.</p>","tags":["chat","matrix"]},{"location":"cbi/FAQ/","title":"FAQ","text":"<p>Home / cbi / FAQ</p> <p>The CBI build of the Eclipse platform is intended to produce the same output as the PDE build, and thus facilitate packaging without noticeable change. The noticeable difference the CBI build of the platform makes is ease of use to build the platform. For example, the prototype has consistently demonstrated that a newcomer without prior experience can build the Eclipse platform with under 30 minutes of effort on a machine with a supported JDK &amp; Maven.</p>"},{"location":"cbi/FAQ/#what-is-the-link-between-cbi-lts","title":"What is the link between CBI &amp; LTS?","text":"<p>The Long Term Support program is aimed at enabling organizations to support and maintain Eclipse software far into the future, for decades, if needed. Part of the program enables maintenance committers working on behalf of the company to fix issues. Ensuring a very easy to use, very easy to maintain, and portable build was essential to the program. The fact that a build with these attributes also provides much benefit to the community was another good reason to do CBI.</p>"},{"location":"cbi/FAQ/#wont-cbi-be-kept-behind-a-firewall-at-eclipse","title":"Won't CBI be kept behind a firewall at Eclipse?","text":"<p>No, the work done for CBI will be public and available and projects will be encouraged to leverage them. In the future, there may be some enhanced tools and features based on CBI designed to make Long Term Support (LTS) easier/more efficient/more effective. These might be available to members of the LTS working group only and enable a business model which supports the Eclipse Foundation.</p>"},{"location":"cbi/FAQ/#will-my-project-be-forced-to-move-to-cbi","title":"Will my project be forced to move to CBI?","text":"<p>No, there are no plans for forcing projects to use CBI. But if CBI develops the way we intend, you'll likely feel there's much good value to use it and decide to move to CBI on your own. Part of the benefit include the really easy to use &amp; powerful build. Part of the benefit is that using CBI allows the Eclipse Foundation's release engineer to provide some assistance to ensure your project has a really good build. Another important part of the CBI initiative is a Continuous integration facility and build farm maintained by the Eclipse Foundation... so you don't need to create &amp; maintain one yourself somewhere else.</p>"},{"location":"cbi/FAQ/#isnt-this-just-yet-another-build-system-at-eclipse","title":"Isn't this just yet-another-build system at Eclipse?","text":"<p>In truth, many of the technologies involved with CBI such as Maven, Tycho, Hudson, Git, etc. were already in use by a number of projects who consider them to be best of breed. In addition, they were/are being considered by others. Thus, in a way, CBI is an evolutionary effort building on momentum in the community. Technologies such as Maven and Nexus (the artifact storage repository often used with Maven) are ubiquitous and very popular. Build Tips &amp; Recipes</p> <ul> <li>The build hosts have a large set of useful third-party packages in /opt/public/common. You can see the contents at [1]</li> <li>A configured Maven Toolchains file is available in /opt/public/commons/maven-toolchains.xml, and is also linked to ~/.m2/toolchains.xml</li> </ul>"},{"location":"cbi/Home/","title":"Home","text":"<p>Home / cbi / Home</p> <p>The Eclipse Common Build Infrastructure (CBI) is an initiative combining infrastructure, services, technologies and best practices for building, testing and delivering software at the Eclipse Foundation.</p>"},{"location":"cbi/Home/#goals","title":"Goals","text":"<p>Primary goals of the CBI initiative are:</p> <ul> <li>Make it easy for anyone to contribute to Eclipse projects.</li> <li>Make it easy for projects to follow open governance and transparency     best practices.</li> <li>Provide a set of industry-grade services (or integration with some     widely adopted 3rd party services) for building and distributing     Eclipse projects.</li> </ul>"},{"location":"cbi/Home/#asking-for-help","title":"Asking for Help","text":"<ul> <li>Need help actually building your code: ask your project mentors, or     ask on the Common Build mailing list (cbi-dev). There are no dumb     questions.</li> <li>Subscribe to cbi-dev here:     https://dev.eclipse.org/mailman/listinfo/cbi-dev</li> </ul>"},{"location":"cbi/Home/#service-level-objectives-slo","title":"Service Level Objectives (SLO)","text":"<p>Most CBI services are Tier 2 - Best Effort, which means that we will make a reasonable effort to restore service outside of support hours. Eclipse Strategic Members can contact Webmaster in certain cases of off-hours support.</p> <p>Please see IT_SLA for more information on the Eclipse Foundation IT Services SLA.</p>"},{"location":"cbi/Home/#security","title":"Security","text":"<p>The Eclipse Foundation has authored an Open Source Software Supply Chain Best Practices document. We highly recommend Eclipse OSS projects read, understand and adopt these best practices as part of their role in the Supply Chain.</p> <p>https://github.com/eclipse-cbi/best-practices/blob/main/software-supply-chain/osssc-best-practices.md</p>"},{"location":"cbi/Home/#provided-services","title":"Provided Services","text":""},{"location":"cbi/Home/#jenkins-ci-environment","title":"Jenkins CI Environment","text":"<p>We provide dedicated Jenkins instances to projects. See also Jenkins.</p> <p>Jenkins is a continuous integration (CI) server used on Eclipse Foundation servers for Eclipse projects as part of the Common Build Infrastructure (CBI). Jenkins instances are maintained by the Eclipse Webmasters/Release Engineers.</p> <p>List of Jenkins Instances Per Project (JIPP):</p> <ul> <li>https://ci.eclipse.org/</li> </ul>"},{"location":"cbi/Home/#requesting-a-jipp-instance","title":"Requesting a JIPP instance","text":"<p>Please file a HelpDesk ticket to request your project's own instance. Please ensure your project lead can +1 the request.</p>"},{"location":"cbi/Home/#whats-provided","title":"What's provided?","text":"<p>Each Eclipse Project has access to one Jenkins instance (JIPP), including the following:</p> <ul> <li>(1) Jenkins instance, with (1) Resources Pack (see below)<ul> <li>Membership-sponsored projects may allocate more resources (see     below)</li> </ul> </li> <li>Digital signing Service: Java JAR, Java Cryptography Extensions,     Windows Portable Executable with Microsoft Authenticode, macOS     application bundles.</li> <li>Packaging service: Apple Disk Image (.dmg), Linux Flatpak</li> <li>Disk space: Ephemeral for builds, permanent for release builds.</li> <li>(1) 1vCPU/3.75G/30G Linux Virtual Server (if needed) (courtesy of     Microsoft Azure). Projects sponsored by Strategic Members can engage     with the Foundation to get out of spec Virtual Server.</li> <li>Access to worldwide download mirrors</li> </ul> <p>[!NOTE] Windows and macOS agents \\ Note that Windows and macOS agents (shared and headless - not suitable to run UI tests) can be added to your Jenkins instance. In this case, each shared headless agent counts for 1 resource pack. These agents have common dependencies like JDK, Maven, etc installed. If your build requires specific/special dependencies, you might need to set up your own external build agent instead.</p> <p>[!NOTE] RISC-V agents \\ Projects that want to build and test on RISC-V architecture can ask for access to one of our self-hosted RISC-V machines. Access is limited. You can find more info here: https://github.com/eclipse-cbi/jiro/wiki/Dedicated-build-agents</p>"},{"location":"cbi/Home/#additional-resources","title":"Additional Resources","text":"<p>Each Eclipse Project has access to one Resource Pack for building. For some projects, that may not be enough. Projects sponsored by Eclipse Membership (via Project Lead) have additional resources (like resource packs, dedicated agents or GitHub hosted large runners), based on membership level. These additional resources can be allocated to projects. See the Jenkins wiki page  to see how packs translate to Jenkins builds.</p> <ul> <li>Some resources are only available to Enterprise and Strategic     members.</li> <li>Enterprise and Strategic members can engage with the Foundation to     acquire additional Packs.</li> </ul>"},{"location":"cbi/Home/#resource-pack","title":"Resource Pack","text":"Agent type Linux (x64) (containerized, no root) vCPU 2 (burst to 4) RAM 8 GiB Disk 50 GB"},{"location":"cbi/Home/#dedicated-agent","title":"Dedicated Agent","text":"Agent type Linux (x64) / Windows (x64) / macOS (Apple silicon) (VMs) vCPU 4 RAM 16 GB Disk 100 GB"},{"location":"cbi/Home/#github-hosted-large-runner","title":"GitHub hosted large runner","text":"Agent type Linux (x64) vCPU 8 RAM 32 GB Disk 300GB Minutes 2000* <p>*GitHub action minutes for large GitHub runners are not covered by free minutes for public projects</p>"},{"location":"cbi/Home/#gitlab-runners","title":"Gitlab Runners","text":"<p>We provide dedicated GitLab runners to projects.</p>"},{"location":"cbi/Home/#request-a-runner","title":"Request a runner","text":"<p>Runner can be requested by filling a ticket on the helpdesk. Please ensure your project lead approved with a +1 the request.</p>"},{"location":"cbi/Home/#first-integration","title":"First integration","text":"<p>Create your first <code>.gitlab-ci.yml</code> file in your project.</p> <pre><code>default:\n  tags:\n    - origin:eclipse # allow to target eclipse runner\n\nstages:\n  - build  \n\nmy_build_job: \n  stage: build\n  script:\n    - echo \"example job 1\"\n</code></pre> <p>You can find many templates here</p>"},{"location":"cbi/Home/#provided-services_1","title":"Provided Services","text":"<ul> <li>Pipeline template: Basic features</li> <li>Pipeline template: Auto Devops</li> <li>Pipeline template: Full feature</li> <li>Dockerhub publication</li> <li>Nexus: repo.eclipse.org</li> <li>Signing tool</li> <li>Supply Chain Security Best Practices</li> <li>Secret management</li> <li>Build container image (buildkit)</li> <li>Publish to projects-storage (download.eclipse.org)</li> </ul>"},{"location":"cbi/Home/#request-and-allocation-process-for-runners-resource-pack","title":"Request and Allocation Process for Runners (Resource pack)","text":""},{"location":"cbi/Home/#allocating-resource-packs","title":"Allocating Resource Packs","text":"<p>Each Eclipse Project has access to one Resources Pack for building by default. </p> <p>For some projects, that may not be enough. Projects sponsored by Eclipse Membership (via Project Lead) have additional Packs, based on membership level. These Packs can be allocated to projects. </p> <ul> <li>Some resources are only available to Enterprise and Strategic members.</li> <li>Enterprise and Strategic members can engage with the Foundation to acquire additional Packs.</li> </ul>"},{"location":"cbi/Home/#resource-pack-configuration","title":"Resource pack configuration","text":"<p>Considering the microservice aspect in the execution of GitLab CI pipelines, where the aim is to have dedicated jobs for different kind of tasks and thus to have a large number of jobs running in parallel to execute a pipeline.</p> <p>As a consequence, three types of build containers are proposed with the following specifications: </p> Small Medium Large cpu req 250m 1000m 2000m cpu limit 500m 2000m 4000m mem 1024Mi 4096Mi 8192Mi <p>The distribution of concurrency is based on the resource pack specifications as follows:</p> # Resource packs 1 2 3 4 5 10 Concurrent Small 3 5 7 9 11 21 Concurrent Medium 1 2 3 4 5 10 Concurrent Large 0 0 1 1 2 5 max concurrency 4 7 11 14 18 36 <p>NOTE: * 2 Small per resource pack starting from 3 * 1 Medium per resource pack * 1 Large every 2 resources pack</p>"},{"location":"cbi/Home/#dedicated-agent_1","title":"Dedicated Agent","text":"Agent type Linux/Windows/macOS (VMs) vCPU 4 \u00a0RAM \u00a08GiB \u00a0Disk \u00a0100GB"},{"location":"cbi/Home/#resource-packs-included-in-membership","title":"Resource Packs Included in Membership","text":"Associate / Contributing  [\u20ac0, \u20ac15k] Associate / Contributing  [\u20ac15k, \u20ac20k] Associate / Contributing  [\u20ac25k, \u20ac50k] Strategic    [\u20ac50k, \u20ac100k]\u00a0 Strategic  [\u20ac100k, \u20ac500k] Resource packs \u00a01 \u00a02 \u00a03 \u00a05 \u00a010 Dedicated Agents \u00a00 \u00a00 \u00a00 \u00a00 \u00a02"},{"location":"cbi/Home/#assigning-resource-packs-to-a-project","title":"Assigning Resource Packs to a Project","text":"<p>Resource Packs are assigned by Member organizations of the Eclipse Foundation to Eclipse Projects they sponsor. Packs are assigned as a whole to a single project (i.e., can\u2019t split Packs across multiple projects). A member can assign several packs to a single project.</p> <p>Important: When asking for packs for your project, please ensure that project leads and your organization representatives are copied to the GitLab ticket. We require approval from project leads but assume immediate approval from organization representatives. We strongly advise you seek authorization internally to your organization before opening such a request, though. Should conflictual requests arise, the organization representatives will be asked to actively arbitrate.</p> <p>To assign a pack to a project, please file a ticket</p> <p>By default, resource packs are assigned build agents. In some cases, it may be required to scale up the Jenkins master. In such case, we can allocate resource packs to the master instance. Sponsored Projects</p> <p>A public API of sponsored projects is accessible. Organizations can check how many Resource Packs they have left for project sponsoring on the membership portal. </p>"},{"location":"cbi/Home/#membership-level-and-additional-resources","title":"Membership Level and additional resources","text":""},{"location":"cbi/Home/#additional-resources-included-in-membership","title":"Additional Resources Included in Membership","text":"<p>Eclipse Foundation Member Organizations have access to additional resources based on their membership level:</p> Associate / Contributing Strategic [\u20ac0, \u20ac15k) [\u20ac15k, \u20ac20k] [\u20ac25k, \u20ac50k) [\u20ac50k, \u20ac100k) [\u20ac100k, \u20ac500k] Resource packs 1 2 3 5 10 Dedicated Agents 0 0 0 0 2 GitHub hosted large runners 0 0 0 0 2"},{"location":"cbi/Home/#assigning-additional-resources-to-a-project","title":"Assigning Additional Resources to a Project","text":"<p>Additional resources (resource packs/dedicated agents/GitHub hosted large runners) are assigned by Member organizations of the Eclipse Foundation to Eclipse Projects they sponsor. Those resources are assigned as a whole to a single project (i.e., we can\u2019t split resources across multiple projects). A member can assign several resources to a single project.</p> <p>[!IMPORTANT] When asking for additional resources for your project, please ensure that project leads and your organization representatives are copied to the GitLab ticket. We require approval from project leads but assume immediate approval from organization representatives. We strongly advise you to seek authorization internally to your organization before opening such a request though. Should conflictual requests arise, the organization representatives will be asked to actively arbitrate.</p> <p>To assign additional resources to a project, please file a ticket.</p> <p>By default, resource packs are assigned build agents. In some cases, it may be required to scale up the Jenkins master. In such case, we can allocate resource packs to the master instance.</p>"},{"location":"cbi/Home/#sponsored-projects","title":"Sponsored Projects","text":"<p>We maintain a public API of sponsored projects. Organizations can check how many resource packs/dedicated agents they have left for project sponsoring on the membership portal.</p>"},{"location":"cbi/Home/#ci-environment-third-party","title":"CI Environment (Third-party)","text":"<p>If you host your Eclipse project Git repository at GitHub, we also support some third-party services:</p> <ul> <li>CircleCI.</li> <li>Azure     Pipelines.</li> <li>~~TravisCI~~. We do no longer support     Travis CI, see the announcement here:     https://www.eclipse.org/lists/cross-project-issues-dev/msg18647.html</li> </ul> <p>If an environment is not listed in the unsupported list, you can ask whether it can be supported by opening a bug.</p> <p>[!NOTE] Third party build services (e.g., CircleCI) limitations \\ The Eclipse Foundation's IT Team is responsible for the credentials (OSSRH, SSH and GPG keys...) it creates for projects. Monitoring where credentials are disseminated is crucial for security reasons. As long as we have no automation in place to set/update/remove credentials on 3rd party build services, we don't put any credential on such services. For instance, it means that you can't use them to publish to Maven Central, or to upload build results to download.eclipse.org.</p>"},{"location":"cbi/Home/#github-and-bot-accounts","title":"GitHub and Bot Accounts","text":"<p>The Eclipse Foundation can create a bot user that can be used from your Jenkins (JIPP) instance to build branches and pull requests, push, tag, and comment on the repo.</p> <p>We don't share the credentials of those bots for external usage (e.g., to use it with a private, behind firewall Jenkins instance, or with third-party services). Those bots have the same set of permissions as a committer and it would be against the Eclipse Development Process to give those permissions to anybody. Likewise, we don't grant any elevated permissions on repositories or organizations to any other bot account.</p>"},{"location":"cbi/Home/#webhooks","title":"Webhooks","text":"<p>However, we can set up webhooks for you. We create webhooks that can only receive the following events:</p> <ul> <li>Branch or tag creation (Branch or tag created)</li> <li>Branch or tag deletion (Branch or tag deleted)</li> <li>Pull requests (Pull request opened, closed, reopened, edited,     assigned, unassigned, review requested, review request removed,     labeled, unlabeled, synchronized, ready for review, locked, or     unlocked)</li> <li>Pushes (Git push to a repository)</li> </ul> <p>See the GitHub developer documentation for more information.</p>"},{"location":"cbi/Home/#personal-access-token","title":"Personal Access Token","text":"<p>We can also create personal access token for the bot account. We create tokens with only the following scopes:</p> <ul> <li>repo:status</li> <li>repo_deployment</li> <li>write:discussion</li> </ul> <p>See the GitHub developer documentation about scopes and OAuth for more information.</p>"},{"location":"cbi/Home/#getting-admin-permissions-on-projects-github-repositories","title":"Getting admin permissions on project's GitHub repositories","text":"<p>Project leads may require admin level access to their project's GitHub repositories. If that is the case, please open a new bug with your request. To be eligible to such permission level, your project must be in the mature phase and the request shall be highly motivated, so please tell us why you need that access (this information will be handy when sorting out the more general solution). Usually, admin permissions will be assigned temporarily.</p>"},{"location":"cbi/Home/#docker-hub","title":"Docker Hub","text":"<p>The Eclipse Foundation owns the eclipse organization and a couple of other project-specific organizations at https://hub.docker.com. You can ask to get a repository being created on one of these organizations. We will set permissions so that committers have write access to this repo (you will need to share your Docker Hub ID with us).</p> <p>You can also ask us to create a project-specific organization. The organization name needs to follow the pattern <code>eclipse&lt;projectname&gt;</code> (Docker Hub does not support dashes <code>-</code> in user or org names).</p> <p>Note that we don't grant admin permissions on any Eclipse Foundation owned organization. We recognize that this means that you will have to go through us for all new repo creation, but we can't grant organizations-wide admin permission assigned to committers for security reasons.</p> <p>In all cases, requests should be directed to the GitLab HelpDesk.</p> <p>[!IMPORTANT] DockerHub policy changes (March 2021) \\ DockerHub is currently changing its policy regarding the number of free members inside an organization. As such, the rules above will probably need to evolve in the near future. See https://www.eclipse.org/lists/eclipse.org-committers/msg01273.html and https://gitlab.eclipse.org/eclipsefdn/helpdesk/-/issues/473 for details.</p>"},{"location":"cbi/Home/#nexusmaven-repository","title":"Nexus/Maven repository","text":"<p>See Services/Nexus.</p>"},{"location":"cbi/Home/#signing-tool","title":"Signing tool","text":"<ul> <li>Maven plugins for signing     artifacts</li> <li>On-demand signing     tool</li> </ul>"},{"location":"cbi/Home/#eclipse-platform-plugins-specific-tooling","title":"Eclipse Platform / plugins specific tooling","text":""},{"location":"cbi/Home/#cbi-license-bundle","title":"CBI license bundle","text":"<p>We offer a P2 repository containing the <code>org.eclipse.license</code> bundle which is located at:</p> <ul> <li>http://download.eclipse.org/cbi/updates/license/</li> </ul> <p>This URL is a composite P2 repo containing the license bundle.</p> <p>If you use Tycho you can add the p2 repo to the  section of your pom.xml file. Something similar to this: <pre><code>    &lt;repository&gt;\n      &lt;id&gt;license-feature&lt;/id&gt;\n      &lt;url&gt;http://download.eclipse.org/cbi/updates/license/&lt;/url&gt;\n      &lt;layout&gt;p2&lt;/layout&gt;\n    &lt;/repository&gt;\n</code></pre> <p>In any particular feature which you need the license you can use the usual feature.xml section:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;feature\n      id=\"org.eclipse.help\"\n      label=\"%featureName\"\n      version=\"2.0.0.qualifier\"\n      provider-name=\"%providerName\"\n      plugin=\"org.eclipse.help.base\"\n      license-feature=\"org.eclipse.license\"\n      license-feature-version=\"1.0.0.qualifier\"/&gt;\n[...]\n</code></pre>"},{"location":"cbi/Home/#p2-repo-checks","title":"p2 repo checks","text":"<p>A set of \"tests\" which create reports or can be run as unit tests that check to correctness of p2 repositories. That is partially just \"correctness\" in general (such as that jars are signed, etc.) but more so that repositories conform to the requirements of the Eclipse Simultaneous release (such as that jars have correct \"Provider names\", licenses, etc.). For more information, see https://github.com/eclipse-cbi/p2repo-analyzers/blob/main/README.md.</p>"},{"location":"cbi/Home/#p2-repo-aggregator","title":"p2 repo aggregator","text":"<p>A tool to combine several p2 repositories. Among other things, it makes sure, they all have consistent constraints (that is, can be \"installed together\") unlike a raw p2 mirror task. For more information, see CBI/aggregator. </p>"},{"location":"cbi/Home/#resources","title":"Resources","text":"<ul> <li>cbi-dev mailing list</li> <li>See our Frequently Asked Question list</li> </ul>"},{"location":"cbi/Nexus/","title":"Nexus","text":"<p>Home / cbi / Nexus</p> <p>This page provides information how to publish a Java project to the Nexus repository instance running at repo.eclipse.org. Readers are expected to be familiar with Maven concepts and Maven repository publishing. If this is not the case, we strongly suggest readers to first read the basics from Sonatype's documentation and the Apache Maven Deploy plugin.</p> <p>The Eclipse Nexus instance is hosted at: https://repo.eclipse.org/</p> <p>This repository allows Eclipse projects to publish their build artifacts into a centralized repository hosted by EMO.</p> <p>Notes:</p> <ul> <li>Snapshots older than 7-days are automatically removed on a weekly basis, with the minimum of 1 snapshot being retained.</li> <li>All snapshots for a given GAV are automatically removed 14 days after release.</li> <li>All snapshots not being requested in the last 360 days will be automatically removed.</li> </ul>"},{"location":"cbi/Nexus/#getting-a-nexus-repository-for-your-project","title":"Getting a Nexus repository for your Project","text":"<p>File a ticket and specify what project you'd like a Nexus repo for.</p> <p>3 repositories are typically created:</p> <ul> <li>group: <code>https://repo.eclipse.org/content/repositories/&lt;projectname&gt;</code>, which groups both releases and snapshots repositories.</li> <li>releases: <code>https://repo.eclipse.org/content/repositories/&lt;projectname&gt;-releases/</code>, for publishing releases. Re-deploy is disabled.</li> <li>snapshots: <code>https://repo.eclipse.org/content/repositories/&lt;projectname&gt;-snapshots/</code>, for publishing snapshots. Re-deploy is enabled.</li> </ul> <p>Projects can only publish to these repositories from their Jenkins instance. Committers cannot do anything administrative on the instance.</p>"},{"location":"cbi/Nexus/#pulling-artifacts-from-nexus","title":"Pulling artifacts from Nexus","text":"<p>To use repo.eclipse.org to pull artifacts for your project, there are a few URLs that can be used.</p>"},{"location":"cbi/Nexus/#releases-group","title":"Releases Group","text":"<p>https://repo.eclipse.org/content/repositories/releases/</p> <p>This URL is a top-level aggregate of all project releases repositories. This URL is recommended if you just want to pull in releases from any project hosting artifacts on repo.eclipse.org</p>"},{"location":"cbi/Nexus/#snapshots-group","title":"Snapshots Group","text":"<p>https://repo.eclipse.org/content/repositories/snapshots/</p> <p>This URL is a top-level aggregate of all project snapshots repositories. This URL is useful for developers who want to pull in artifacts that may have not yet been released, usually nightlies.</p>"},{"location":"cbi/Nexus/#project-specific-repos","title":"Project Specific Repos","text":"<p>Finally, you can also use a project specific repo if you only want to ensure you are only pulling artifacts from specific projects. To get the URLs for these projects, you can navigate to https://repo.eclipse.org/index.html#view-repositories and browse for the URL link for the specific project.</p>"},{"location":"cbi/Nexus/#deploying-artifacts-to-repoeclipseorg","title":"Deploying artifacts to repo.eclipse.org","text":"<p>To deploy artifacts to repo.eclipse.org, you will need to use Jenkins (http://ci.eclipse.org/) to configure a job for deploying your artifacts.</p> <p>It is recommended that you use JDK 8 or higher, as we have seen SSL Handshake issues when using JDK 7 and lower.</p>"},{"location":"cbi/Nexus/#initial-maven-pom-setup","title":"Initial Maven POM setup","text":"<p>Before Jenkins can deploy your project's artifacts to Nexus, you will need to do some setup on the Maven side to add a \"distributionManagement\" section to your project pom. An example below:</p> <pre><code>  &lt;distributionManagement&gt;\n    &lt;repository&gt;\n      &lt;id&gt;repo.eclipse.org&lt;/id&gt;\n      &lt;name&gt;Project Repository - Releases&lt;/name&gt;\n      &lt;url&gt;https://repo.eclipse.org/content/repositories/project-releases/&lt;/url&gt;\n    &lt;/repository&gt;\n    &lt;snapshotRepository&gt;\n      &lt;id&gt;repo.eclipse.org&lt;/id&gt;\n      &lt;name&gt;Project Repository - Snapshots&lt;/name&gt;\n      &lt;url&gt;https://repo.eclipse.org/content/repositories/project-snapshots/&lt;/url&gt;\n    &lt;/snapshotRepository&gt;\n  &lt;/distributionManagement&gt;\n</code></pre> <p>Replace instances of the word \"project\" with your project's name.</p> <p>Note: It is important to ensure your IDs are \"repo.eclipse.org\" as the Jenkins instance is configured to use these IDs.</p> <p>If you want to keep several snapshot versions, use:</p> <pre><code>    &lt;snapshotRepository&gt;\n      &lt;uniqueVersion&gt;true&lt;/uniqueVersion&gt;\n      [...]\n</code></pre> <p>Note: this tag is ignored by Maven 3.x.</p>"},{"location":"cbi/Nexus/#jenkins-job-setup","title":"Jenkins Job Setup","text":"<p>Using Jenkins, you will need to configure Maven to run the \"deploy\" goal.</p> <p>Use the \"deploy\" goal as one of your Maven goals as part of your build. Be careful while doing that to not specify duplicate goals (e.g., <code>mvn verify deploy</code> will execute all phases up to <code>verify</code> twice).</p>"},{"location":"cbi/Nexus/#deploying-a-jar-to-repoeclipseorg","title":"Deploying a jar to repo.eclipse.org","text":"<p>It is possible to use the Maven deploy:deploy-file goal to push a jar file into https://repo.eclipse.org/ via Jenkins. For every jar you wish to push into https://repo.eclipse.orgrepo.eclipse.org/ an associating pom.xml file is necessary.</p> <p>The simplest pom.xml can be as follows:</p> <pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n  &lt;groupId&gt;org.eclipse.jdt&lt;/groupId&gt;\n  &lt;artifactId&gt;org.eclipse.jdt.core&lt;/artifactId&gt;\n  &lt;version&gt;3.9.0.v20130313-2254&lt;/version&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"cbi/Nexus/#configuring-jenkins-for-mvn-deploydeploy-file","title":"Configuring Jenkins for mvn deploy:deploy-file","text":"<p>There are 3 settings which need to be configured:</p> <ol> <li>Goals: deploy:deploy-file</li> <li>Properties:    <code>groupId=&lt;groupId&gt;      artifactId=&lt;artifactId&gt;      version=&lt;version&gt;      packaging=jar      file=/shared/path/to/file.jar      repositoryId=repo.eclipse.org      url=&lt;Your project's repo URL to push jar into&gt;</code></li> <li> <p>POM File: /path/to/pom.xml</p> <p>For example: </p> </li> </ol> <p>Note: You will also need to configure your settings file to use Deploy to repo.eclipse.org per instructions in the previous section for deploying artifacts.</p>"},{"location":"cbi/Nexus/#deploying-to-repoeclipseorg-with-gradle","title":"Deploying to repo.eclipse.org with Gradle","text":"<p>If you are using Gradle in your build job, you can also deploy to repo.eclipse.org from your JIPP instance as described in the Gradle user guide.</p> <p>Include in your Gradle script authentication configuration using the settings below, e.g.</p> <pre><code>repositories {\n  maven {\n    credentials {\n      username eclipseRepoUsername\n      password eclipseRepoPassword\n    }\n    authentication {\n      basic(BasicAuthentication)\n    }\n  }\n}\n</code></pre> <p>Webmaster will need to set up the Gradle plugin in your JIPP and provide <code>~/.gradle/gradle.properties</code> with the following two variables:</p> <pre><code>eclipseRepoUsername=xxx\neclipseRepoPassword=yyy\n</code></pre> <p>Please file a ticket for that.</p>"},{"location":"cbi/Signing/","title":"Signing","text":"<p>Home / cbi / Signing</p> <p>The Eclipse Foundation allows committers to sign JAR and some executable files on its behalf. Signing is done from any of the Jenkins servers. There are three ways to sign:</p>"},{"location":"cbi/Signing/#cbi-maven-signing-plugin","title":"CBI Maven signing plugin","text":"<p>Using the CBI Maven Plugins, the signing process can be directly performed at the end of a Maven Tycho build.</p>"},{"location":"cbi/Signing/#maven-profiles","title":"Maven Profiles","text":"<p>As signing an Eclipse project is only available from an Eclipse Jenkins server, a common practice is to place the CBI Maven signing plugins in a dedicated profile and enable that profile only in the Jenkins job. This way you can still run your Maven Tycho builds locally without signing. See Maven - Introduction to Build Profiles</p> <pre><code>   &lt;profiles&gt;\n     &lt;profile&gt;\n       &lt;id&gt;sign&lt;/id&gt;\n       &lt;build&gt;\n         &lt;plugins&gt;\n           [...]\n         &lt;/plugins&gt;\n       &lt;/build&gt;\n     &lt;/profile&gt;\n   &lt;/profiles&gt;\n</code></pre> <p>The profile can then be activated in the Jenkins build via the -P argument.</p>"},{"location":"cbi/Signing/#jar-signing","title":"JAR signing","text":"<p>Ensure that all created JAR files are correctly signed by using the eclipse-jarsigner-plugin</p> <pre><code>\u00a0\u00a0\u00a0&lt;plugin&gt;\n     &lt;groupId&gt;org.eclipse.cbi.maven.plugins&lt;/groupId&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0&lt;artifactId&gt;eclipse-jarsigner-plugin&lt;/artifactId&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0&lt;version&gt;${cbi-version}&lt;/version&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0&lt;executions&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;execution&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;id&gt;sign&lt;/id&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;phase&gt;verify&lt;/phase&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;goals&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;goal&gt;sign&lt;/goal&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/goals&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/execution&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/executions&gt;\n\u00a0\u00a0\u00a0&lt;/plugin&gt;\n</code></pre>"},{"location":"cbi/Signing/#windows-signing","title":"Windows signing","text":"<p>To sign the Windows executables, use the eclipse-winsigner-plugin</p> <pre><code>\u00a0\u00a0\u00a0&lt;plugin&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0&lt;groupId&gt;org.eclipse.cbi.maven.plugins&lt;/groupId&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0&lt;artifactId&gt;eclipse-winsigner-plugin&lt;/artifactId&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0&lt;version&gt;${cbi-version}&lt;/version&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0&lt;executions&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;execution&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;id&gt;sign&lt;/id&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;goals&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;goal&gt;sign&lt;/goal&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/goals&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;phase&gt;package&lt;/phase&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;configuration&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;signFiles&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;signFile&gt;${project.build.directory}/products/${product-folder}/win32/win32/x86_64/eclipse.exe&lt;/signFile&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;signFile&gt;${project.build.directory}/products/${product-folder}/win32/win32/x86_64/eclipsec.exe&lt;/signFile&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/signFiles&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/configuration&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/execution&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/executions&gt;\n\u00a0\u00a0\u00a0&lt;/plugin&gt;\n</code></pre>"},{"location":"cbi/Signing/#macos-signing","title":"macOS signing","text":"<p>To sign the macOS executables use the eclipse-macsigner-plugin</p> <pre><code>   &lt;plugin&gt;\n     &lt;groupId&gt;org.eclipse.cbi.maven.plugins&lt;/groupId&gt;\n     &lt;artifactId&gt;eclipse-macsigner-plugin&lt;/artifactId&gt;\n     &lt;version&gt;${cbi-version}&lt;/version&gt;\n     &lt;executions&gt;\n       &lt;execution&gt;\n         &lt;id&gt;sign&lt;/id&gt;\n         &lt;goals&gt;\n           &lt;goal&gt;sign&lt;/goal&gt;\n         &lt;/goals&gt;\n         &lt;phase&gt;package&lt;/phase&gt;\n         &lt;configuration&gt;\n           &lt;signFiles&gt;\n             &lt;signFile&gt;${project.build.directory}/products/${product-folder}/macosx/cocoa/x86_64/Eclipse.app&lt;/signFile&gt;\n           &lt;/signFiles&gt;\n           &lt;timeoutMillis&gt;300000&lt;/timeoutMillis&gt;\n           &lt;continueOnFail&gt;${macSigner.forceContinue}&lt;/continueOnFail&gt;\n           &lt;entitlements&gt;${project.basedir}/application.entitlement&lt;/entitlements&gt;\n         &lt;/configuration&gt;\n       &lt;/execution&gt;\n     &lt;/executions&gt;\n   &lt;/plugin&gt;\n</code></pre>"},{"location":"cbi/Signing/#entitlements","title":"Entitlements","text":"<p>The security guidelines for macOS application development requires the definition of Entitlements to grant an executable permission to use a service or technology. The entitlements used by the Eclipse Platform are defined here</p>"},{"location":"cbi/Signing/#macos-dmg-file-creation","title":"macOS DMG file creation","text":"<p>macOS applications are typically published as .dmg files, which are containers that serve as installers with additional security information to avoid that the application gets tampered. To create a DMG file the eclipse-dmg-packager can be used.</p> <pre><code>   &lt;plugin&gt;\n     &lt;groupId&gt;org.eclipse.cbi.maven.plugins&lt;/groupId&gt;\n     &lt;artifactId&gt;eclipse-dmg-packager&lt;/artifactId&gt;\n     &lt;version&gt;${cbi-version}&lt;/version&gt;\n     &lt;executions&gt;\n       &lt;execution&gt;\n         &lt;goals&gt;\n           &lt;goal&gt;package-dmg&lt;/goal&gt;\n         &lt;/goals&gt;\n         &lt;phase&gt;integration-test&lt;/phase&gt;\n         &lt;configuration&gt;\n           &lt;source&gt;${project.build.directory}/products/${product-id}-macosx.cocoa.x86_64.tar.gz&lt;/source&gt;\n           &lt;continueOnFail&gt;true&lt;/continueOnFail&gt;\n           &lt;timeoutMillis&gt;600000&lt;/timeoutMillis&gt;\n           &lt;continueOnFail&gt;${macSigner.forceContinue}&lt;/continueOnFail&gt;\n           &lt;sign&gt;true&lt;/sign&gt;\n         &lt;/configuration&gt;\n       &lt;/execution&gt;\n     &lt;/executions&gt;\n   &lt;/plugin&gt;\n</code></pre>"},{"location":"cbi/Signing/#macos-notarization","title":"macOS Notarization","text":"<p>Since macOS Catalina macOS software that is published outside the AppStore needs to be notarized, so the Gatekeeper gets information about trusting the software or not.</p> <p>As of now the notarization is not available as Tycho plugin. Therefore the macos-notarization-service webservice needs to be used in the Jenkins job similar to the following snippet:</p> <pre><code>PRODUCT_ID=...\nBUILD_DIR=\"${WORKSPACE}/${PRODUCT_ID}/target/products/\"\nDMG=${PRODUCT_ID}-macosx.cocoa.x86_64.dmg\n\npushd $BUILD_DIR\n\nPRIMARY_BUNDLE_ID=\"app-bundle\"\n\nRESPONSE=$(curl -s -X POST -F file=@${DMG} -F 'options={\"primaryBundleId\": \"'${PRIMARY_BUNDLE_ID}'\", \"staple\": true};type=application/json' https://cbi.eclipse.org/macos/xcrun/notarize)\n\nUUID=$(echo $RESPONSE | grep -Po '\"uuid\"\\s*:\\s*\"\\K[^\"]+')\nSTATUS=$(echo $RESPONSE | grep -Po '\"status\"\\s*:\\s*\"\\K[^\"]+')\n\nwhile [[ ${STATUS} == 'IN_PROGRESS' ]]; do\n  sleep 1m\n  RESPONSE=$(curl -s [https://cbi.eclipse.org/macos/xcrun/${UUID}/status](https://cbi.eclipse.org/macos/xcrun/$%7BUUID%7D/status))\n  STATUS=$(echo $RESPONSE | grep -Po '\"status\"\\s*:\\s*\"\\K[^\"]+')\ndone\n\nif [[ ${STATUS} != 'COMPLETE' ]]; then\n  echo \"Notarization failed: ${RESPONSE}\"\n  exit 1\nfi\n\nrm \"${DMG}\"\n\ncurl -JO [https://cbi.eclipse.org/macos/xcrun/${UUID}/download](https://cbi.eclipse.org/macos/xcrun/$%7BUUID%7D/download)\npopd\n</code></pre> <p>A more detailed script is the Oomph script.</p>"},{"location":"cbi/Signing/#cbi-maven-plugins-version","title":"CBI Maven Plugins Version","text":"<p>For correct signing needed for notarization (including for example hardened runtime) at least the CBI Plugins version 1.1.8-SNAPSHOT needs to be used. Ensure to configure the correct pluginRepository to be able to consume that version CBI Maven Plugins Version For correct signing needed for notarization (including for example hardened runtime) at least the CBI Plugins version 1.1.8-SNAPSHOT needs to be used. Ensure to configure the correct pluginRepository to be able to consume that version</p> <pre><code>   &lt;pluginRepositories&gt;\n     &lt;pluginRepository&gt;\n       &lt;id&gt;cbi&lt;/id&gt;\n       &lt;url&gt;https://repo.eclipse.org/content/repositories/cbi-releases/&lt;/url&gt;\n     &lt;/pluginRepository&gt;\n     &lt;pluginRepository&gt;\n       &lt;id&gt;cbi-snapshots&lt;/id&gt;\n       &lt;url&gt;https://repo.eclipse.org/content/repositories/cbi-snapshots/&lt;/url&gt;\n       &lt;snapshots&gt;\n         &lt;enabled&gt;true&lt;/enabled&gt;\n       &lt;/snapshots&gt;\n     &lt;/pluginRepository&gt;\n   &lt;/pluginRepositories&gt;\n</code></pre> <p>Once 1.1.8 is released, the SNAPSHOTS repository is not needed anymore.</p>"},{"location":"cbi/Signing/#eclipse-platform-version","title":"Eclipse Platform Version","text":"<p>The macOS notarization will only succeed if the dmg file signing is matching certain criteria (e.g. hardened runtime). The first Eclipse Platform version that includes the Eclipse Launcher and native libraries that match those criterias are included in 2019-09. For any previous versions the notarization will fail.</p> <p>For further information on the CBI Maven Plugins have a look at: https://eclipse-cbi.github.io/org.eclipse.cbi/</p> <p>Note that these plugins use the web services in the background.</p>"},{"location":"cbi/Signing/#web-service","title":"Web service","text":"<p>Using a web POST method, individual JAR files can be signed from any of the internal Jenkins servers with this service:</p> <ul> <li>https://cbi.eclipse.org/jarsigner/sign</li> </ul> <p>The output of that service will be the signed file. Please note that the web service does not pack or process jar files. You must condition/pack them yourself prior to signing if you wish to do so.</p>"},{"location":"cbi/Signing/#resigning-jarsigner","title":"Resigning Jarsigner","text":"<p>The web service always resigns already signed jars. The maven jar signer plugin lets you specify a strategy to avoid submitting already signed jar to the webservice. If you use the webservice directly, you need to do deal with it by yourself. You can see how the re-signing strategies are defined by looking at the code of the JarResigner</p> <pre><code># JAR FILES: Submit unsigned-jar.jar and save signed output to signedfile.jar\ncurl -o signedfile.jar -F file=@unsigned-jar.jar https://cbi.eclipse.org/jarsigner/sign\n</code></pre> <pre><code>#\u00a0WINDOWS\u00a0EXE:\u00a0Submit\u00a0Windows\u00a0unsigned.exe\u00a0and\u00a0save\u00a0signed\u00a0output\u00a0to\u00a0signed.exe\ncurl\u00a0-o\u00a0signed.exe\u00a0-F\u00a0file=@unsigned.exe\u00a0https://cbi.eclipse.org/authenticode/sign\n</code></pre> <pre><code># WINDOWS MSI: Submit Windows unsigned.msi and save signed output to signed.msi\ncurl -o signed.msi -F file=@unsigned.msi https://cbi.eclipse.org/authenticode/sign\n</code></pre> <pre><code># MAC: Submit unsigned and save signed output to signed.zip\n# Note: You must zip your entire *.app directory for example: zip -r unsigned.zip Eclipse.app\ncurl -o signed.zip -F file=@unsigned.zip https://cbi.eclipse.org/macos/codesign/sign\n</code></pre> <pre><code># If you need to set entitlements on your app / binary (see https://developer.apple.com/documentation/security/hardened_runtime?preferredLanguage=occ for details),\n# add an `entitlements` part to the request like below\ncurl -o signed.zip -F file=@unsigned.zip -F entitlements=@file.entitlements https://cbi.eclipse.org/macos/codesign/sign\n</code></pre> <p>Using the webservice is equally easy from Ant. Note that ${filename} cannot be a path. Input and output file name can be the same.</p> <pre><code>   &lt;exec dir=\"${dirname}\" executable=\"curl\"&gt;\n     &lt;arg value=\"--output\"/&gt;\n     &lt;arg value=\"${filename}\"/&gt;\n     &lt;arg value=\"--form\"/&gt;\n     &lt;arg value=\"file=@${filename}\"/&gt;\n     &lt;arg value=\"--silent\"/&gt;\n     &lt;arg value=\"--show-error\"/&gt;\n     &lt;arg value=\"--fail\"/&gt;\n     &lt;arg value=\"https://cbi.eclipse.org/jarsigner/sign\"/&gt;\n   &lt;/exec&gt;\n</code></pre>"},{"location":"cbi/Signing/#version-of-jarsigner","title":"Version of Jarsigner","text":"<p>The web service only signs with Java 11 version of jarsigner.</p> <p>Using the web service to sign Mac and Windows applications is also easy from Tycho, see</p> <ul> <li>eclipse-macsigner-plugin</li> <li>eclipse-winsigner-plugin</li> <li>Sign your eclipse project (codetrails.com/archive.org)</li> <li>OS X application signing (cbi-dev mailing list)</li> </ul>"},{"location":"cbi/Signing/#what-about-gpg-signing","title":"What about GPG signing?","text":"<p>JAR signing of the bundles and GPG-signing of the Maven artifacts are two different steps. Once a jar has been \"jar-signed\", you may or may not GPG sign the corresponding Maven artifact (.jar + .pom file) so as it can be deployed on Central. As you hinted, JAR signing has to be done before the GPG signing, since doing it the other way around would break the GPG signature.</p> <p>So you first have to sign your JAR file with the Eclipse Foundation certificate, either using the Maven plugin from CBI, the command line utility, or the signing web service \u2013 see above. Once you have your signed JAR, you can GPG sign it and stage it on Central like this:</p> <pre><code>mvn gpg:sign-and-deploy-file \\\n   -DpomFile=target/myapp-1.0.pom \\\n   -Dfile=target/myapp-1.0.jar \\\n   -Durl=http://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n   -DrepositoryId=sonatype_oss\n</code></pre>"},{"location":"helpdesk/Infrastructure-changes-Guide/","title":"Infrastructure changes","text":"<p>Home / helpdesk / Infrastructure-changes-Guide</p>"},{"location":"helpdesk/Infrastructure-changes-Guide/#ongoing-changes","title":"Ongoing Changes","text":"<ul> <li>June 2024: Wiki.eclipse.org deprecation</li> <li>Sept 2024: Committer Tools deprecation</li> <li>2025: Gerrit and Bugzilla deprecation</li> <li>2024/2025 Remove php support from eclipse.dev and download/archive</li> <li>2024 Forums shutdown</li> </ul>"},{"location":"helpdesk/Infrastructure-changes-Guide/#proposed-changes","title":"Proposed Changes","text":"<ul> <li>Deprecate www.eclipse.org/forums</li> <li>Roll out Nexus 3 https://www.eclipse.org/lists/cross-project-issues-dev/msg19963.html</li> </ul>"},{"location":"helpdesk/SLO/","title":"SLO","text":"<p>Home / helpdesk / SLO Updated: September 2024</p> <p>The Eclipse Foundation\u2019s IT team provides computer and network services and support that enable the Eclipse community, committers, members and EMO staff to access information and networked applications in a timely manner. This document describes the Service Level Objectives (SLO) set by the Eclipse Foundation.</p> <p>A Service Status page is available:  Access the Status Page</p>"},{"location":"helpdesk/SLO/#computer-systems","title":"Computer Systems","text":""},{"location":"helpdesk/SLO/#service-hours","title":"Service Hours","text":"<p>All services are expected to be available 24 hours a day, 365 days per year, except during scheduled maintenance periods.</p>"},{"location":"helpdesk/SLO/#maintenance","title":"Maintenance","text":"<p>Occasionally, services must be shut down for maintenance. Notifications will be issued to the various channels employed by the IT team to communicate with the Eclipse Community, with the following times established as minimum notification periods: - Tier I &amp; II, Blocking: Ten (10) business days. - All Tiers, Non-blocking: Three (3) business days</p> <p>Blocking maintenance means a service will be completely down for more than five minutes. Examples include moving a service to a new host or datacentre and upgrading a backend component. Non-blocking maintenance means the service is not completely taken down and remains available; however, compute jobs can be interrupted during this maintenance while the service is transitioned to a different compute node. In cases where the scheduled maintenance affects specific projects (such as SCM refactoring, or SCM migrations), notification and scheduling will be coordinated with the affected projects via public mailing list or the Eclipse Status page.</p> <p>Emergency maintenance, in response to a service degradation, a security vulnerability or any other issue of similar nature,  may occur at any time; service notices will be made on a \"Best Effort\" basis.</p>"},{"location":"helpdesk/SLO/#services-covered","title":"Services Covered","text":""},{"location":"helpdesk/SLO/#tier-1-critical","title":"Tier 1 - Critical","text":"<p>These services are the backbone of the Eclipse community and must be available at all times. - SCM: GitLab - Websites: www.eclipse.org, download.eclipse.org, accounts.eclipse.org - Integrations: ECA validator, GitHub and GitLab synchronisation - User Authentication services</p>"},{"location":"helpdesk/SLO/#tier-2-best-effort","title":"Tier 2 - Best Effort","text":"<p>These services offer support for important Eclipse-related activities, and their availability is based on \"best effort\"; IT Staff may be contacted (by authorized persons) on mobile devices for problem resolution, and will make a reasonable effort to restore service outside of support hours. - CBI (Common build) services: JIPPs, ci.eclipse.org, signing, packaging, nexus (repo.eclipse.org) - Project mailing lists, Eclipse Chat Service - PMI - projects.eclipse.org, and project websites hosted on eclipse.dev - Working Group websites operated by Eclipse Foundation - Other identified websites, including: OpenVSX registry and Eclipse Marketplace</p>"},{"location":"helpdesk/SLO/#tier-3-next-business-day","title":"Tier 3 - Next Business Day","text":"<p>These services are supported during support hours. IT Staff may tend to issues during off-hours at their discretion and availability. - Eclipse conference websites hosted by the Foundation - Other services and websites not listed in Tier 1 and Tier 2 (e.g., Infocenter Help, Planet Eclipse)</p>"},{"location":"helpdesk/SLO/#service-availability-objectives","title":"Service Availability Objectives","text":"<p>A service is considered unavailable if it is unable to respond to user requests after 5 attempts in three minutes. While a service is not considered unavailable if it is simply degraded or slow, the IT team will consider degraded performance that hinders the use of the service in a significant way or for an extended period a high priority issue.</p> Tier Availability Tier 1 &gt;99.95% Tier 2 Best Effort (&gt;99%) Tier 3 Next Business Day (&gt;95%) <p>Please note: scheduled maintenance does not constitute a down time.</p>"},{"location":"helpdesk/SLO/#slo-strategies","title":"SLO strategies","text":"<p>As a rule, the IT team observe by the following guidelines to ensure server uptime, responsiveness and stability: - Eclipse Foundation production servers are not used as test machines. - Beta, Alpha, or test code on production servers is prohibited. - Anything that poses a threat to the availability, the data integrity, the data privacy, or the performance of Tier 1 and Tier 2 services can and must be terminated. - Eclipse Foundation IT uses F/OSS software to the greatest extent possible; however, commercial software is deployed in many instances for pragmatic reasons.</p>"},{"location":"helpdesk/SLO/#infrastructure-support","title":"Infrastructure Support","text":""},{"location":"helpdesk/SLO/#support-hours","title":"Support Hours","text":"<p>Eclipse Foundation IT staff are available full-time from Monday to Friday, from 8h00 to 22h00 CE(S)T. IT staff may, and often do, casually monitor the infrastructure outside of the above support hours, at their discretion, and may respond to notifications of performance or stability issues, notably for issues related to Tier 1 or Tier 2. </p>"},{"location":"helpdesk/SLO/#requesting-support","title":"Requesting Support","text":"<p>IT staff will attempt to provide support and resolve issues in a timely manner. We work to prioritize issues according to the severity of the issue and prevailing conditions. Due to the varying nature of requests and the fluctuating demands on the IT staff, resolution times may vary. </p> <p>The team utilizes  24x7 automated monitoring and alerting mechanisms to notify staff of performance issues and service outages. These tools report their observations to the Eclipse Service Status page: https://eclipsestatus.io/, which provides mechanisms for subscribing to maintenance or service alerts.</p> <p>Support issues can be made to Eclipse HelpDesk: https://gitlab.eclipse.org/eclipsefdn/helpdesk/-/issues HelpDesk is actively monitored and triage is done based on severity and the tier of service that is impacted. </p> <p>Members of the community are urged to open an issue with the HelpDesk and to be explicit about the issue identified, the service, and any relevant characteristics of the issue. </p> <p>If Eclipse HelpDesk and/or the GitLab service are unavailable, please contact us via email at infrastructure@eclipse-foundation.org.</p>"},{"location":"helpdesk/secrets/","title":"Sharing secrets","text":"<p>Home / helpdesk / secrets</p> <p>In many cases, the credentials will be created and managed by the EF IT staff. In case a project has such credentials already created themselves and would like to provision it to aforementioned resources, the project needs to share these credentials with EF IT staff.</p> <p>We currently support 2 different ways to share such credentials in an easy and secure way:</p> <ul> <li>using our chat service by sending the credentials in a private, end-to-end encrypted room with an EF IT staff member </li> <li>using a simple command line tool to encrypt the credentials and send them by email or attach them to a confidential helpdesk ticket.</li> </ul>"},{"location":"helpdesk/secrets/#chat-service","title":"Chat Service","text":"<p>In order to send a credential via the Chat Service, find the matrix handle of the EF IT staff member you have been in contact with from the table below and start a conversation actively yourself.</p> <p>After the credential has been shared in a private room and copied by the EF staff member, delete the conversation again to avoid keeping the credential in some history / cache.</p>"},{"location":"helpdesk/secrets/#encrypt-script","title":"Encrypt script","text":"<p>Download the encrypt script. </p> <pre><code>curl https://gitlab.eclipse.org/eclipsefdn/security/scripts/-/raw/main/github/encrypt.sh\\?ref_type\\=heads -o encrypt.sh\n</code></pre> <p>The following prerequisites are required to be installed on your computer:</p> <ul> <li>age</li> <li>jq</li> </ul> <p>These dependencies can usually installed using <code>sudo apt install age jq</code> on debian based systems.</p> <p>To encrypt a file <code>secret.txt</code> for a given  you can run the script like that: <pre><code>&gt; ./encrypt.sh -e &lt;eclipse-user&gt; -o output.txt secret.txt\n</code></pre> <p>This will store the encrypted content of the input file into a file <code>output.txt</code> which can then be send to the IT staff member by email or attached to a confidential Helpdesk ticket.</p> <p>You can add multiple recipients with the <code>-e</code> or <code>-g</code> flags specifying either an Eclipse or GitHub handle for encryption.</p>"},{"location":"helpdesk/secrets/#decrypt-data","title":"Decrypt data","text":"<p>In order to decrypt a credential received via the encrypt script above, the recipient needs to run the following:</p> <pre><code>&gt; age --decrypt -i path/to/your/ssh-private-key output.txt\n</code></pre> <p>You need to explicitly specify the private ssh key that you have configured for your GitHub or Eclipse Gitlab account depending on what recipient type has been chosen by the sender. You also have the option to specify multiple keys by repeating the <code>-i</code> option, then <code>age</code> will pick the first key that can be used to decrypt the contents.</p>"},{"location":"helpdesk/secrets/#ef-it-staff-members","title":"EF IT Staff members","text":"Name Handles Team Fred Gurr fgurr (eclipse.org)fredg02 (github.com)@frederic.gurr:matrix.eclipse.org (chat.eclipse.org)frederic.gurr@eclipse-foundation.org Release Engineering S\u00e9bastien Heurtematte heurtemattes (eclipse.org)heurtematte (github.com)@sebastien.heurtematte:matrix.eclipse.org (chat.eclipse.org)sebastien.heurtematte@eclipse-foundation.org Release Engineering Pawel Stankiewicz pstankie (eclipse.org)pstankie (github.com)@pawel.stankiewicz:matrix.eclipse.org (chat.eclipse.org)pawel.stankiewicz@eclipse-foundation.org Release Engineering Thomas Neidhart netomi (eclipse.org)netomi (github.com)@thomas.neidhart:matrix.eclipse.org (chat.eclipse.org)thomas.neidhart@eclipse-foundation.org Security"},{"location":"jiro/CI-Best-Practices/","title":"CI Best Practices","text":"<p>Home / jiro / CI-Best-Practices</p> <ul> <li>Keep builds and tests FAST!</li> <li>10 minutes are fast, 3 hours are not</li> <li>Create robust tests, do not rely on best-case-scenario timeouts</li> <li>Always use reasonable job timeouts</li> <li>Disable concurrent builds</li> <li>Use webhook triggers</li> <li>If that's not possible, use the \"poll scm\" option</li> <li>Don't do plain periodical builds (nightly builds)</li> <li>Keep your build history at a reasonable length, do not keep more than 5 builds with artifacts</li> <li>Clean out your old/deprecated build jobs regularly</li> </ul> <p>See also [[CI_best_practices]]</p>"},{"location":"jiro/CI-Best-Practices/#jenkins-pipeline-best-practices","title":"Jenkins Pipeline Best Practices","text":"<ul> <li>Use Jenkinsfiles (commit pipeline definitions to SCM)</li> <li>Use declarative pipelines, use scripted syntax only as a last resort</li> <li>For complex pipelines, consider shared libraries</li> </ul> <p>See also https://www.cloudbees.com/blog/top-10-best-practices-jenkins-pipeline-plugin</p>"},{"location":"jiro/CI-Best-Practices/#build-performance-optimization","title":"Build performance optimization","text":""},{"location":"jiro/CI-Best-Practices/#use-tycho-14","title":"Use Tycho 1.4+","text":"<p>Tycho 1.4 calculates bundle timestamps from the git history much faster than the versions before (you may see improvements of some seconds per Maven aggregator module). Besides that, also all your other tools (Maven, Maven Plugin, JDK, ...) should be on the most recent level possible with the target environment restrictions of your project.</p>"},{"location":"jiro/CI-Best-Practices/#disable-unnecessary-gerrit-triggers","title":"Disable unnecessary Gerrit triggers","text":"<p>Check at least \"draft\" and \"private\" in the Gerrit trigger section for changes to be excluded from automatic builds.</p>"},{"location":"jiro/CI-Best-Practices/#avoid-in-ant-globs","title":"Avoid ** in Ant globs","text":"<p>When archiving artifacts, scanning for test reports and so on, avoid using a double asterisk wildcard for \"any directory\". That can take a huge amount of time. In almost all cases we can easily specify the path with single wildcard, like <code>*/target/report/*.xml</code></p>"},{"location":"jiro/CI-Best-Practices/#maven-batch-mode","title":"Maven batch mode","text":"<p>Always run maven with <code>--batch-mode</code> (or <code>-B</code>) to get rid of the many lines of download progress in the console. Will avoid several MB of log output with each build, making it easier for you to diagnose builds and easier for Jenkins to store them. </p> <p>You can also completely remove all information about download and upload by setting the system property <code>-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn</code>. This can also be set in an environment variable <code>MAVEN_OPTS</code>.</p> <p>Note: On the new clustered infrastructure, both the <code>--batch-mode</code> and the system property <code>Slf4jMavenTransferListener</code> are set in all provided agents via <code>MAVEN_OPTS</code> and <code>MAVEN_CONFIG</code> environment variables.</p>"},{"location":"jiro/CI-Best-Practices/#parallel-tycho-build","title":"Parallel Tycho build","text":"<p>Tycho plugins are not marked thread-safe. Nevertheless, many projects use parallel Maven builds with Tycho without problems. If you take this route, make sure that only one UI test can run at any given time (e.g. there is only a single executor on the same node). If you feel confident after a while, you may even want to disable the non-thread-safe warnings using <code>-Dorg.slf4j.simpleLogger.log.org.apache.maven.lifecycle.internal.builder.BuilderCommon=error</code>.</p>"},{"location":"jiro/CI-Best-Practices/#reuse-the-working-directory","title":"Reuse the working directory","text":"<p>On nodes that are re-used for multiple builds, do not delete the Jenkins workspace at the start/end of the build. Otherwise, you have to clone the repository again on the next build. It's faster to use <code>git reset -fdx</code> instead.</p> <p>Important: This tip does not apply to dynamic agents on our clustered infrastructure, as agents are ephemeral and workspaces are eventually lost at the end of the builds. Deleting Jenkins workspaces at the end of the build is then a waste of time, as this will be done by the system anyway after the agent is shutdown.</p>"},{"location":"jiro/CI-Best-Practices/#disable-secondary-artifacts-in-gerrit-builds","title":"Disable secondary artifacts in Gerrit builds","text":"<p>Your build may create documentation, online help, source features, sign artifacts and many other things in addition to compilation and test. Use Maven profiles to disable most of those additional build steps for Gerrit builds. Only build those on the master branch after merging the Gerrit change. Of course, there is a trade-off here between how often your master branch may break and how much time you can save in Gerrit builds.</p>"},{"location":"jiro/CI-Best-Practices/#eliminate-slow-tests","title":"Eliminate slow tests","text":"<p>From a green build, open the test results tab. Click the table header to sort by execution time. Starting from the top, look for rows with a little number of contained test methods. Optimize/delete these tests, they are eating too much time per test case.</p>"},{"location":"jiro/CI-Best-Practices/#pipeline-durability-hints","title":"Pipeline durability hints","text":"<p>If you configure jobs via pipeline, you probably want to configure them for performance instead of durability.</p> <p>Note: On our clustered infrastructure, the default pipeline durability is already set to <code>performance</code> by default on all Jenkins instances.</p>"},{"location":"jiro/Common-build-errors/","title":"Common build errors","text":"<p>Home / jiro / Common-build-errors</p> <p>On our cluster-based infrastructure all build executors/agents/pods (except on dedicated agents) are dynamically spun up. This usually takes a little while. Therefore the build executor status panel might show something like * \"(pending\u2014Waiting for next available executor)\" or * \"my-agent-abcd123 is offline or suspended\" for a few seconds, before the build starts. We've opened a ticket with a suggestion on the Jenkins project to speed up the provisioning process. Feel free to vote on this issue if you feel it is important for you.</p> <p>If such a message is shown for more than ~5 minutes, you can safely assume that something is wrong with the pod/container config. For example: a docker image can't be found because there is a typo in the name or the tag was wrong.</p>"},{"location":"jiro/Common-build-errors/#what-is-killing-my-build-im-using-custom-containers","title":"What is killing my build? I'm using custom containers!","text":"<p>A good indicator that your build is aborted due to an OutOfMemory error is the word \"Killed\" appearing in the console logs.</p> <p>First, please get familiarized with how Kubernetes assigns memory resources to containers and pods</p> <p>Then, you should know that, as soon as you run your build in a custom Kubernetes agent, Jenkins adds a container named \"jnlp\" that will handle the connection between the pod agent and the master. The resources assigned to this \"jnlp\" container come from a default values we set for you. Because we know the \"jnlp\" container does not use need of cpu and memory, we set the default values for all containers to low values (about 512MiB and 0.25 vCPU). This way, we're sure that the \"jnlp\" container won't uselessly consume too much resources that are allocated to your project. But this has the negative effect that, if you don't effectively specify the resources requests and limits in your pod template, your custom containers will also inherit those values (which are probably too low for you). To overcome the issue, you need to specify those values in your pod template like:</p> <pre><code>pipeline {\n  agent {\n    kubernetes {\n      label 'my-agent-pod'\n      yaml \"\"\"\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: maven\n    image: maven:alpine\n    command:\n    - cat\n    tty: true\n    resources:\n      limits:\n        memory: \"2Gi\"\n        cpu: \"1\"\n      requests:\n        memory: \"2Gi\"\n        cpu: \"1\"\n\"\"\"\n    }\n  }\n  stages {\n    stage('Run maven') {\n      steps {\n        container('maven') {\n          sh 'mvn -version'\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>Note that if you run multiple containers, you need to specify the limits for each. </p> <p>We plan to develop some tooling to automatically inject correct default values for your custom containers depending on the resource quotas and the concurrency level (i.e. how many agent can run at once) assigned to your project GitHub Issue #20.</p>"},{"location":"jiro/Common-build-errors/#my-build-fails-with-fatal-cannot-run-program-xvnc-what-do-i-need-to-do","title":"My build fails with: 'FATAL: Cannot run program \"Xvnc\"', what do I need to do?","text":"<p>You are most likely running UI tests that require a desktop environment and a VNC server. The default pod template (<code>basic</code>) does not provide such an environment. Therefore you will need to use a different pod template or a custom docker image.</p> <p>**The Ubuntu pod templates (labels: \"ubuntu-2204\", \"ubuntu-2404\", \"ubuntu-latest\") can be used for UI tests.</p> <p>See https://wiki.eclipse.org/Jenkins#How_do_I_run_UI-tests_on_the_new_infra.3F on how the pod template can be used with freestyle or pipeline jobs.</p>"},{"location":"jiro/Common-build-errors/#my-build-fails-with-error-unrecognized-vm-option-usecontainersupport-what-do-i-need-to-do","title":"My build fails with: \"[ERROR] Unrecognized VM option '+UseContainerSupport'\", what do I need to do?","text":"<p>Your build is still running with a JDK &lt; 8 (e.g. JDK 6). Since these are really old and unsupported JDKs we urge you to switch to a more recent JDK, at least JDK 8. If that's not immediately possible - for reasons - you will need to use the following workaround:</p> <p>Unset the environment variables \"JAVA_TOOL_OPTIONS\" and \"_JAVA_OPTIONS\" by creating two string build parameters with the those names: 1. In the Jenkins job configuration select \"This project is parameterized\" 2. Add parameter -&gt; String parameter 3. Set name \"JAVA_TOOL_OPTIONS\" 4. Leave default value empty 5. Repeat 2.-4. for \"_JAVA_OPTIONS\"</p>"},{"location":"jiro/Common-build-errors/#my-build-fails-with-no-user-exists-for-uid-1000100000-whats-the-issue","title":"My build fails with \"No user exists for uid 1000100000\", what's the issue?","text":"<p>First, you need to know that we run containers using an arbitrarily assigned user ID (1000100000) in our OpenShift cluster. This is for security reasons.</p> <p>Unfortunately, most of images you can find on DockerHub (including official images) do not support running as an arbitrary user. Actually, most of them expect to run as root, which is definitely a bad practice. See also question below about [[#How can I run my build in a container with root privileges?|how to run a container as root]].</p> <p>Moreover, some programs like <code>ssh</code> search for a mapping between the user ID (1000100000) and a user name on the system (here a container). It's very rare that any container anticipate this need and actually created a user with ID=1000100000. To avoid this error, you need to customize the image. OpenShift publishes guidelines with best practices about how to create Docker images. More specifically, see the section about how to support running with arbitrary user ID.</p> <p>In order to make your image call the uid_entrypoint as listed in the link above, you will need to add it to the command directive in the pod template, e.g.:</p> <pre><code>pipeline {\n  agent {\n    kubernetes {\n      label 'my-pod'\n      yaml **\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: custom-container\n    image: 'custom/image'\n    command: [ \"/usr/local/bin/uid_entrypoint\" ]\n    args: [ \"cat\" ]\n    tty: true\n**\n    }\n  }\n  stages {\n    stage('Stage 1') {\n      steps {\n        container('custom-container') {\n          sh 'whoami'\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>If you want to see in practice, have a look at some images we've defined to run in the cluster on this GitHub repository.</p>"},{"location":"jiro/Common-build-errors/#my-build-fails-with-host-key-verification-failed-what-should-i-do","title":"My build fails with \"Host key verification failed\", what should I do?","text":"<p>As long as you stay in the default <code>jnlp</code> docker image (i.e. use a Freestyle Job or a Pipeline job without custom pod template), you'll benefit from our existing configuration where we mount a <code>known_hosts</code> file in the <code>&gt;~/.ssh</code> folder of all containers.</p> <p>If you define a custom pod template, you need to add some configuration to mount this config map in your containers. The only thing that you have to know is the config map name known-hosts and mount it at the proper location <code>/home/jenkins/.ssh</code>. </p> <pre><code>pipeline {\n  agent {\n    kubernetes {\n      label 'my-agent-pod'\n      yaml \"\"\"\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: maven\n    image: maven:alpine\n    command:\n    - cat\n    tty: true\n    volumeMounts:\n    - name: volume-known-hosts\n      mountPath: /home/jenkins/.ssh\n  volumes:\n  - name: volume-known-hosts\n    configMap:\n      name: known-hosts\n\"\"\"\n    }\n  }\n  stages {\n    ...\n  }\n}\n</code></pre> <p>Currently, the known_hosts file we provide has the host keys for the following sites: * git.eclipse.org:22 * git.eclipse.org:29418 * build.eclipse.org * github.com</p> <p>If you need any other site to be added, feel free to open a HelpDesk issue.</p>"},{"location":"jiro/Common-build-errors/#if-i-try-to-run-builds-on-the-jenkins-controller-master-node-they-never-start-what-is-wrong","title":"If I try to run builds on the Jenkins controller (\u2018master\u2019 node) they never start. What is wrong?","text":"<p>On our build cluster all builds are executed on dynamic or static build agents. The master instance has no executors and therefore can not run any builds itself.</p> <p>In case of pipeline jobs, it might appear as if the master is building, but it only handles the workflow of the tasks defined in the pipeline and post-build tasks, never the actually build steps.</p>"},{"location":"jiro/Common-build-errors/#my-build-is-sometime-taking-twice-as-long-to-complete-is-there-an-issue-with-the-cluster","title":"My build is sometime taking twice as long to complete? Is there an issue with the cluster?","text":"<p>First thing to do when you think that a build is slow, is to compare it with several other run over the course of a couple of days and relativize. We consider a single build being slow not only by comparing the average build time, but taking into account the standard deviation of the build time history.</p> <p>You should keep in mind that when running on a clustered agent, CPU is always requested as an absolute quantity, never as a relative quantity; 0.1 is the same amount of CPU on a single-core, dual-core, or 48-core machine. Also, the CPU resources assigned to containers are absolute and not relative to the clock speed of the CPUs. On the cluster we currently have some machines with 3.70GHz CPU cores and others with 2.00GHz CPU cores. So, depending on which node you jobs are schedule to run on, the ''performances may vary''. We will eventually streamline the machines on the cluster and reserve higher performance nodes for build jobs and keep lower performance ones for other tasks. But during the migration and until the JIPP machines from the old infra are moved to the cluster, we need those less performant machines to keep up with the requested compute resources.</p>"},{"location":"jiro/Common-build-errors/#ive-updated-my-custom-image-and-reference-but-the-older-one-is-still-being-used-somehow","title":"I've updated my custom image and reference but the older one is still being used somehow.","text":"<p>This could be related to JENKINS-47759 (See Bug 565044) Instead of a pod label like <code>my-agent-pod</code>, consider using a label like <code>my-agent-pod + '-' + env.BUILD_NUMBER</code>.</p>"},{"location":"jiro/Common-build-errors/#where-is-my-build-workspace-i-see-error-no-workspace","title":"Where is my build workspace? I see \"Error: No workspace\"","text":"<p>On our new cluster-based infrastructure, all builds run in dynamically created docker containers. After the build, the containers are destroyed and the workspace vanishes. </p> <p>Build artifacts can be archived (as before) by using the \"archive artifacts\" post-build action. If you need to access log files, etc. (for debugging purposes), you can archive them as well.</p> <p>We understand that this can be inconvenient, especially when debugging a failing build. One possible workaround is to use \"sleep\" in a shell build step (e.g. for 10min) at the end, to be able to access the workspace after the build.</p>"},{"location":"jiro/Dedicated-build-agents/","title":"Dedicated build agents","text":"<p>Home / jiro / Dedicated-build-agents</p> <p>Yes, we can connect external machines to your Jenkins instance. For Linux and macOS agents, we recommend connecting them via SSH. It means that the machine must be addressable on the internet with an SSH port open. For Windows agents (or other agents where SSH is not possible), agents can be connected via WebSocket. The connection will be at the initiative of the agents (rightfully called inbound agents in this case), meaning that the Jenkins instance will have little control over the connection. The advantage is that the agent machine does not need to be addressable on the internet and can run entirely behind a firewall. See Jenkins documentation for more information. Note that we don't support inbound agents over direct TCP connection.</p> <p>Please note, due to increased security concerns, the requirements for external dedicated agents are stricter now.</p> <p>Attaching a dedicated agent can be requested via a HelpDesk ticket.</p>"},{"location":"jiro/Dedicated-build-agents/#what-kind-of-dedicated-agents-are-provided-by-the-eclipse-foundation","title":"What kind of dedicated agents are provided by the Eclipse Foundation?","text":"<p>The Eclipse Foundation provides some shared resources to projects. At this time we provide:</p> <ul> <li>Riscv64 servers based on VisionFive2 SOC boards, with 8 GB RAM, 4 cores, 960 GB SSD Nvme storage. At this point, we estimate that each machine can host up to 4 containers with oversubscription.</li> </ul> <p>Containers are delivered with latest (at the moment of container creation) Ubuntu https://hub.docker.com/r/riscv64/ubuntu/   and with the following tooling:</p> <ul> <li>Temurin JDK 21 LTS https://adoptium.net/en-GB/temurin/releases/?arch=riscv64&amp;version=21</li> <li>Maven 3.9.9</li> <li>Ant 1.10.5</li> </ul> <p>Additional packages installed:     * build-essential      * libboost-all-dev      * libssl-dev      * libgtk-3-dev      * libglu1-mesa-dev     * libgtk-3-dev</p> <p>This will be mostly on a first-come-first-serve basis. If more projects need more compute time on riscv64, we will need to   delegate projects to cloud services like Scaleway at some point.</p>"},{"location":"jiro/Default-Jenkins-plugins/","title":"Default Jenkins plugins","text":"<p>Home / jiro / Default-Jenkins-plugins</p> <ul> <li>ace-editor</li> <li>analysis-core</li> <li>ant</li> <li>antisamy-markup-formatter</li> <li>apache-httpcomponents-client-4-api</li> <li>authentication-tokens</li> <li>bouncycastle-api</li> <li>branch-api</li> <li>build-timeout</li> <li>cloudbees-folder</li> <li>command-launcher</li> <li>conditional-buildstep</li> <li>config-file-provider</li> <li>configuration-as-code</li> <li>configuration-as-code-support</li> <li>credentials</li> <li>credentials-binding</li> <li>display-url-api</li> <li>docker-commons</li> <li>docker-workflow</li> <li>durable-task</li> <li>email-ext</li> <li>extended-read-permission</li> <li>extra-columns</li> <li>gerrit-trigger</li> <li>ghprb</li> <li>git</li> <li>git-client</li> <li>git-parameter</li> <li>git-server</li> <li>github</li> <li>github-api</li> <li>github-branch-source</li> <li>greenballs</li> <li>handlebars</li> <li>jackson2-api</li> <li>javadoc</li> <li>jdk-tool</li> <li>jobConfigHistory</li> <li>jquery</li> <li>jquery-detached</li> <li>jsch</li> <li>junit</li> <li>kubernetes</li> <li>kubernetes-credentials</li> <li>ldap</li> <li>lockable-resources</li> <li>mailer</li> <li>matrix-auth</li> <li>matrix-project</li> <li>maven-plugin</li> <li>momentjs</li> <li>parameterized-trigger</li> <li>pipeline-build-step</li> <li>pipeline-graph-analysis</li> <li>pipeline-input-step</li> <li>pipeline-maven</li> <li>pipeline-milestone-step</li> <li>pipeline-model-api</li> <li>pipeline-model-declarative-agent</li> <li>pipeline-model-definition</li> <li>pipeline-model-extensions</li> <li>pipeline-rest-api</li> <li>pipeline-stage-step</li> <li>pipeline-stage-tags-metadata</li> <li>pipeline-stage-view</li> <li>plain-credentials</li> <li>promoted-builds</li> <li>rebuild</li> <li>resource-disposer</li> <li>run-condition</li> <li>scm-api</li> <li>script-security</li> <li>simple-theme-plugin</li> <li>sonar</li> <li>ssh-agent</li> <li>ssh-credentials</li> <li>ssh-slaves</li> <li>structs</li> <li>timestamper</li> <li>token-macro</li> <li>variant</li> <li>warnings-ng</li> <li>windows-slaves</li> <li>workflow-aggregator</li> <li>workflow-api</li> <li>workflow-basic-steps</li> <li>workflow-cps</li> <li>workflow-cps-global-lib</li> <li>workflow-durable-task-step</li> <li>workflow-job</li> <li>workflow-multibranch</li> <li>workflow-scm-step</li> <li>workflow-step-api</li> <li>workflow-support</li> <li>ws-cleanup</li> <li>xvnc</li> </ul> <p>Additional Jenkins plugins can be added by filing a HelpDesk issue.</p>"},{"location":"jiro/FAQ/","title":"FAQ","text":"<p>Home / jiro / FAQ</p> <p>The most simple way is to create a Jenkinsfile in your git repo and create a multi-branch pipeline job in your Jenkins instance. See https://jenkins.io/doc/pipeline/tour/hello-world/ for more information. See below a simple Jenkinsfile. Note that the full list of available tools name can be found in the Tools (JDK, Maven, Ant) section.</p> <pre><code>pipeline {\n    agent any\n    tools {\n        maven 'apache-maven-latest'\n        jdk 'temurin-jdk17-latest'\n    }\n    options {\n        timeout(time: 30, unit: 'MINUTES')\n        disableConcurrentBuilds()\n        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '5'))\n    }\n    stages {\n        stage('Build') {\n            steps {\n                sh '''\n                    java -version\n                    mvn -v\n                '''\n            }\n        }\n    }\n    post {\n        // send a mail on unsuccessful and fixed builds\n        unsuccessful { // means unstable || failure || aborted\n            emailext subject: 'Build $BUILD_STATUS $PROJECT_NAME #$BUILD_NUMBER!', \n            body: '''Check console output at $BUILD_URL to view the results.''',\n            recipientProviders: [culprits(), requestor()], \n            to: 'other.recipient@domain.org'\n        }\n        fixed { // back to normal\n            emailext subject: 'Build $BUILD_STATUS $PROJECT_NAME #$BUILD_NUMBER!', \n            body: '''Check console output at $BUILD_URL to view the results.''',\n            recipientProviders: [culprits(), requestor()], \n            to: 'other.recipient@domain.org'\n        }\n    }\n}\n</code></pre>"},{"location":"jiro/FAQ/#how-do-i-run-ui-tests-on-the-cluster-based-infrastructure","title":"How do I run UI-tests on the cluster-based infrastructure?","text":"<ul> <li>In general, you can use a pre-built/custom docker image and Jenkins pipelines, see https://wiki.eclipse.org/Jenkins#How_do_I_run_my_build_in_a_custom_container.3F.</li> <li>If your project requires UI test-specific dependencies (e.g. metacity, mutter), you can try to use the <code>ubuntu-latest</code> pod template.   The list of installed applications can be found here (it does not show all dependencies): https://github.com/eclipse-cbi/jiro-agents/blob/master/ubuntu/Dockerfile</li> <li>If it does not work, use a pre-build/custom docker image.</li> </ul> <p>For freestyle jobs, the label can be specified in the job configuration under \"Restrict where this project can be run\":</p> <p></p> <p>Example for pipeline jobs: <pre><code>pipeline {\n    agent {\n        kubernetes {\n            label 'ubuntu-latest'\n        }\n    }\n    tools {\n        maven 'apache-maven-latest'\n        jdk 'temurin-jdk17-latest'\n    }\n    options {\n        timeout(time: 30, unit: 'MINUTES')\n        disableConcurrentBuilds()\n        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '5'))\n    }\n    stages {\n        stage('Build') {\n            steps {\n                wrap([$class: 'Xvnc', takeScreenshot: false, useXauthority: true]) {\n                  sh 'mvn clean verify'\n                }\n            }\n        }\n    }\n    post {\n      //...\n    }\n}\n</code></pre></p>"},{"location":"jiro/FAQ/#how-to-override-default-values-like-pod-template-resources","title":"How to override default values like pod template resources?","text":"<pre><code>pipeline {\n    agent {\n        kubernetes {\n          inheritFrom 'ubuntu-latest'\n          yaml \"\"\"\n    spec:\n      containers:\n      - name: jnlp\n        resources:\n          limits:\n            memory: \"4Gi\"\n            cpu: \"4000m\"\n          requests:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n    \"\"\"\n        }\n    }\n\n    stages {\n        stage('Main') {\n            steps {\n                sh 'hostname'\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"jiro/FAQ/#how-do-i-run-my-build-in-a-custom-container","title":"How do I run my build in a custom container?","text":"<p>You need to use a Jenkins pipeline to do so. Then you can specify a Kubernetes pod template. See an example below.</p> <p>You can either use already existing \"official\" docker images, for example the <code>maven:&lt;version&gt;-alpine</code> images or create your own custom docker image.</p> <pre><code>pipeline {\n  agent {\n    kubernetes {\n      label 'my-agent-pod'\n      yaml \"\"\"\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: maven\n    image: maven:alpine\n    command:\n    - cat\n    tty: true\n  - name: php\n    image: php:7.2.10-alpine\n    command:\n    - cat\n    tty: true\n  - name: hugo\n    image: eclipsecbi/hugo:0.110.0\n    command:\n    - cat\n    tty: true\n\"\"\"\n    }\n  }\n  stages {\n    stage('Run maven') {\n      steps {\n        container('maven') {\n          sh 'mvn -version'\n        }\n        container('php') {\n          sh 'php -version'\n        }\n        container('hugo') {\n          sh 'hugo -version'\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>See the Kubernetes Jenkins plugin for more documentation.</p>"},{"location":"jiro/FAQ/#how-can-i-run-my-build-in-a-container-with-root-privileges","title":"How can I run my build in a container with root privileges?","text":"<p>For security reasons, you cannot do that. We run an infrastructure open to the internet, which potentially runs stuff from non-trusted code (e.g., PR) so we need to follow a strict policy to protect the common good.</p> <p>More specifically, we run containers using an arbitrarily assigned user ID (e.g. 1000100000) in our OpenShift cluster. The group ID is always root (0) though. The security context constraints we use for running projects' containers are \"restricted\". You cannot change this level from your <code>podTemplate</code>.</p> <p>Unfortunately, most images you can find on DockerHub (including official images) do not support running as an arbitrary user. Actually, most of them expect to run as root, which is definitely a bad practice.</p> <p>OpenShift publishes guidelines with best practices about how to create Docker images. More specifically, see the section about how to support running with arbitrary user ID.</p> <p>To test if an image is ready to be run with an arbitrarily assigned user ID, you can try to start it with the following command line:</p> <pre><code>$ docker run -it --rm -u $((1000100000 + RANDOM % 100000)):0 image/name:tag\n</code></pre>"},{"location":"jiro/FAQ/#i-want-to-build-a-custom-docker-image-with-docker-build-but-it-does-not-work-what-should-i-do","title":"I want to build a custom Docker image (with <code>docker build</code>), but it does not work. What should I do?","text":"<p>You can use and integrate the Eclipse Foundation Jenkins shared library named: jenkins-pipeline-library.</p> <p>This library proposes a containerBuild function for building docker images in the Eclipse Foundation infrastructure. </p> <pre><code>@Library('releng-pipeline') _\n\npipeline {\n    agent any\n    environment {\n        HOME = \"${env.WORKSPACE}\"\n    }\n    stages {\n        stage('build') {\n            agent {\n                kubernetes {\n                    yaml loadOverridableResource(\n                        libraryResource: 'org/eclipsefdn/container/agent.yml'\n                    )\n                }\n            }\n            steps {\n                container('containertools') {\n                    containerBuild(\n                        credentialsId: '&lt;jenkins-credential-id&gt;',\n                        name: 'docker.io/&lt;namespace-name&gt;/&lt;container-name&gt;',\n                        version: 'latest'\n                    )\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"jiro/FAQ/#how-do-i-use-opttools-in-a-custom-container","title":"How do I use /opt/tools in a custom container?","text":"<p>You need to specify the <code>tools</code> persistence volume.</p> <pre><code>pipeline {\n  agent {\n    kubernetes {\n      label 'my-agent-pod'\n      yaml \"\"\"\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: custom-name\n    image: my-custom-image:latest\n    tty: true\n    command:\n    - cat\n    volumeMounts:\n    - name: tools\n      mountPath: /opt/tools\n  volumes:\n  - name: tools\n    persistentVolumeClaim:\n      claimName: tools-claim-jiro-&lt;project_shortname&gt;\n\"\"\"\n    }\n  }\n  stages {\n    stage('Run maven') {\n      steps {\n        container('custom-name') {\n          sh '/opt/tools/apache-maven/latest/bin/mvn -version'\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>[!IMPORTANT] Do not forget to replace <code>&lt;project_shortname&gt;</code> in the claimName with your project name (e.g. <code>tools-claim-jiro-cbi</code> for the CBI project).</p>"},{"location":"jiro/FAQ/#in-a-custom-container-the-build-cant-write-to-homejenkins-what-do-i-need-to-do","title":"In a custom container the build can't write to /home/jenkins, what do I need to do?","text":"<p>Due to recent changes in the Jenkins Kubernetes plugin, you need to specify an empty dir volume for <code>/home/jenkins</code>, if your build uses a directory like <code>/home/jenkins/.ivy2</code> or <code>/home/jenkins/.npm</code>.</p> <pre><code>pipeline {\n  agent {\n    kubernetes {\n      label 'my-agent-pod'\n      yaml \"\"\"\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: custom-name\n    image: my-custom-image:latest\n    tty: true\n    command:\n    - cat\n    volumeMounts:\n    - mountPath: \"/home/jenkins\"\n      name: \"jenkins-home\"\n      readOnly: false\n  volumes:\n  - name: \"jenkins-home\"\n    emptyDir: {}\n\"\"\"\n    }\n  }\n  stages {\n    stage('Run maven') {\n      steps {\n        container('custom-name') {\n          sh 'mkdir -p /home/jenkins/foobar'\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>[!NOTE] We are not satisfied with this workaround and are actively looking for a more convenient way to let projects use custom containers without specifying a bunch of volume mounts.</p>"},{"location":"jiro/FAQ/#how-do-i-deploy-artifacts-to-downloadeclipseorg","title":"How do I deploy artifacts to download.eclipse.org?","text":"<p>You cannot just <code>cp</code> stuff to a folder. You need to do that with <code>ssh</code> and <code>scp</code> while connecting to <code>projects-storage.eclipse.org</code>. Therefore, SSH credentials need to be set up on the project's Jenkins instance. This is already set up by default for all instances on our infrastructure.</p> <p>This service provides access to the Eclipse Foundation file servers storage:</p> <ul> <li><code>/home/data/httpd/download.eclipse.org</code></li> <li><code>/home/data/httpd/archive.eclipse.org</code></li> <li><code>/home/data/httpd/download.polarsys.org</code></li> <li><code>/home/data/httpd/download.locationtech.org</code></li> </ul> <p>Depending on how you run your build, the way you will use them is different. See the different cases below.</p>"},{"location":"jiro/FAQ/#freestyle-job","title":"Freestyle job","text":"<p>You need to activate the \"SSH Agent\" plugin in your job configuration and select the proper credentials <code>genie.&lt;projectname&gt; (ssh://projects-storage.eclipse.org)</code>.</p> <p>[[File:project-storage-ssh-agent.png|800px]]</p> <p>Then you can use <code>ssh</code>, <code>scp</code>, <code>rsync</code> and <code>sftp</code> commands to deploy artifacts to the server, e.g.,</p> <pre><code>scp -o BatchMode=yes target/my_artifact.jar genie.&lt;projectname&gt;@projects-storage.eclipse.org:/home/data/httpd/download.eclipse.org/&lt;projectname&gt;/\nssh -o BatchMode=yes genie.&lt;projectname&gt;@projects-storage.eclipse.org ls -al /home/data/httpd/download.eclipse.org/&lt;projectname&gt;/\nrsync -a -e ssh &lt;local_dir&gt; genie.&lt;projectname&gt;@projects-storage.eclipse.org:/home/data/httpd/download.eclipse.org/&lt;projectname&gt;/\n</code></pre>"},{"location":"jiro/FAQ/#deployment-with-maven","title":"Deployment with Maven","text":"<p>It is possible to deploy build output from within Maven, using Maven Wagon and wagon-ssh-external. As the build environment uses an SSH agent, the Maven Wagon plugins must use the external SSH commands so that the agent is used.</p> <p>If the build outputs are executables or p2 update site and not Maven artifacts then the standard maven deploy needs to be disabled. E.g. with this in the appropriate profile in the parent/pom.xml</p> <pre><code>&lt;source lang=\"xml\" style=\"border:1px solid;padding: 5px; margin: 5px;\"&gt;\n&lt;plugin&gt;\n    &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;\n    &lt;configuration&gt;\n        &lt;skip&gt;true&lt;/skip&gt;\n    &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre> <p>Define some properties for the destination in parent/pom.xml:</p> <pre><code>&lt;source lang=\"xml\" style=\"border:1px solid;padding: 5px; margin: 5px;\"&gt;\n&lt;download-publish-path&gt;/home/data/httpd/download.eclipse.org/[projectname]/snapshots/update-site&lt;/download-publish-path&gt;\n&lt;download-remote-publish-path&gt;genie.[projectname]@projects-storage.eclipse.org:/home/data/httpd/download.eclipse.org/[projectname]/snapshots/update-site&lt;/download-remote-publish-path&gt;\n</code></pre> <p>Define the Wagon transport in parent/pom.xml: <pre><code>&lt;source lang=\"xml\" style=\"border:1px solid;padding: 5px; margin: 5px;\"&gt;\n&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n                ...\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;\n    &lt;extensions&gt;\n        &lt;extension&gt;\n            &lt;groupId&gt;org.apache.maven.wagon&lt;/groupId&gt;\n            &lt;artifactId&gt;wagon-ssh-external&lt;/artifactId&gt;\n            &lt;version&gt;3.0.0&lt;/version&gt;\n        &lt;/extension&gt;\n    &lt;/extensions&gt;\n&lt;/build&gt;\n</code></pre></p> <p>Do the actual upload during the deploy phase (be sure to add that to the Maven invocation). <pre><code>&lt;source lang=\"xml\" style=\"border:1px solid;padding: 5px; margin: 5px;\"&gt;\n&lt;plugin&gt;\n    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;\n    &lt;artifactId&gt;wagon-maven-plugin&lt;/artifactId&gt;\n    &lt;version&gt;2.0.0&lt;/version&gt;\n    &lt;executions&gt;\n        &lt;execution&gt;\n            &lt;id&gt;prepare-publish&lt;/id&gt;\n            &lt;phase&gt;deploy&lt;/phase&gt;\n            &lt;goals&gt;\n                &lt;goal&gt;sshexec&lt;/goal&gt;\n            &lt;/goals&gt;\n            &lt;configuration&gt;\n                &lt;url&gt;scpexe://${download-remote-publish-path}&lt;/url&gt;\n                &lt;commands&gt;\n                    &lt;command&gt;rm -rf ${download-publish-path}/*&lt;/command&gt;\n                &lt;/commands&gt;\n            &lt;/configuration&gt;\n        &lt;/execution&gt;\n        &lt;execution&gt;\n            &lt;id&gt;publish&lt;/id&gt;\n            &lt;phase&gt;deploy&lt;/phase&gt;\n            &lt;goals&gt;\n                &lt;goal&gt;upload&lt;/goal&gt;\n            &lt;/goals&gt;\n            &lt;configuration&gt;\n                &lt;fromDir&gt;target/repository&lt;/fromDir&gt;\n                &lt;includes&gt;*/**&lt;/includes&gt;\n                &lt;url&gt;scpexe://${download-remote-publish-path}&lt;/url&gt;\n                &lt;toDir&gt;&lt;/toDir&gt;\n            &lt;/configuration&gt;\n        &lt;/execution&gt;\n    &lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre></p> <p>This uses the <code>sshexec</code> goal to delete old files and upload to copy new files. Note <code>*/**</code> for all directories. <code>&lt;toDir&gt;&lt;/toDir&gt;</code> appears to be relative to the path given in the URL.</p> <p>Be careful with paths and properties to ensure you upload to the correct place and do not delete the wrong thing.</p> <p>Eclipse Memory Analyzer uses the above with Maven Wagon to deploy the snapshot nightly builds.</p>"},{"location":"jiro/FAQ/#pipeline-job-without-custom-pod-template","title":"Pipeline job without custom pod template","text":"<pre><code>pipeline {\n  agent any\n\n  stages {\n    stage('stage 1') {\n      ...\n    }\n    stage('Deploy') {\n      steps {\n        sshagent ( ['projects-storage.eclipse.org-bot-ssh']) {\n          sh '''\n            ssh -o BatchMode=yes genie.projectname@projects-storage.eclipse.org rm -rf /home/data/httpd/download.eclipse.org/projectname/snapshots\n            ssh -o BatchMode=yes genie.projectname@projects-storage.eclipse.org mkdir -p /home/data/httpd/download.eclipse.org/projectname/snapshots\n            scp -o BatchMode=yes -r repository/target/repository/* genie.projectname@projects-storage.eclipse.org:/home/data/httpd/download.eclipse.org/projectname/snapshots\n          '''\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"jiro/FAQ/#pipeline-job-with-custom-pod-template","title":"Pipeline job with custom pod template","text":"<p>[!IMPORTANT] A 'jnlp' container is automatically added, when a custom pod template is used to ensure connectivity between the Jenkins master and the pod. If you want to deploy files to download.eclipse.org, you only need to specify the known-hosts volume for the JNLP container (as seen below) to avoid \"host verification failed\" errors.</p> <pre><code>pipeline {\n  agent {\n    kubernetes {\n      label 'my-pod'\n      yaml '''\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: maven\n    image: maven:alpine\n    command:\n    - cat\n    tty: true\n  - name: jnlp\n    volumeMounts:\n    - name: volume-known-hosts\n      mountPath: /home/jenkins/.ssh\n  volumes:\n  - name: volume-known-hosts\n    configMap:\n      name: known-hosts\n'''\n    }\n  }\n  stages {\n    stage('Build') {\n      steps {\n        container('maven') {\n            sh 'mvn clean verify'\n        }\n      }\n    }\n    stage('Deploy') {\n      steps {\n        container('jnlp') {\n          sshagent ( ['projects-storage.eclipse.org-bot-ssh']) {\n            sh '''\n              ssh -o BatchMode=yes genie.projectname@projects-storage.eclipse.org rm -rf /home/data/httpd/download.eclipse.org/projectname/snapshots\n              ssh -o BatchMode=yes genie.projectname@projects-storage.eclipse.org mkdir -p /home/data/httpd/download.eclipse.org/projectname/snapshots\n              scp -o BatchMode=yes -r repository/target/repository/* genie.projectname@projects-storage.eclipse.org:/home/data/httpd/download.eclipse.org/projectname/snapshots\n            '''\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"jiro/FAQ/#how-do-i-use-the-local-nexus-server-as-proxy-for-maven-central-artifact-caching","title":"How do I use the local Nexus server as proxy for Maven Central (artifact caching)?","text":"<p>Every JIPP has a Maven settings file set up that specifies our local Nexus instance as cache for Maven Central.</p> <p>[!IMPORTANT] In Jiro this works out of the box for the default pod templates. No additional configuration is required for Freestyle and Pipeline jobs. For custom containers, see the following section.</p>"},{"location":"jiro/FAQ/#custom-container-on-jiro","title":"Custom container on Jiro","text":"<p>You need to add the <code>settings-xml</code> volume, as shown below. Please note, the <code>m2-repo</code> volume is required as well, otherwise <code>/home/jenkins/.m2/repository</code> is not writable.</p> <p>[!NOTE] In custom containers the <code>user.home</code> environment variable needs to be set to <code>/home/jenkins</code> via MAVEN_OPTS, otherwise <code>settings.xml</code> and <code>settings-security.xml</code> can not be found.</p> <pre><code>pipeline {\n  agent {\n    kubernetes {\n      label 'my-agent-pod'\n      yaml \"\"\"\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: maven\n    image: maven:alpine\n    tty: true\n    command:\n    - cat\n    env:\n    - name: \"MAVEN_OPTS\"\n      value: \"-Duser.home=/home/jenkins\"\n    volumeMounts:\n    - name: settings-xml\n      mountPath: /home/jenkins/.m2/settings.xml\n      subPath: settings.xml\n      readOnly: true\n    - name: m2-repo\n      mountPath: /home/jenkins/.m2/repository\n  volumes:\n  - name: settings-xml\n    secret:\n      secretName: m2-secret-dir\n      items:\n      - key: settings.xml\n        path: settings.xml\n  - name: m2-repo\n    emptyDir: {}\n\"\"\"\n    }\n  }\n  stages {\n    stage('Run maven') {\n      steps {\n        container('maven') {\n          sh 'mvn -version'\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"jiro/FAQ/#how-can-artifacts-be-deployed-to-nexus-oss-repoeclipseorg","title":"How can artifacts be deployed to Nexus OSS (repo.eclipse.org)?","text":"<p>If your project does not have its own repo on Nexus yet, then open a HelpDesk issue and specify what project you'd like a Nexus repo for.</p> <p>If your project does have its own repo on Nexus already, then you can use Maven (or Gradle) to deploy artifacts to repo.eclipse.org.</p> <p>[!NOTE] On our cluster-based infra (Jiro), a separate Maven settings file for deployment to Nexus is not required. All information is contained in the default Maven settings file located at <code>/home/jenkins/.m2/settings.xml</code>, which does not need to be specified explicitly in your job configuration.</p>"},{"location":"jiro/FAQ/#custom-container-on-jiro_1","title":"Custom container on Jiro","text":"<p>You need to add the <code>settings-xml</code> volume, as shown below. Please note, the <code>m2-repo</code> volume is required as well, otherwise <code>/home/jenkins/.m2/repository is not writable</code>.</p> <p>[!NOTE] In custom containers the <code>user.home</code> environment variable needs to be set to <code>/home/jenkins</code> via MAVEN_OPTS, otherwise <code>settings.xml</code> and <code>settings-security.xml</code> can not be found.</p> <pre><code>pipeline {\n  agent {\n    kubernetes {\n      label 'my-agent-pod'\n      yaml \"\"\"\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: maven\n    image: maven:alpine\n    tty: true\n    command:\n    - cat\n    env:\n    - name: \"MAVEN_OPTS\"\n      value: \"-Duser.home=/home/jenkins\"\n    volumeMounts:\n    - name: settings-xml\n      mountPath: /home/jenkins/.m2/settings.xml\n      subPath: settings.xml\n      readOnly: true\n    - name: settings-security-xml\n      mountPath: /home/jenkins/.m2/settings-security.xml\n      subPath: settings-security.xml\n      readOnly: true\n    - name: m2-repo\n      mountPath: /home/jenkins/.m2/repository\n  volumes:\n  - name: settings-xml\n    secret:\n      secretName: m2-secret-dir\n      items:\n      - key: settings.xml\n        path: settings.xml\n  - name: settings-security-xml\n    secret:\n      secretName: m2-secret-dir\n      items:\n      - key: settings-security.xml\n        path: settings-security.xml\n  - name: m2-repo\n    emptyDir: {}\n\"\"\"\n    }\n  }\n  stages {\n    stage('Run maven') {\n      steps {\n        container('maven') {\n          sh 'mvn clean deploy'\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"jiro/FAQ/#how-can-artifacts-be-deployed-to-ossrh-maven-central","title":"How can artifacts be deployed to OSSRH / Maven Central?","text":"<p>Deploying artifacts to OSSRH (OSS Repository Hosting provided by Sonatype) requires an account at OSSRH. It is also required to sign all artifacts with GPG. The Eclipse IT team will set this up for the project. Please open a HelpDesk issue for this first.</p> <p>[!NOTE] On our cluster-based infra (Jiro), a separate Maven settings file for deployment to OSSRH is not necessary. All information is contained in the default Maven settings file located at <code>/home/jenkins/.m2/settings.xml</code>, which does not need to be specified explicitly in your job configuration. If you are using a custom container, please see https://wiki.eclipse.org/Jenkins#Custom_container_on_Jiro_3**</p>"},{"location":"jiro/FAQ/#required-steps-for-a-freestyle-job","title":"Required steps for a freestyle job","text":"Steps Screenshots 1. Insert <code>secret-subkeys.asc</code> as secret file in job  2. Import GPG keyring with <code>--batch</code> and trust the keys non-interactively in a shell build step (before the Maven call) <pre><code>gpg --batch --import \"${KEYRING}\"\nfor fpr in $(gpg --list-keys --with-colons  | awk -F: '/fpr:/ {print $10}' | sort -u);\ndo\n  echo -e \"5\\ny\\n\" |  gpg --batch --command-fd 0 --expert --edit-key $fpr trust;\ndone\n</code></pre> 3. If a newer GPG version (&gt; 2.1+) is used, <code>--pinentry-mode loopback</code> needs to be added as GPG argument in the pom.xml. <pre><code>&lt;plugin&gt;\n   &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n   &lt;artifactId&gt;maven-gpg-plugin&lt;/artifactId&gt;\n   &lt;version&gt;1.6&lt;/version&gt;\n   &lt;executions&gt;\n     &lt;execution&gt;\n       &lt;id&gt;sign-artifacts&lt;/id&gt;\n         &lt;phase&gt;verify&lt;/phase&gt;\n         &lt;goals&gt;\n           &lt;goal&gt;sign&lt;/goal&gt;\n         &lt;/goals&gt;\n         &lt;configuration&gt;\n           &lt;gpgArguments&gt;\n             &lt;arg&gt;--pinentry-mode&lt;/arg&gt;\n             &lt;arg&gt;loopback&lt;/arg&gt;\n           &lt;/gpgArguments&gt;\n         &lt;/configuration&gt;\n     &lt;/execution&gt;\n   &lt;/executions&gt;\n &lt;/plugin&gt;\n</code></pre>"},{"location":"jiro/FAQ/#required-steps-for-a-pipeline-job","title":"Required steps for a pipeline job","text":"<p>This is a simple pipeline job, that allows to test the GPG signing.</p> <pre><code>pipeline {\n    agent any\n    tools {\n        maven 'apache-maven-latest'\n        jdk 'adoptopenjdk-hotspot-jdk8-latest'\n    }\n    stages {\n        stage('Build') {\n            steps {\n                sh \"mvn -B -U archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\"\n                sh '''cat &gt;my-app/pom.xml &lt;&lt;EOL\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n  &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;\n  &lt;artifactId&gt;my-app&lt;/artifactId&gt;\n  &lt;packaging&gt;jar&lt;/packaging&gt;\n  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n  &lt;name&gt;my-app&lt;/name&gt;\n  &lt;url&gt;http://maven.apache.org&lt;/url&gt;\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;junit&lt;/groupId&gt;\n      &lt;artifactId&gt;junit&lt;/artifactId&gt;\n      &lt;version&gt;3.8.1&lt;/version&gt;\n      &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n  &lt;/dependencies&gt;\n  &lt;build&gt;\n    &lt;plugins&gt;\n      &lt;plugin&gt;\n        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n        &lt;artifactId&gt;maven-gpg-plugin&lt;/artifactId&gt;\n        &lt;version&gt;1.6&lt;/version&gt;\n        &lt;executions&gt;\n          &lt;execution&gt;\n            &lt;id&gt;sign-artifacts&lt;/id&gt;\n            &lt;phase&gt;verify&lt;/phase&gt;\n            &lt;goals&gt;\n              &lt;goal&gt;sign&lt;/goal&gt;\n            &lt;/goals&gt;\n            &lt;configuration&gt;\n              &lt;gpgArguments&gt;\n                &lt;arg&gt;--pinentry-mode&lt;/arg&gt;\n                &lt;arg&gt;loopback&lt;/arg&gt;\n              &lt;/gpgArguments&gt;\n            &lt;/configuration&gt;\n          &lt;/execution&gt;\n        &lt;/executions&gt;\n      &lt;/plugin&gt;\n    &lt;/plugins&gt;\n  &lt;/build&gt;\n&lt;/project&gt;\nEOL'''\n                withCredentials([file(credentialsId: 'secret-subkeys.asc', variable: 'KEYRING')]) {\n                    sh 'gpg --batch --import \"${KEYRING}\"'\n                    sh 'for fpr in $(gpg --list-keys --with-colons  | awk -F: \\'/fpr:/ {print $10}\\' | sort -u); do echo -e \"5\\ny\\n\" |  gpg --batch --command-fd 0 --expert --edit-key ${fpr} trust; done'\n                }\n                sh \"mvn -B -f my-app/pom.xml clean verify\"\n                sh 'gpg --verify my-app/target/my-app-1.0-SNAPSHOT.jar.asc'\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"jiro/FAQ/#custom-container-on-jiro_2","title":"Custom container on Jiro","text":"<p>When you are using a custom container on Jiro, you will need to add the <code>settings-xml</code> and <code>settings-security-xml</code> volumes, as shown below.</p> <p>Please note: * the m2-repo volume is required as well, otherwise<code>/home/jenkins/.m2/repository</code> is not writable * the <code>toolchains-xml</code> volume is optional, but added for completeness * you also might need to add additional volumes like <code>volume-known</code>-hosts (as described here: https://wiki.eclipse.org/Jenkins#How_do_I_deploy_artifacts_to_download.eclipse.org.3F)</p> <pre><code>pipeline {\n  agent {\n    kubernetes {\n      label 'my-agent-pod'\n      yaml \"\"\"\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: maven\n    image: maven:alpine\n    tty: true\n    command:\n    - cat\n    volumeMounts:\n    - name: settings-xml\n      mountPath: /home/jenkins/.m2/settings.xml\n      subPath: settings.xml\n      readOnly: true\n    - name: toolchains-xml\n      mountPath: /home/jenkins/.m2/toolchains.xml\n      subPath: toolchains.xml\n      readOnly: true\n    - name: settings-security-xml\n      mountPath: /home/jenkins/.m2/settings-security.xml\n      subPath: settings-security.xml\n      readOnly: true\n    - name: m2-repo\n      mountPath: /home/jenkins/.m2/repository\n  volumes:\n  - name: settings-xml\n    secret:\n      secretName: m2-secret-dir\n      items:\n      - key: settings.xml\n        path: settings.xml\n  - name: toolchains-xml\n    configMap:\n      name: m2-dir\n      items:\n      - key: toolchains.xml\n        path: toolchains.xml\n  - name: settings-security-xml\n    secret:\n      secretName: m2-secret-dir\n      items:\n      - key: settings-security.xml\n        path: settings-security.xml\n  - name: m2-repo\n    emptyDir: {}\n\"\"\"\n    }\n  }\n  stages {\n    stage('Run maven') {\n      steps {\n        container('maven') {\n          sh 'mvn -version'\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"jiro/FAQ/#common-issues-with-gpg","title":"Common issues with GPG","text":"Error message Solution <code>gpg: signing failed: Not a tty</code> GPG version &gt; 2.1 is used and <code>--pinentry-mode loopback</code> needs to be added to the maven-gpg-plugin config in the pom.xml (see above). <code>gpg: invalid option \"--pinentry-mode\"</code> GPG version &lt; 2.1 is used and <code>--pinentry-mode loopback</code> needs to be removed from the maven-gpg-plugin config in the pom.xml <code>gpg: no default secret key: No secret key</code> or  <code>gpg: signing failed: No secret key</code> GPG keyring needs to be imported (see above)"},{"location":"jiro/FAQ/#how-can-sonarcloud-be-integrated-into-a-jiro-jipp","title":"How can SonarCloud be integrated into a Jiro JIPP?","text":"<p>Integrating SonarCloud into a project's CI builds is quite easy. Please open a HelpDesk issue for this and the releng/webmaster team will help you set this up.</p> <p>We're setting this up with the webmaster's SonarCloud.io account, so there is no need to provide a SonarCloud token. To avoid leaking the token in the console log, we store it as secret text (Jenkins credentials).</p> <p>We will configure the SonarQube Jenkins plugin to use SonarCloud to achieve a slightly better integration with Jenkins. For example, a link to SonarCloud will show up in the left menu of a job page.</p>"},{"location":"jiro/FAQ/#freestyle-job_1","title":"Freestyle job","text":"<p>For a freestyle job configuration, two things need to be done:</p> <ol> <li>Under \"Build environment\" enable \"Use secret text(s) or file(s)\", add \"Secret text\", name the variable \"SONARCLOUD_TOKEN\" and select the right credential (e.g. \"Sonarcloud token\").</li> <li>Either a shell build step or a Maven build step can be used to run the sonar goal with the right parameters:   <pre><code>mvn clean verify sonar:sonar -Dsonar.projectKey=&lt;project-name&gt; -Dsonar.organization=&lt;organization&gt; -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONARCLOUD_TOKEN}\n</code></pre></li> </ol>"},{"location":"jiro/FAQ/#pipeline-job","title":"Pipeline job","text":"<p>For a pipeline job, the following needs to be added: <pre><code>withCredentials([string(credentialsId: 'sonarcloud-token', variable: 'SONARCLOUD_TOKEN')]) {\n    withSonarQubeEnv('SonarCloud.io') {\n        mvn clean verify sonar:sonar -Dsonar.projectKey=&lt;project-name&gt; -Dsonar.organization=&lt;organization&gt; -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONARCLOUD_TOKEN}\n    }\n}\n</code></pre></p> <p>Please note: \\&lt;project-name&gt; and \\&lt;organization&gt; should be replaced with the corresponding project name and organization.</p>"},{"location":"jiro/FAQ/#can-projects-get-admin-access-on-their-jiro-jipp","title":"Can projects get admin access on their Jiro JIPP?","text":"<p>In general, we want to avoid handing out admin rights. In the spirit of \"configuration as code\", project members can submit pull requests to our Jiro GitHub repo and change the configuration of their CI instance. E.g. adding plugins, etc. This allows better tracking of configuration changes and rollback in case of issues.</p> <p>We understand that some projects heavily rely on their admin permissions. We will make sure to find an amicable solution in those cases.</p>"},{"location":"jiro/FAQ/#how-can-a-new-plugin-be-added-to-a-jiro-jipp","title":"How can a new plugin be added to a Jiro JIPP?","text":"<p>The preferred way is to open a pull request in the Jiro GitHub repo. For example, to add a new plugin to the CBI instance, one would need to edit https://github.com/eclipse-cbi/jiro/blob/master/instances/technology.cbi/config.jsonnet and add the ID of the plugin to the <code>plugins+</code> section. If the jenkins+/plugins+ section does not exist yet, it needs to be added as well.</p> <p>Example: <pre><code>{\n  project+: {\n    fullName: \"technology.cbi\",\n    displayName: \"Eclipse CBI\",\n  },\n  jenkins+: {\n    plugins+: [\n      \"jacoco\",\n    ],\n  }\n}\n</code></pre></p> <p>Before adding a plugin, please verify that it's not already listed in https://github.com/eclipse-cbi/jiro/wiki/Default-Jenkins-plugins.</p> <p>The ID of a Jenkins plugin can be found here: https://plugins.jenkins.io/</p> <p>If this sounds too complicated, you can also open a HelpDesk issue.</p>"},{"location":"jiro/FAQ/#how-to-build-my-projects-website-with-jenkins","title":"How to build my project's website with Jenkins?","text":"<p>The preferred static website generator for building Eclipse project websites is Hugo. You should first put your Hugo sources in a dedicated Git repository, either at GitHub or https://gitlab.eclipse.org. If you don't have such a repository already, feel free to open a HelpDesk issue and the Eclipse IT team will create one for you. </p> <p>Once your Hugo sources are in the proper repository, create a file named <code>Jenkinsfile</code> at the root of the repository with the following content (don't forget to specify the proper value for <code>PROJECT_NAME</code> and <code>PROJECT_BOT_NAME</code> environment variable):</p> <pre><code>pipeline {\n\n  agent {\n    kubernetes {\n      label 'hugo-agent'\n      yaml \"\"\"\napiVersion: v1\nmetadata:\n  labels:\n    run: hugo\n  name: hugo-pod\nspec:\n  containers:\n    - name: jnlp\n      volumeMounts:\n      - mountPath: /home/jenkins/.ssh\n        name: volume-known-hosts\n      env:\n      - name: \"HOME\"\n        value: \"/home/jenkins\"\n    - name: hugo\n      image: eclipsecbi/hugo:0.110.0\n      command:\n      - cat\n      tty: true\n  volumes:\n  - configMap:\n      name: known-hosts\n    name: volume-known-hosts\n\"\"\"\n    }\n  }\n\n  environment {\n    PROJECT_NAME = \"&lt;project_name&gt;\" // must be all lowercase.\n    PROJECT_BOT_NAME = \"&lt;Project_name&gt; Bot\" // Capitalize the name\n  }\n\n  triggers { pollSCM('H/10 * * * *') \n\n }\n\n  options {\n    buildDiscarder(logRotator(numToKeepStr: '5'))\n    checkoutToSubdirectory('hugo')\n  }\n\n  stages {\n    stage('Checkout www repo') {\n      steps {\n        dir('www') {\n            sshagent(['git.eclipse.org-bot-ssh']) {\n                sh '''\n                    git clone ssh://genie.${PROJECT_NAME}@git.eclipse.org:29418/www.eclipse.org/${PROJECT_NAME}.git .\n                    git checkout ${BRANCH_NAME}\n                '''\n            }\n        }\n      }\n    }\n    stage('Build website (master) with Hugo') {\n      when {\n        branch 'master'\n      }\n      steps {\n        container('hugo') {\n            dir('hugo') {\n                sh 'hugo -b https://www.eclipse.org/${PROJECT_NAME}/'\n            }\n        }\n      }\n    }\n    stage('Build website (staging) with Hugo') {\n      when {\n        branch 'staging'\n      }\n      steps {\n        container('hugo') {\n            dir('hugo') {\n                sh 'hugo -b https://staging.eclipse.org/${PROJECT_NAME}/'\n            }\n        }\n      }\n    }\n    stage('Push to $env.BRANCH_NAME branch') {\n      when {\n        anyOf {\n          branch \"master\"\n          branch \"staging\"\n        }\n      }\n      steps {\n        sh 'rm -rf www/* &amp;&amp; cp -Rvf hugo/public/* www/'\n        dir('www') {\n            sshagent(['git.eclipse.org-bot-ssh']) {\n                sh '''\n                git add -A\n                if ! git diff --cached --exit-code; then\n                  echo \"Changes have been detected, publishing to repo 'www.eclipse.org/${PROJECT_NAME}'\"\n                  git config user.email \"${PROJECT_NAME}-bot@eclipse.org\"\n                  git config user.name \"${PROJECT_BOT_NAME}\"\n                  git commit -m \"Website build ${JOB_NAME}-${BUILD_NUMBER}\"\n                  git log --graph --abbrev-commit --date=relative -n 5\n                  git push origin HEAD:${BRANCH_NAME}\n                else\n                  echo \"No changes have been detected since last build, nothing to publish\"\n                fi\n                '''\n            }\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>Finally, you can create a multibranch pipeline job on your project's Jenkins instance. It will automatically be triggered on every new push to your Hugo source repository, build the website and push it to the target website repository. As mentioned above, the Eclipse Foundation website's infrastructure will eventually pull the content of the latter and your website will be published and available on https://www.eclipse.dev/\\&lt;project_name&gt;.</p> <p>If you don't have a Jenkins instance already, [[CBI#Requesting_a_JIPP_instance|ask for one]]. If you need assistance with the process, please open a HelpDesk issue.</p>"},{"location":"jiro/FAQ/#how-to-accept-fork-contributions","title":"How to accept fork contributions?","text":"<p>By default, Jenkins project configurations using the GitLab Branch Source plugin are set up with 'Trusted Members' as the default option.</p> <p>Definition of 'trusted members': [Recommended] Discover merge requests from forked projects whose authors have Developer/Maintainer/Owner access levels in the origin project.</p> <p>To accept contributions from contributors with fork project, the project should: * Configure the CI project by changing 'Discover merge requests from forks' to 'Members'. * The project lead should add the user to the list of collaborators in PMI. * The contributor should change the forked project's visibility to public.</p>"},{"location":"jiro/GitHub-integration/","title":"GitHub integration","text":"<p>Home / jiro / GitHub-integration</p> <p>Here are some details about what happens during the setup process:</p> <ul> <li>A GitHub bot user will be created and added to the respective team on GitHub.</li> <li>The credentials of the GitHub bot user will be added to the JIPP.</li> <li>A webhook that can trigger builds on pushes or pull requests will be set up.</li> </ul> <p>Once the ticket is resolved, you should be able to configure and use the GitHub integration in your jobs.</p>"},{"location":"jiro/GitHub-integration/#github-branch-source-plugin-recommended","title":"GitHub Branch Source Plugin (Recommended)","text":"<p>The GitHub Branch Source Plugin is the recommended plugin to integrate GitHub with Jenkins. It can only be used with Jenkins pipelines in Jenkinsfiles.</p> <p>This plugin is installed by default on all Jenkins instances at the Eclipse Foundation.</p> <p>Instruction how to set up GitHub multi-branch jobs can be found here: https://docs.cloudbees.com/docs/cloudbees-ci/latest/cloud-admin-guide/github-branch-source-plugin</p>"},{"location":"jiro/GitHub-integration/#github-pull-request-builder-plugin-deprecated","title":"GitHub Pull Request Builder Plugin (Deprecated)","text":"<p>The GitHub Pull Request Builder Plugin (GHPRB) allows to build/test pull requests and provide immediate feedback in the pull request on GitHub with freestyle jobs. It's recommended to switch to the GitHub Branch Source Plugin instead.</p> <p>This plugin is installed by default on all Jenkins instances at the Eclipse Foundation.</p> <p>Instructions how to set up GHPRB plugin in jobs can be found here: https://github.com/jenkinsci/ghprb-plugin/blob/master/README.md</p>"},{"location":"jiro/GitLab-integration/","title":"GitLab integration","text":"<p>Home / jiro / GitLab-integration</p> <p>Please let us know if you want to use GitLab with Jenkins and open a HelpDesk issue. We will help you set up the integration on your Jenkins instance.</p> <p>Here is what we will do: * create a GitLab bot user * create a GitLab API token * set up a webhook that can trigger builds on pushes or merge requests</p>"},{"location":"jiro/Home/","title":"Home","text":"<p>Home / jiro / Home</p> <p>Jenkins is a continuous integration (CI) server. It is in use on Eclipse servers for Eclipse projects as part of the Common Build Infrastructure (CBI). This page is about the hosted service at Eclipse.org. For more information on the project itself, or to download Jenkins, please visit the Jenkins project website</p>"},{"location":"jiro/Home/#general-information","title":"General Information","text":"<p>Jenkins instances are maintained by the Eclipse Webmasters/Release Engineers.</p> <ul> <li>List of Jenkins Instances Per Project (JIPP): https://ci.eclipse.org/</li> </ul>"},{"location":"jiro/Home/#asking-for-help","title":"Asking for Help","text":"<ul> <li>If you need help actually building your code: ask your project mentors, or ask on the Common Build mailing list (cbi-dev). There are no dumb questions.</li> <li>Subscribe to the cbi-dev mailing list here: https://dev.eclipse.org/mailman/listinfo/cbi-dev</li> <li>If you require support with your Jenkins instance, please open a HelpDesk issue.</li> </ul>"},{"location":"jiro/Home/#requesting-a-jipp-instance","title":"Requesting a JIPP instance","text":"<p>Please file a new HelpDesk issue to request your project's own instance. Please ensure your project lead(s) can approve the request.</p>"},{"location":"jiro/Resource-packs-and-quotas/","title":"Resource packs and quotas","text":"<p>Home / jiro / Resource-packs-and-quotas</p>"},{"location":"jiro/Resource-packs-and-quotas/#whats-a-resource-pack","title":"What's a resource pack?","text":"<p>A resource pack is the indivisible base unit of compute cycles and memory (vCPU/RAM) that we allocate to projects for build jobs.  All of them combined makes a pool of resources (its quota) available to a project to run builds at any given time. More information about how many resource packs a project can get, can be found on the CBI wiki page.</p>"},{"location":"jiro/Resource-packs-and-quotas/#what-about-running-build-jobs-concurrently","title":"What about running build jobs concurrently? #","text":"<p>First, a bit of Jenkins terminology (see Jenkins Glossary for more details):</p> <ul> <li>The master is the central, coordinating process which stores configuration, loads plugins, and renders the various user interfaces for Jenkins.</li> <li>An agent (formerly called slave) is typically a (virtual) machine, or container, which connects to a Jenkins master and executes tasks when directed by the master. There are 2 kinds of agents: dynamic and static. Dynamic agents are created on-demand when a build job require one. All agents on the clustered infrastructure are dynamic. Both dynamic and static agents can exist on the same master. </li> <li>An executor is a slot for executing a build job defined by a pipeline or a job on an agent. An agent may have zero or more executors configured, which corresponds to how many concurrent projects or pipelines are able to execute on that agent. All dynamic agents in the cluster have a single executor. Note that Jenkins masters can also have executors, but this is considered a bad practice for a long time, and masters have no executors in the clustered infrastructure.</li> </ul> <p>By default, all Eclipse projects run with a master able to dynamically create 2 agents in the cluster at the same time. Each of them of a single executor, meaning that projects can run 2 jobs at the same time. The resources required by both agents must be less or equal to the resource quota assigned to the project.</p>"},{"location":"jiro/Resource-packs-and-quotas/#what-is-the-relationship-between-resource-quota-and-concurrency-level","title":"What is the relationship between resource quota and concurrency level?","text":"<p>We set the concurrency level on the cluster (i.e. the number of dynamic agents that can exist simultaneously in the cluster) to a number that depends on the resource quota your project get. We set it to a value equals to the number of vCPU you get. Furthermore, we don't think it's desirable to run a build job with less than 1 vCPU.</p>"},{"location":"jiro/Resource-packs-and-quotas/#how-do-i-decide-how-many-resources-a-build-job-will-get-to-run","title":"How do I decide how many resources a build job will get to run?","text":"<p>For freestyle jobs, you can't configure it. You must stick to what we've configured: freestyle jobs get 1vCPU (burst to 2vCPU) and 4GB of RAM. It is aligned with the default concurrency level we set for all (non-sponsored) projects and the resources they get.</p> <p>If projects want to customize the resources for a build job, projects need to use a Jenkins pipeline. See the What is killing my build? I'm using custom containers? section to learn how to do that.</p>"},{"location":"jiro/Resource-packs-and-quotas/#what-does-cpu-burst-means","title":"What does CPU burst means?","text":"<p>When a build is scheduled, a new Jenkins agent is dynamically created in the cluster. The agent is scheduled on a physical node by Kubernetes (See Kubernetes compute resource management documentation for details). In general, Kubernetes tries to allocate agents on the least busy node. Once an agent is created on a node, it won't move until the end of the build. During the build, if there are some spare CPU cycles (i.e. cycles that have not been reserved by others) on the node, the agent will get more CPU up to the burst limit. So, while projects don't compete with each other for the requested vCPU, they compete for the CPU burst. Note that the burst should be shared fairly between projects. Globally, it means that the availability of the upper limit of the burst mode depends on the global load of the cluster.</p>"},{"location":"jiro/Resource-packs-and-quotas/#whats-the-priority-the-resource-quota-or-the-concurrency-limit","title":"What's the priority: the resource quota or the concurrency limit?","text":"<p>The resource quota is the limiting factor. Concurrency limit is an upper bound. Let's take a project that has 2 resource packs (1 \"free\" + 1 \"sponsored\") as an example. It currently means that it has 4vCPU and 16GB or RAM to run its builds and has a concurrency limit of 4. It can configure its build jobs in several ways:</p> <ul> <li>configure them all to use 2vCPU and 8GB of RAM. It means that only 2 of them can run at the same time. </li> <li>configure them all to use 1vCPU and 4GB of RAM. Then 4 jobs can run concurrently. </li> <li>configure them all but one to use 1vCPU/4GB RAM, the last one being a resource hog configured with 3vCPU and 12GB RAM. When small jobs are running, 4 of them run can concurrently, but when the resource hog runs, there is only enough resources left for 1 smaller build job.</li> <li>configure them all to use 0.5vCPU and 2GB of RAM. Still, only 4 jobs can run simultaneously because the concurrency limit is 4.</li> </ul> <p>Note that burst resources (a.k.a. CPU limit in Kubernetes words) has to be treated the same way. It needs to be shared between jobs.</p>"},{"location":"jiro/Resource-packs-and-quotas/#can-i-connect-a-static-agent-to-the-jenkins-instance-of-my-project-does-it-count-for-the-concurrency-limit","title":"Can I connect a static agent to the Jenkins instance of my project? Does it count for the concurrency limit?","text":"<p>Yes, projects can add as many external static agents as they want. Agents of this kind need to have a SSH port open to the internet and be signed off by the security team. Also, it does not count for the concurrency limit (as this is specific to the dynamically provisioned agents in the cluster).</p>"},{"location":"jiro/Resource-packs-and-quotas/#do-you-do-overbooking","title":"Do you do overbooking?","text":"<p>Of course, we do. CI jobs are something that fit very well with overbooking: not everybody need all their resources 100% of the time. It means that when the cluster runs at capacity, no new jobs can be scheduled and jobs are being queued until its requested resources are freed by other(s) job(s). Note that our goal is to size the cluster so that it can handle peak times though. So the wait time in the queue should be minimal.</p>"},{"location":"jiro/Resource-packs-and-quotas/#is-there-a-limit-for-how-large-an-agent-can-be","title":"Is there a limit for how large an agent can be?","text":"<p>Yes. You cannot allocate more than 8vCPU and 16GiB of RAM to a single agent/container. If you do so, the agent will never start. If you need larger agents, please open a HelpDesk issue and we can discuss the alternatives.</p>"},{"location":"jiro/Tools/","title":"Tools-(JDK,-Maven,-Ant)","text":"<p>Home / jiro / Tools</p>"},{"location":"jiro/Tools/#apache-maven","title":"Apache Maven","text":"<ul> <li>apache-maven-latest <code>/opt/tools/apache-maven/latest</code> = 3.9.9</li> <li>apache-maven-3.9.6 <code>/opt/tools/apache-maven/3.9.9</code></li> <li>apache-maven-3.9.6 <code>/opt/tools/apache-maven/3.9.6</code></li> <li>apache-maven-3.9.5 <code>/opt/tools/apache-maven/3.9.5</code></li> <li>apache-maven-3.9.3 <code>/opt/tools/apache-maven/3.9.3</code></li> <li>apache-maven-3.9.2 <code>/opt/tools/apache-maven/3.9.2</code></li> <li>apache-maven-3.9.1 <code>/opt/tools/apache-maven/3.9.1</code></li> <li>apache-maven-3.9.0 <code>/opt/tools/apache-maven/3.9.0</code></li> <li>apache-maven-3.8.6 <code>/opt/tools/apache-maven/3.8.6</code></li> <li>apache-maven-3.8.5 <code>/opt/tools/apache-maven/3.8.5</code></li> <li>apache-maven-3.8.4 <code>/opt/tools/apache-maven/3.8.4</code></li> <li>apache-maven-3.8.3 <code>/opt/tools/apache-maven/3.8.3</code></li> <li>apache-maven-3.8.3 <code>/opt/tools/apache-maven/3.8.3</code></li> <li>apache-maven-3.8.2 <code>/opt/tools/apache-maven/3.8.2</code></li> <li>apache-maven-3.8.1 <code>/opt/tools/apache-maven/3.8.1</code></li> <li>apache-maven-3.6.3 <code>/opt/tools/apache-maven/3.6.3</code></li> <li>apache-maven-3.6.0 <code>/opt/tools/apache-maven/3.6.0</code></li> <li>apache-maven-3.5.4 <code>/opt/tools/apache-maven/3.5.4</code></li> <li>apache-maven-3.3.9 <code>/opt/tools/apache-maven/3.3.9</code></li> <li>apache-maven-3.2.5 <code>/opt/tools/apache-maven/3.2.5</code></li> </ul>"},{"location":"jiro/Tools/#jdk","title":"JDK","text":""},{"location":"jiro/Tools/#openjdk","title":"OpenJDK","text":"<p>The binaries listed below come from https://jdk.java.net and are built by Oracle. These are production-ready open-source builds of the Java Development Kit, an implementation of the Java SE Platform under the GNU General Public License, version 2, with the Classpath Exception. See the differences between these binaries and Oracle's one for version 11 onward on Oracle's director of product management blog post.</p> <p>Note that Oracle does not provide security updates for long-term support (LTS) releases for these open source binaries. It means that it is not safe to run any production code on any other version but the latest update of the latest JDK version. Archive builds are available at https://jdk.java.net/archive/.</p> <p>openjdk-latest always points to the latest GA release.</p> <ul> <li>openjdk-latest <code>/opt/tools/java/openjdk/latest</code> = 23.0.1</li> <li>openjdk-ea-latest (Early Access) <code>/opt/tools/java/openjdk/jdk-24/latest</code> = 24-ea+22</li> <li>openjdk-jdk24-latest (Early Access) <code>/opt/tools/java/openjdk/jdk-24/latest</code>&gt; = 24-ea+22</li> <li>openjdk-jdk23-latest <code>/opt/tools/java/openjdk/jdk-23/latest</code> = 23.0.1</li> <li>openjdk-jdk22-latest <code>/opt/tools/java/openjdk/jdk-22/latest</code> = 22.0.2+9</li> <li>openjdk-jdk21-latest <code>/opt/tools/java/openjdk/jdk-21/latest</code> = 21.0.2+13</li> <li>openjdk-jdk20-latest <code>/opt/tools/java/openjdk/jdk-20/latest</code> = 20.0.2+9</li> <li>openjdk-jdk19-latest <code>/opt/tools/java/openjdk/jdk-19/latest</code> = 19.0.1+10</li> <li>openjdk-jdk18-latest <code>/opt/tools/java/openjdk/jdk-18/latest</code> = 18.0.2+9</li> <li>openjdk-jdk17-latest <code>/opt/tools/java/openjdk/jdk-17/latest</code> = 17.0.2+8</li> <li>openjdk-jdk16-latest <code>/opt/tools/java/openjdk/jdk-16/latest</code> = 16.0.2</li> <li>openjdk-jdk15-latest <code>/opt/tools/java/openjdk/jdk-15/latest</code> = 15.0.2+7</li> <li>openjdk-jdk14-latest <code>/opt/tools/java/openjdk/jdk-14/latest</code> = 14.0.2+12</li> <li>openjdk-jdk13-latest <code>/opt/tools/java/openjdk/jdk-13/latest</code> = 13.0.2+8</li> <li>openjdk-jdk12-latest <code>/opt/tools/java/openjdk/jdk-12/latest</code> = 12.0.2+10</li> <li>openjdk-jdk11-latest <code>/opt/tools/java/openjdk/jdk-11/latest</code> = 11.0.2+9</li> <li>openjdk-jdk10-latest <code>/opt/tools/java/openjdk/jdk-10/latest</code> = 10.0.2+13</li> <li>openjdk-jdk9-latest <code>/opt/tools/java/openjdk/jdk-9/latest</code> = 9.0.4+11</li> </ul>"},{"location":"jiro/Tools/#adoptopenjdk","title":"AdoptOpenJDK","text":"<p>The binaries listed below come from https://adoptopenjdk.net. These OpenJDK binaries are built from a fully open source set of build scripts and infrastructure.</p> <p>Please note, AdoptOpenJDK has been replaced by Eclipse Temurin (see below). For JDKs with OpenJ9 JVM, please consider IBM Semeru JDKs.</p>"},{"location":"jiro/Tools/#with-hotspot","title":"With HotSpot","text":"<ul> <li>adoptopenjdk-hotspot-latest <code>/opt/tools/java/adoptopenjdk/hotspot-latest</code> = 16.0.2+7</li> <li>adoptopenjdk-hotspot-latest-lts <code>/opt/tools/java/adoptopenjdk/hotspot-lts-latest</code> = 11.0.11+9</li> <li>adoptopenjdk-hotspot-jdk16-latest <code>/opt/tools/java/adoptopenjdk/hotspot-jdk-16/latest</code> = 16.0.2+7</li> <li>adoptopenjdk-hotspot-jdk15-latest <code>/opt/tools/java/adoptopenjdk/hotspot-jdk-15/latest</code> = 15.0.2+7</li> <li>adoptopenjdk-hotspot-jdk14-latest <code>/opt/tools/java/adoptopenjdk/hotspot-jdk-14/latest</code> = 14.0.2+12</li> <li>adoptopenjdk-hotspot-jdk13-latest <code>/opt/tools/java/adoptopenjdk/hotspot-jdk-13/latest</code> = 13.0.2+8</li> <li>adoptopenjdk-hotspot-jdk12-latest <code>/opt/tools/java/adoptopenjdk/hotspot-jdk-12/latest</code> = 12.0.2+10</li> <li>adoptopenjdk-hotspot-jdk11-latest <code>/opt/tools/java/adoptopenjdk/hotspot-jdk-11/latest</code> = 11.0.11+9</li> <li>adoptopenjdk-hotspot-jdk10-latest <code>/opt/tools/java/adoptopenjdk/hotspot-jdk-10/latest</code> = 10.0.2+13.1</li> <li>adoptopenjdk-hotspot-jdk9-latest <code>/opt/tools/java/adoptopenjdk/hotspot-jdk-9/latest</code> = 9.0.4+11</li> <li>adoptopenjdk-hotspot-jdk8-latest <code>/opt/tools/java/adoptopenjdk/hotspot-jdk-8/latest</code> = 1.8.0_292-b10</li> </ul>"},{"location":"jiro/Tools/#with-openj9","title":"With OpenJ9","text":"<p>The binaries listed below replace the traditional HotSpot implementation of the Java Virtual Machine implementation with Eclipse OpenJ9. Eclipse OpenJ9 is a high performance, scalable, Java virtual machine implementation that is fully compliant with the Java Virtual Machine Specification.</p> <ul> <li>adoptopenjdk-openj9-latest <code>/opt/tools/java/adoptopenjdk/openj9-latest</code> = 16.0.2+7</li> <li>adoptopenjdk-openj9-latest-lts <code>/opt/tools/java/adoptopenjdk/openj9-lts-latest</code> = 11.0.11+9</li> <li>adoptopenjdk-openj9-jdk16-latest <code>/opt/tools/java/adoptopenjdk/openj9-jdk-16/latest</code> = 16.0.2+7</li> <li>adoptopenjdk-openj9-jdk15-latest <code>/opt/tools/java/adoptopenjdk/openj9-jdk-15/latest</code> = 15.0.2+7</li> <li>adoptopenjdk-openj9-jdk14-latest <code>/opt/tools/java/adoptopenjdk/openj9-jdk-14/latest</code> = 14.0.2+12</li> <li>adoptopenjdk-openj9-jdk13-latest <code>/opt/tools/java/adoptopenjdk/openj9-jdk-13/latest</code> = 13.0.2+8</li> <li>adoptopenjdk-openj9-jdk12-latest <code>/opt/tools/java/adoptopenjdk/openj9-jdk-12/latest</code> = 12.0.2+10</li> <li>adoptopenjdk-openj9-jdk11-latest <code>/opt/tools/java/adoptopenjdk/openj9-jdk-11/latest</code> = 11.0.11+9</li> <li>adoptopenjdk-openj9-jdk10-latest <code>/opt/tools/java/adoptopenjdk/openj9-jdk-10/latest</code> = 10.0.2+13</li> <li>adoptopenjdk-openj9-jdk9-latest <code>/opt/tools/java/adoptopenjdk/openj9-jdk-9/latest</code> = 9.0.4+12</li> <li>adoptopenjdk-openj9-jdk8-latest <code>/opt/tools/java/adoptopenjdk/openj9-jdk-8/latest</code> = 1.8.0_292-b10</li> </ul>"},{"location":"jiro/Tools/#eclipse-temurin","title":"Eclipse Temurin","text":"<p>The binaries listed below come from https://adoptium.net/. These OpenJDK binaries are built from a fully open-source set of build scripts and infrastructure. All Temurin binaries use the HotSpot JVM.</p> <ul> <li>temurin-latest <code>/opt/tools/java/temurin/latest</code> = 23.0.1+11</li> <li>temurin-jdk23-latest <code>/opt/tools/java/temurin/jdk-23/latest</code> = 23.0.1+11</li> <li>temurin-jdk22-latest <code>/opt/tools/java/temurin/jdk-22/latest</code> = 22.0.2+9</li> <li>temurin-jdk21-latest <code>/opt/tools/java/temurin/jdk-21/latest</code> = 21.0.5+11</li> <li>temurin-jdk20-latest <code>/opt/tools/java/temurin/jdk-20/latest</code> = 20.0.2+9</li> <li>temurin-jdk17-latest <code>/opt/tools/java/temurin/jdk-17/latest</code> = 17.0.13+11</li> <li>temurin-jdk11-latest <code>/opt/tools/java/temurin/jdk-11/latest</code> = 11.0.25+9</li> <li>temurin-jdk8-latest <code>/opt/tools/java/temurin/jdk-8/latest</code> = 8u432-b06</li> </ul>"},{"location":"jiro/Tools/#oracle","title":"Oracle","text":"<p>The binaries listed below come from the Oracle Technology Network. Note that Oracle JDK from version 11 onward (and 8u211 onward) is licensed under the terms of the new Oracle Technology Network (OTN) License Agreement for Oracle Java SE that is substantially different from the licenses under which previous versions of the JDK were offered. Oracle JDK 10 and earlier versions (and 8u202 and earlier versions) were released under the Oracle Binary Code License (BCL) for Java SE. </p> <p>As such, starting with JDK 11, the Eclipse Foundation will not provide any version of the Oracle JDK licensed under the -commercial- OTN terms. Previous versions listed below, will stay available as is. See the 'cosmetic and packaging differences between Oracle's OpenJDK Builds (GPL+CE) \u2014 simply named OpenJDK above \u2014 and Oracle JDK (OTN) on Oracle Director of Product Management's blog post.</p> <ul> <li>oracle-latest <code>/opt/tools/java/oracle/latest</code> (= oracle-jdk10-latest)</li> <li>oracle-jdk10-latest <code>/opt/tools/java/oracle/jdk-10/latest</code> = 10.0.2</li> <li>oracle-jdk9-latest <code>/opt/tools/java/oracle/jdk-9/latest</code> = 9.0.4</li> <li>oracle-jdk8-latest <code>/opt/tools/java/oracle/jdk-8/latest</code> = 1.8.0u202</li> <li>oracle-jdk7-latest <code>/opt/tools/java/oracle/jdk-7/latest</code> = 1.7.0u80</li> <li>oracle-jdk6-latest <code>/opt/tools/java/oracle/jdk-6/latest</code> = 1.6.0u45</li> <li>oracle-jdk5-latest <code>/opt/tools/java/oracle/jdk-5/latest</code> = 1.5.0u22</li> </ul> <p>If your build requires JDK 1.4, please consider upgrading to at least JDK 5. If that's not possible, you will need to create a custom docker image.</p>"},{"location":"jiro/Tools/#ibm","title":"IBM","text":"<p>The binaries listed below come from IBM SDK, Java Technology Edition.</p> <ul> <li>ibm-latest <code>/opt/tools/java/ibm/latest</code> (= ibm-jdk8-latest)</li> <li>ibm-jdk8-latest <code>/opt/tools/java/ibm/jdk-8/latest</code> = 8.0.5.27</li> </ul>"},{"location":"jiro/Tools/#ibm-semeru","title":"IBM Semeru","text":"<p>The binaries listed below come from https://developer.ibm.com/languages/java/semeru-runtimes/downloads.</p> <ul> <li>semeru-latest <code>/opt/tools/java/semeru/latest</code> = 23+37</li> <li>semeru-jdk23-latest <code>/opt/tools/java/semeru/jdk-23/latest</code> = 23+37</li> <li>semeru-jdk22-latest <code>/opt/tools/java/semeru/jdk-22/latest</code> = 22.0.2+9</li> <li>semeru-jdk21-latest <code>/opt/tools/java/semeru/jdk-21/latest</code> = 21.0.4+7</li> <li>semeru-jdk20-latest <code>/opt/tools/java/semeru/jdk-20/latest</code> = 20.0.2+9</li> <li>semeru-jdk19-latest <code>/opt/tools/java/semeru/jdk-19/latest</code> = 19.0.2+7</li> <li>semeru-jdk18-latest <code>/opt/tools/java/semeru/jdk-18/latest</code> = 18.0.2+9</li> <li>semeru-jdk17-latest <code>/opt/tools/java/semeru/jdk-17/latest</code> = 17.0.12+7</li> <li>semeru-jdk11-latest <code>/opt/tools/java/semeru/jdk-11/latest</code> = 11.0.24+8</li> <li>semeru-jdk8-latest <code>/opt/tools/java/semeru/jdk-8/latest</code> = 8u422-b05</li> </ul>"},{"location":"jiro/Tools/#ant","title":"Ant","text":"<ul> <li>apache-ant-latest (1.10.5, automatically installed from Apache server)</li> </ul>"},{"location":"status/eclipse-status/","title":"Status \ud83d\udea6 <iframe src=\"https://www.eclipsestatus.io/badge?theme=dark\" width=\"250\" height=\"30\" frameborder=\"0\" scrolling=\"no\"></iframe>","text":"<p>Home / status / eclipse-status</p>"},{"location":"jiro-core/","title":"Index","text":"<p>Home / jiro-core</p>"},{"location":"jiro-core/#eclipse-cbi-jiro","title":"Eclipse CBI - Jiro","text":"<p>Jiro is a cluster-based Jenkins infrastructure for projects hosted by the Eclipse Foundation.</p>"},{"location":"jiro-core/#what-is-jiro","title":"What is Jiro?","text":"<p>The goal of Jiro is to make the administration of hundreds of Jenkins master instances on a Kubernetes based infrastructure bearable. It uses automation, templates and a configuration-as-code approach. Jiro consist of a set of custom shell scripts and a Makefile. It relies heavily on the Docker CLI, OpenShift CLI and the Jenkins Configuration as Code plugin.</p>"},{"location":"jiro-core/#why-jiro","title":"Why Jiro?","text":"<p>After evaluating CloudBees Core (formerly known as CloudBees Jenkins Enterprise), we found it to miss important features like resource quotas and support for separate name spaces. We also expected a lower administration overhead for recurring task like setting up a new Jenkins instance, upgrading plugins, etc. Therefore we decided to evaluate a custom approach (Jiro), which turned out to be ready for prime time.</p>"},{"location":"jiro-core/#why-is-it-called-jiro","title":"Why is it called Jiro?","text":"<p>You can interpret Jiro as acronym for \"Jenkins Instances Running [on] OpenShift/OKD\", even though the name originates from Sukiyabashi Jiro. It should be pronounced \"Geero\" and not be confused with a famous bug-tracking tool.</p>"},{"location":"jiro-core/#tasks","title":"Tasks","text":"<p>Build and deployment tasks are implemented as Make targets. Dependencies are properly specified, so you don't need to run all the following tasks, e.g., deploy will first build and push the images, then generate the Kubernetes configuration files and finally deploy the instance on the cluster.</p>"},{"location":"jiro-core/#build-the-jenkins-docker-image-of-a-project","title":"Build the Jenkins docker image of a project","text":"<pre><code>$ make image_&lt;project_full_name&gt;\n</code></pre>"},{"location":"jiro-core/#push-a-jenkins-image-to-dockerhub","title":"Push a Jenkins image to DockerHub","text":"<pre><code>$ make push_&lt;project_full_name&gt;\n</code></pre>"},{"location":"jiro-core/#generate-kubernetes-openshift-configuration-files","title":"Generate Kubernetes (OpenShift) configuration files","text":"<pre><code>$ make k8s_&lt;project_full_name&gt;\n</code></pre>"},{"location":"jiro-core/#deploy-jenkins-instance-to-the-cluster","title":"Deploy Jenkins instance to the cluster","text":"<pre><code>$ make deploy_&lt;project_full_name&gt;\n</code></pre>"},{"location":"jiro-core/#clean-up-build-artifacts","title":"Clean up build artifacts","text":"<pre><code>$ make clean_&lt;project_full_name&gt;\n</code></pre>"},{"location":"jiro-core/#for-all-projects-at-once","title":"For all projects at once","text":"<pre><code>$ make all_images\n$ make push_all_images\n$ make k8s_all_instances\n$ make deploy_all_instances\n$ make clean_all_instances\n</code></pre>"},{"location":"jiro-core/#create-a-new-jenkins-instance-for-a-project","title":"Create a new Jenkins instance for a project","text":"<pre><code>$ ./jenkins-new-instance.sh &lt;project_full_name&gt; &lt;project_short_name&gt; &lt;project_display_name&gt;\n$ make deploy_&lt;project_full_name&gt;\n</code></pre>"},{"location":"jiro-core/#create-a-base-image-for-a-new-version-of-jenkins","title":"Create a base image for a new version of Jenkins","text":"<pre><code>$ cp -r jenkins-master-base/latest jenkins-master-base/&lt;new_version&gt;\n$ rm jenkins-master-base/latest\n$ ln -s jenkins-master-base/&lt;new_version&gt; jenkins-master-base/latest\n</code></pre>"},{"location":"jiro-core/#utilities","title":"Utilities","text":""},{"location":"jiro-core/#jenkins-clish","title":"jenkins-cli.sh","text":"<p>Give it the folder to an instance and it will let you call any Jenkins CLI commands at the proper URL. You can get the list of available commands by running</p> <pre><code>  $ ./jenkins-cli.sh instances/&lt;project_full_name&gt; help\n</code></pre>"},{"location":"jiro-core/#examples","title":"Examples","text":"<ul> <li> <p>Get the version of the running Jenkins</p> <p>$ ./jenkins-cli.sh instances/ version <li> <p>Reload the configuration as code configuration file. Note that the config map is not immediately updated on the node running the instance after it has been deployed to the cluster. You may have to wait a couple of seconds/minutes, depending on the cluster load</p> <p>$ ./jenkins-cli.sh instances/ reload-jcasc-configuration <li> <p>Safe restart / safe shutdown of Jenkins. All instances are configured with the ExitLifecyle, meaning that a restart is actually a shutdown, letting Kubernetes re-spawn a new container thanks to the restart policy of the StatefulSet.</p> <p>$ ./jenkins-cli.sh instances/ safe-shutdown   $ ./jenkins-cli.sh instances/ safe-restart <li> <p>Put Jenkins into quiet mode</p> <p>$ ./jenkins-cli.sh instances/ quiet-down"},{"location":"jiro-core/#jenkins-hard-restartsh","title":"jenkins-hard-restart.sh","text":"<p>Scale down to 0 the StatefulSet running Jenkins then scale it up to 1. It makes Kubernetes re-provision the pod (it may be re-scheduled on a new node).</p> <pre><code>$ ./jenkins-hard-restart.sh instances/&lt;project_full_name&gt;\n</code></pre>"},{"location":"jiro-core/#dependencies","title":"Dependencies","text":"<ul> <li>bash 4</li> <li>docker</li> <li>hbs-cli</li> <li><code>$ npm i -g hbs-cli</code></li> <li>jsonnet</li> <li>jq</li> <li>oc (OpenShift CLI tool)</li> <li>pass</li> <li>yq</li> </ul>"},{"location":"jiro-core/#installation","title":"Installation","text":""},{"location":"jiro-core/#openshiftokd","title":"OpenShift/OKD","text":"<ul> <li> <p>Namespace ownership check must be disabled</p> <p>$ oc env dc/router -n default ROUTER_DISABLE_NAMESPACE_OWNERSHIP_CHECK=true</p> </li> </ul>"},{"location":"jiro-core/CONTRIBUTING/","title":"CONTRIBUTING","text":"<p>Home / jiro-core / CONTRIBUTING</p>"},{"location":"jiro-core/CONTRIBUTING/#contributing-to-eclipse-common-build-infrastructure","title":"Contributing to Eclipse Common Build Infrastructure","text":"<p>Thanks for your interest in this project.</p>"},{"location":"jiro-core/CONTRIBUTING/#project-description","title":"Project description","text":"<p>The Eclipse Common Build Infrastructure (CBI) combines technologies and practices for building Eclipse Software.</p> <ul> <li>https://projects.eclipse.org/projects/technology.cbi</li> </ul>"},{"location":"jiro-core/CONTRIBUTING/#developer-resources","title":"Developer resources","text":"<p>Information regarding source code management, builds, coding standards, and more.</p> <ul> <li>https://projects.eclipse.org/projects/technology.cbi/developer</li> </ul> <p>This project uses GitHub issues on the respective repositories to track ongoing development and issues.</p> <p>Be sure to search for existing bugs before you create another one. Remember that contributions are always welcome!</p>"},{"location":"jiro-core/CONTRIBUTING/#eclipse-development-process","title":"Eclipse Development Process","text":"<p>This Eclipse Foundation open project is governed by the Eclipse Foundation Development Process and operates under the terms of the Eclipse IP Policy.</p>"},{"location":"jiro-core/CONTRIBUTING/#eclipse-contributor-agreement","title":"Eclipse Contributor Agreement","text":"<p>Before your contribution can be accepted by the project team contributors must electronically sign the Eclipse Contributor Agreement (ECA).</p> <ul> <li>http://www.eclipse.org/legal/ECA.php</li> </ul> <p>Commits that are provided by non-committers must have a Signed-off-by field in the footer indicating that the author is aware of the terms by which the contribution has been provided to the project. The non-committer must additionally have an Eclipse Foundation account and must have a signed Eclipse Contributor Agreement (ECA) on file.</p> <p>For more information, please see the Eclipse Committer Handbook: https://www.eclipse.org/projects/handbook/#resources-commit</p>"},{"location":"jiro-core/CONTRIBUTING/#contact","title":"Contact","text":"<p>Contact the project developers via the project's dev list.</p> <ul> <li>mailto:cbi-dev@eclipse.org</li> </ul>"},{"location":"jiro-core/NOTICE/","title":"NOTICE","text":"<p>Home / jiro-core / NOTICE</p>"},{"location":"jiro-core/NOTICE/#notices-for-eclipse-common-build-infrastructure","title":"Notices for Eclipse Common Build Infrastructure","text":"<p>This content is produced and maintained by the Eclipse Common Build Infrastructure project.</p> <ul> <li>Project home: https://projects.eclipse.org/projects/technology.cbi</li> </ul>"},{"location":"jiro-core/NOTICE/#trademarks","title":"Trademarks","text":"<p>Eclipse Common Build Infrastructure, and Common Build Infrastructure are trademarks of the Eclipse Foundation.</p>"},{"location":"jiro-core/NOTICE/#copyright","title":"Copyright","text":"<p>All content is the property of the respective authors or their employers. For more information regarding authorship of content, please consult the listed source code repository logs.</p>"},{"location":"jiro-core/NOTICE/#declared-project-licenses","title":"Declared Project Licenses","text":"<p>This program and the accompanying materials are made available under the terms of the Eclipse Public License 2.0 which is available at https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html, or the MIT License  which is available at https://opensource.org/licenses/MIT.</p> <p>SPDX-License-Identifier: EPL-2.0 or MIT</p>"},{"location":"jiro-core/NOTICE/#source-code","title":"Source Code","text":"<p>The project maintains the source code repositories as listed on  https://projects.eclipse.org/projects/technology.cbi/developer</p>"},{"location":"jiro-core/NOTICE/#third-party-content","title":"Third-party Content","text":"<p>This project leverages the following third party content.</p>"},{"location":"jiro-core/NOTICE/#cryptography","title":"Cryptography","text":"<p>Content may contain encryption software. The country in which you are currently may have restrictions on the import, possession, and use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check the country's laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted.</p>"},{"location":"jiro-core/documentation/","title":"Documentation","text":"<p>Home / jiro-core / documentation</p>"},{"location":"jiro-core/documentation/#documentation","title":"Documentation","text":""},{"location":"jiro-core/documentation/#administration","title":"Administration","text":"<p>Please note, the following commands can only be executed if you have direct access to the build cluster environment.</p>"},{"location":"jiro-core/documentation/#create-a-new-jenkins-instance","title":"Create a new Jenkins instance","text":"<p>Run <code>jenkins-new-instance.sh &lt;project_id&gt; '&lt;project_display_name&gt;'</code></p> <p>e.g. for Eclipse CBI: <code>jenkins-new-instance.sh technology.cbi 'Eclipse CBI'</code></p>"},{"location":"jiro-core/documentation/#deploy-a-jenkins-instance","title":"Deploy a Jenkins instance","text":"<p>Run <code>make deploy_&lt;project_id&gt;</code></p> <p>e.g. for Eclipse CBI JIPP: <code>make deploy_technology.cbi</code></p>"},{"location":"jiro-core/documentation/#reload-one-or-more-jenkins-instances","title":"Reload one or more Jenkins instance(s)","text":"<p>Run <code>jenkins-reload.sh &lt;project_id&gt; [&lt;project_id2&gt;]</code></p> <p>e.g. for Eclipse CBI JIPP: <code>jenkins-reload.sh technology.cbi</code></p>"},{"location":"jiro-core/documentation/#jenkins-instance-configuration-options","title":"Jenkins instance configuration options","text":"<p>Every Jenkins instance has it's own folder under instances/, which contains a <code>config.jsonnet</code> file. <p>A minimal configuration in instances/technology.cbi/config.jsonnet would look like this:</p> <pre><code>{\n  project+: {\n    fullName: \"technology.cbi\",\n    displayName: \"Eclipse CBI\"\n  }\n}\n</code></pre> <p>Executing <code>make deploy_&lt;project_id&gt;</code> in the Jiro root directory, creates all necessary files in the target folder utilizing templates from the templates/ directory.</p> <p>Most configuration options are set by default and only need to be specified if they differ from the default.</p>"},{"location":"jiro-core/documentation/#set-a-specific-jenkins-version","title":"Set a specific Jenkins version","text":"<p>By default the latest Jenkins version specified in https://github.com/eclipse-cbi/jiro-masters/masters.jsonnet is used. For testing purposes or in case of a regression, other versions can be specified.</p> <pre><code>{\n  project+: {\n    fullName: \"technology.cbi\",\n    displayName: \"Eclipse CBI\",\n  },\n  jenkins+: {\n    version: \"2.263.3\",\n  }\n}\n</code></pre>"},{"location":"jiro-core/documentation/#additional-jenkins-plugins","title":"Additional Jenkins plugins","text":"<p>List of plugins that are installed by default: https://github.com/eclipse-cbi/jiro-masters/jiro.libsonnet</p> <p>Additional plugins can be specified like this:</p> <pre><code>{\n  project+: {\n    fullName: \"technology.cbi\",\n    displayName: \"Eclipse CBI\",\n  },\n  jenkins+: {\n    plugins+: [\n      \"cloudbees-disk-usage-simple\",\n      \"embeddable-build-status\",\n    ],\n  },\n}\n</code></pre> <p>Additional plugins for multiple JIPPs (e.g. all ee4j.* instances) can be specified in: templates/plugins.libsonnet</p>"},{"location":"jiro-core/documentation/#resource-packs","title":"Resource packs","text":"<p>Additional resource packs can be configured.</p> <pre><code>{\n  project+: {\n    fullName: \"technology.cbi\",\n    displayName: \"Eclipse CBI\",\n    resourcePacks: 3,\n  },\n}\n</code></pre> <p>Please note: by default, one resource pack is granted. If the project requests one additional resource packs, you need to specify the absolute number (2).</p>"},{"location":"jiro-core/documentation/#adapt-jenkins-controller-resources-according-to-the-number-of-static-agents","title":"Adapt Jenkins controller resources according to the number of static agents","text":"<pre><code>{\n  project+: {\n    fullName: \"technology.cbi\",\n    displayName: \"Eclipse CBI\",\n  },\n  jenkins+: {\n    staticAgentCount: 3,\n  }\n}\n</code></pre>"},{"location":"jiro-core/documentation/#set-additional-permissions","title":"Set additional permissions","text":"<p>By default the LDAP group is determined by the <code>fullName</code> of the project. All members of the LDAP group get committer-level permissions, e.g. reading, configuring and starting jobs.</p> <p>If the LDAP group differs from the <code>fullName</code> it can be set explicitly like this:</p> <pre><code>{\n  project+: {\n    fullName: \"technology.cbi\",\n    displayName: \"Eclipse CBI\",\n    unixGroupName: \"eclipse.cbi\"\n  }\n}\n</code></pre> <p>If people, who are not committers on the project, should get access to a Jenkins instance or committers should get additional permissions, they can be added individually:</p> <pre><code>local permissionsTemplates = import '../../templates/permissions.libsonnet';\n\n{\n  project+: {\n    fullName: \"technology.cbi\",\n    displayName: \"Eclipse CBI\",\n  },\n  jenkins+: {\n    permissions+:\n      permissionsTemplates.projectPermissions(\"webmaster@eclipse.org\", [\"Agent/Connect\", \"Agent/Disconnect\"])\n  }\n}\n</code></pre> <p>Please note: requests for adding non-committers require a +1 from a project lead.</p>"},{"location":"jiro-core/documentation/#set-light-theme","title":"Set light theme","text":"<p>Jiro instances use a dark theme by default. If you are afraid of the dark, you can set a light theme.</p> <pre><code>{\n  project+: {\n    fullName: \"technology.cbi\",\n    displayName: \"Eclipse CBI\",\n  },\n  jenkins+: {\n    theme: \"quicksilver-light\",\n  }\n}\n</code></pre>"},{"location":"jiro-core/documentation/#set-deployment-options","title":"Set deployment options","text":"<p>Specific deployment options like host, prefix or cluster can be set.</p> <pre><code>{\n  project+: {\n    fullName: \"technology.cbi\",\n    displayName: \"Eclipse CBI\",\n  },\n  deployment+: {\n    host: \"foundation.eclipse.org\",\n    prefix: \"/ci/\"+ $.project.shortName,\n    cluster: \"okd-c1\",\n  }\n}\n</code></pre>"},{"location":"jiro-core/documentation/#set-additional-jcasc-options","title":"Set additional JCasC options","text":"<p>Specific JCasC options like static build agents, plugin configs, etc can be defined in <code>instances/&lt;project_name&gt;/jenkins/configuration.yml</code>.</p> <p>E.g. instances/technology.cbi/jenkins/configuration.yml</p> <pre><code>jenkins:\n  nodes:\n  - permanent:\n      labelString: \"docker-build\"\n      launcher:\n        ssh:\n          credentialsId: \"[...]\"\n          host: \"13.77.107.72\"\n          jvmOptions: \"-Xmx256m -Xms256m\"\n          sshHostKeyVerificationStrategy:\n            manuallyProvidedKeyVerificationStrategy:\n              key: \"[...]\"\n      mode: EXCLUSIVE\n      name: \"fmlw3-ubuntu1804\"\n      nodeDescription: \"4vCPU, 16GB RAM, Hosted @ Azure\"\n      remoteFS: \"/home/genie.cbi/jenkins-agent\"\n      numExecutors: 2\n      nodeProperties:\n      - watcher:\n          offlineAddresses: \"releng@eclipse.org\"\n          onlineAddresses: \"releng@eclipse.org\"\n\nunclassified:\n  slackNotifier:\n    teamDomain: \"eclipsefoundation\"\n    tokenCredentialId: \"[...]\"\n</code></pre>"},{"location":"jiro-core/documentation/#build-tools","title":"Build tools","text":""},{"location":"jiro-core/documentation/#maven","title":"Maven","text":"<p>Maven specific folders/configurations are created by default.</p>"},{"location":"jiro-core/documentation/#gradle","title":"Gradle","text":"<p>Create Gradle specific folders/configurations (e.g. ~/.gradle)</p> <pre><code>{\n  project+: {\n    fullName: \"technology.cbi\",\n    displayName: \"Eclipse CBI\",\n  },\n  gradle+: {\n    generate: true,\n  }\n}\n</code></pre> <p>This will create a volume mount for <code>/home/jenkins/.gradle/gradle.properties</code> with the following content: <pre><code>eclipseRepoPassword=&lt;password&gt;\neclipseRepoUsername=&lt;username&gt;\n</code></pre></p> <p>This is required for deploying artifacts to repo.eclipse.org.</p> <p>See also: https://wiki.eclipse.org/Services/Nexus#Deploying_to_repo.eclipse.org_with_Gradle</p>"},{"location":"jiro-core/documentation/#sbt","title":"sbt","text":"<p>Create sbt specific folders/configurations (e.g. ~/.sbt)</p> <pre><code>{\n  project+: {\n    fullName: \"technology.cbi\",\n    displayName: \"Eclipse CBI\",\n  },\n  sbt+: {\n    generate: true,\n  }\n}\n</code></pre>"},{"location":"jiro-core/performance-tests/readme/","title":"Readme","text":"<p>Home / jiro-core / performance-tests / readme</p>"},{"location":"jiro-core/performance-tests/readme/#run-perf-on-cluster","title":"Run perf on cluster","text":""},{"location":"jiro-core/performance-tests/readme/#dummy-script-default","title":"dummy script (default)","text":"<pre><code>./perftests.sh \n</code></pre>"},{"location":"jiro-core/performance-tests/readme/#guava-script","title":"guava script","text":"<pre><code>./perftests.sh ./guava/run.sh\n</code></pre>"},{"location":"jiro-core/performance-tests/readme/#jgit-script","title":"jgit script","text":"<pre><code>./perftests.sh ./jgit/run.sh\n</code></pre>"},{"location":"jiro-agent/","title":"Index","text":"<p>Home / jiro-agent  </p>"},{"location":"jiro-agent/#jiro-agents","title":"Jiro Agents","text":"<p>This repo contains the dockerfiles for the following pod templates that are available on every CI instance at the Eclipse Foundation:</p> Image labels Dockerfile Tool versions Docker image name basic Dockerfile README.md eclipsecbi/jiro-agent-basic:latest basic-ubuntu* Dockerfile README.md eclipsecbi/jiro-agent-basic-ubuntu:latest ubuntu-2204 Dockerfile README.md eclipsecbi/jiro-agent-ubuntu-2204:latest ubuntu-2404, ubuntu-latest Dockerfile README.md eclipsecbi/jiro-agent-ubuntu-2404:latest <ul> <li>basic-ubuntu is a transitional image. The basic image will be replaced with it eventually.</li> </ul>"},{"location":"jiro-agent/#deprecated-images","title":"Deprecated images","text":"<p>The following images are no longer maintained and built.</p> Image labels Dockerfile Tool versions Docker image name centos-7, migration, jipp-migration Dockerfile README.md eclipsecbi/jiro-agent-centos-7:latest centos-8, centos-latest Dockerfile README.md eclipsecbi/jiro-agent-centos-8:latest"},{"location":"jiro-agent/CONTRIBUTING/","title":"CONTRIBUTING","text":"<p>Home / jiro-agent / CONTRIBUTING</p>"},{"location":"jiro-agent/CONTRIBUTING/#contributing-to-eclipse-common-build-infrastructure","title":"Contributing to Eclipse Common Build Infrastructure","text":"<p>Thanks for your interest in this project.</p>"},{"location":"jiro-agent/CONTRIBUTING/#project-description","title":"Project description","text":"<p>The Eclipse Common Build Infrastructure (CBI) combines technologies and practices for building Eclipse Software.</p> <ul> <li>https://projects.eclipse.org/projects/technology.cbi</li> </ul>"},{"location":"jiro-agent/CONTRIBUTING/#developer-resources","title":"Developer resources","text":"<p>Information regarding source code management, builds, coding standards, and more.</p> <ul> <li>https://projects.eclipse.org/projects/technology.cbi/developer</li> </ul> <p>This project uses GitHub issues on its respective repositories to track ongoing development and issues.</p> <p>Be sure to search for existing bugs before you create another one. Remember that contributions are always welcome!</p>"},{"location":"jiro-agent/CONTRIBUTING/#eclipse-development-process","title":"Eclipse Development Process","text":"<p>This Eclipse Foundation open project is governed by the Eclipse Foundation Development Process and operates under the terms of the Eclipse IP Policy.</p>"},{"location":"jiro-agent/CONTRIBUTING/#eclipse-contributor-agreement","title":"Eclipse Contributor Agreement","text":"<p>Before your contribution can be accepted by the project team contributors must electronically sign the Eclipse Contributor Agreement (ECA).</p> <ul> <li>http://www.eclipse.org/legal/ECA.php</li> </ul> <p>Commits that are provided by non-committers must have a Signed-off-by field in the footer indicating that the author is aware of the terms by which the contribution has been provided to the project. The non-committer must additionally have an Eclipse Foundation account and must have a signed Eclipse Contributor Agreement (ECA) on file.</p> <p>For more information, please see the Eclipse Committer Handbook: https://www.eclipse.org/projects/handbook/#resources-commit</p>"},{"location":"jiro-agent/CONTRIBUTING/#contact","title":"Contact","text":"<p>Contact the project developers via the project's dev list.</p> <ul> <li>mailto:cbi-dev@eclipse.org</li> </ul>"},{"location":"jiro-agent/NOTICE/","title":"NOTICE","text":"<p>Home / jiro-agent / NOTICE</p>"},{"location":"jiro-agent/NOTICE/#notices-for-eclipse-common-build-infrastructure","title":"Notices for Eclipse Common Build Infrastructure","text":"<p>This content is produced and maintained by the Eclipse Common Build Infrastructure project.</p> <ul> <li>Project home: https://projects.eclipse.org/projects/technology.cbi</li> </ul>"},{"location":"jiro-agent/NOTICE/#trademarks","title":"Trademarks","text":"<p>Eclipse Common Build Infrastructure, and Common Build Infrastructure are trademarks of the Eclipse Foundation.</p>"},{"location":"jiro-agent/NOTICE/#copyright","title":"Copyright","text":"<p>All content is the property of the respective authors or their employers. For more information regarding authorship of content, please consult the listed source code repository logs.</p>"},{"location":"jiro-agent/NOTICE/#declared-project-licenses","title":"Declared Project Licenses","text":"<p>This program and the accompanying materials are made available under the terms of the Eclipse Public License 2.0 which is available at https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html.</p> <p>SPDX-License-Identifier: EPL-2.0</p>"},{"location":"jiro-agent/NOTICE/#source-code","title":"Source Code","text":"<p>The project maintains the source code repositories as listed on  https://projects.eclipse.org/projects/technology.cbi/developer</p>"},{"location":"jiro-agent/NOTICE/#third-party-content","title":"Third-party Content","text":"<p>This project leverages the following third party content.</p>"},{"location":"jiro-agent/NOTICE/#cryptography","title":"Cryptography","text":"<p>Content may contain encryption software. The country in which you are currently may have restrictions on the import, possession, and use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check the country's laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted.</p>"},{"location":"jiro-agent/basic/","title":"Index","text":"<p>Home / jiro-agent / basic</p>"},{"location":"jiro-agent/basic/#basic-agent-ostool-versions","title":"basic agent - OS/Tool versions","text":"OS / Tool Version OS release  (cat /etc/issue) Debian GNU/Linux 10 \\n \\l Java openjdk version \"11.0.22\" 2024-01-16IBM Semeru Runtime Open Edition 11.0.22.0 (build 11.0.22+7)Eclipse OpenJ9 VM 11.0.22.0 (build openj9-0.43.0, JRE 11 Linux amd64-64-Bit Compressed References 20240131_966 (JIT enabled, AOT enabled)OpenJ9   - 2c3d78b48OMR      - ea8124dbcJCL      - 7876cac747 based on jdk-11.0.22+7) Git git version 2.20.1 SSH OpenSSH_7.9p1 Debian-10+deb10u4, OpenSSL 1.1.1n  15 Mar 2022 bash GNU bash, version 5.0.3(1)-release (x86_64-pc-linux-gnu) Wget GNU Wget 1.20.1 built on linux-gnu. cURL curl 7.64.0 (x86_64-pc-linux-gnu) libcurl/7.64.0 OpenSSL/1.1.1n zlib/1.2.11 libidn2/2.0.5 libpsl/0.20.2 (+libidn2/2.0.5) libssh2/1.8.0 nghttp2/1.36.0 librtmp/2.3 GPG gpg (GnuPG) 2.2.12"},{"location":"jiro-agent/basic-ubuntu/","title":"Index","text":"<p>Home / jiro-agent / basic-ubuntu</p>"},{"location":"jiro-agent/basic-ubuntu/#basic-ubuntu-agent-ostool-versions","title":"basic-ubuntu agent - OS/Tool versions","text":"OS / Tool Version OS release  (cat /etc/issue) Ubuntu 24.04 LTS \\n \\l Java openjdk version \"17.0.12\" 2024-07-16IBM Semeru Runtime Open Edition 17.0.12.0 (build 17.0.12+7)Eclipse OpenJ9 VM 17.0.12.0 (build openj9-0.46.0, JRE 17 Linux amd64-64-Bit Compressed References 20240716_818 (JIT enabled, AOT enabled)OpenJ9   - 1a6f6128aaOMR      - 840a9adbaJCL      - 784bd66222d based on jdk-17.0.12+7) Git git version 2.46.0 SSH OpenSSH_9.6p1 Ubuntu-3ubuntu13.4, OpenSSL 3.0.13 30 Jan 2024 bash GNU bash, version 5.2.21(1)-release (x86_64-pc-linux-gnu) Wget GNU Wget 1.21.4 built on linux-gnu. cURL curl 8.5.0 (x86_64-pc-linux-gnu) libcurl/8.5.0 OpenSSL/3.0.13 zlib/1.3 brotli/1.1.0 zstd/1.5.5 libidn2/2.3.7 libpsl/0.21.2 (+libidn2/2.3.7) libssh/0.10.6/openssl/zlib nghttp2/1.59.0 librtmp/2.3 OpenLDAP/2.6.7 GPG gpg (GnuPG) 2.4.4"},{"location":"jiro-agent/remoting/","title":"Index","text":"<p>Home / jiro-agent / remoting</p>"},{"location":"jiro-agent/remoting/#remoting-versions","title":"Remoting versions","text":"<p>Remoting versions are defined in <code>remoting.json</code> to make it possible to automate version updates. It's imported from <code>default.jsonnet</code> in the repo root directory.</p> <ul> <li>See https://github.com/jenkinsci/remoting/releases for the remoting version</li> <li>See https://github.com/jenkinsci/docker-agent/releases for the startupScript.version</li> </ul>"},{"location":"jiro-agent/ubuntu/","title":"Index","text":"<p>Home / jiro-agent / ubuntu</p>"},{"location":"jiro-agent/ubuntu/#ubuntu-2204-agent-ostool-versions","title":"ubuntu-2204 agent - OS/Tool versions","text":"OS / Tool Version OS release  (cat /etc/issue) Ubuntu 22.04.4 LTS \\n \\l Java openjdk version \"17.0.12\" 2024-07-16OpenJDK Runtime Environment (build 17.0.12+7-Ubuntu-1ubuntu222.04)OpenJDK 64-Bit Server VM (build 17.0.12+7-Ubuntu-1ubuntu222.04, mixed mode, sharing) Git git version 2.34.1 SSH OpenSSH_8.9p1 Ubuntu-3ubuntu0.10, OpenSSL 3.0.2 15 Mar 2022 bash GNU bash, version 5.1.16(1)-release (x86_64-pc-linux-gnu) Wget GNU Wget 1.21.2 built on linux-gnu. cURL curl 7.81.0 (x86_64-pc-linux-gnu) libcurl/7.81.0 OpenSSL/3.0.2 zlib/1.2.11 brotli/1.0.9 zstd/1.4.8 libidn2/2.3.2 libpsl/0.21.0 (+libidn2/2.3.2) libssh/0.9.6/openssl/zlib nghttp2/1.43.0 librtmp/2.3 OpenLDAP/2.5.18 GPG gpg (GnuPG) 2.2.27"},{"location":"jiro-agent/ubuntu/#ubuntu-2404-agent-ostool-versions","title":"ubuntu-2404 agent - OS/Tool versions","text":"OS / Tool Version OS release  (cat /etc/issue) Ubuntu 24.04 LTS \\n \\l Java openjdk version \"17.0.12\" 2024-07-16OpenJDK Runtime Environment (build 17.0.12+7-Ubuntu-1ubuntu224.04)OpenJDK 64-Bit Server VM (build 17.0.12+7-Ubuntu-1ubuntu224.04, mixed mode, sharing) Git git version 2.43.0 SSH OpenSSH_9.6p1 Ubuntu-3ubuntu13.4, OpenSSL 3.0.13 30 Jan 2024 bash GNU bash, version 5.2.21(1)-release (x86_64-pc-linux-gnu) Wget GNU Wget 1.21.4 built on linux-gnu. cURL curl 8.5.0 (x86_64-pc-linux-gnu) libcurl/8.5.0 OpenSSL/3.0.13 zlib/1.3 brotli/1.1.0 zstd/1.5.5 libidn2/2.3.7 libpsl/0.21.2 (+libidn2/2.3.7) libssh/0.10.6/openssl/zlib nghttp2/1.59.0 librtmp/2.3 OpenLDAP/2.6.7 GPG gpg (GnuPG) 2.4.4"},{"location":"jiro-controller/","title":"Index","text":"<p>Home / jiro-controller  </p>"},{"location":"jiro-controller/#jiro-masters","title":"JIRO Masters","text":"<p>Defines the metadata for JIRO controllers (for container images among other things). It uses Jsonnet and follows some best practices.</p>"},{"location":"jiro-controller/#how-to-add-a-new-controller-version","title":"How to add a new controller version?","text":"<p>If you want to just add a new controller following the template from <code>jiro.libsonnet</code>, you have to add a new instance the <code>masters</code> array in the file <code>masters.jsonnet</code>, calling the <code>newController(controllerVersion, remotingVersion)</code> constructor:</p> <pre><code>local jiro = import \"jiro.libsonnet\";\n\n{\n  # Latest references an ID, not the version that is used\n  # but as the default id=version so it looks like we're using the version in most cases\n  latest: \"2.263.3\",\n  masters: {\n    [master.id]: master for master in [\n      jiro.newController(\"2.263.3\", \"4.5\"),\n      jiro.newController(\"2.263.2\", \"4.5\"),\n    ]\n  },\n}\n</code></pre> <ul> <li>controllerVersion the version of the Jenkins controller as published at https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/. Usually, it's the same string as the advertized version on the following pages:</li> <li>GitHub releases page</li> <li>Jenkins download page</li> <li>LTS changelog</li> <li>Regular changelog</li> <li>remotingVersion the version of the remoting code the controller embeds. Usually, it\u2019s mentioned in the changelogs (e.g., search for Update Remoting from 3.36 to 4.2). But sometimes, it\u2019s not obvious. You have to download the proper <code>jenkins.war</code> file from http://mirrors.jenkins.io/war-stable/ and check for the manifest entry <code>Remoting-Embedded-Version</code>, e.g.:</li> </ul> <pre><code>$ curl -SJOL http://mirrors.jenkins.io/war-stable/2.222.1/jenkins.war\n$ unzip -p jenkins.war META-INF/MANIFEST.MF | grep \"Remoting-Embedded-Version\"\nRemoting-Embedded-Version: 4.2\n</code></pre>"},{"location":"jiro-controller/#how-to-add-custom-controller","title":"How to add custom controller?","text":"<p>All fields in <code>jiro.libsonnet</code> can be overridden in the <code>masters</code> array elements, e.g. to define a jdk11 based master:</p> <pre><code>local jiro = import \"jiro.libsonnet\";\n\n{\n  latest: \"2.235.3-jdk11\",\n  masters: {\n    [master.id]: master for master in [\n      jiro.newController(\"2.235.3\", \"4.3\") {\n        id: \"%s-jdk11\" % self.version,\n        docker+: {\n          from: \"eclipsecbi/eclipse-temurin-coreutils:11-alpine\",\n        },\n        pubkey: importstr 'jenkins-2.235.3-onward.war.pub.asc',\n        key_fingerprint: 'FCEF32E745F2C3D5',\n      },\n    ]\n  }\n}\n</code></pre>"},{"location":"jiro-controller/#building","title":"Building","text":"<p>To build all controllers as defined in masters.jsonnet, run</p> <pre><code>make all\n</code></pre> <p>To build a single controller, run</p> <pre><code>make &lt;id&gt;\n</code></pre> <p>where <code>&lt;id&gt;</code> is the controller's ID as specified in <code>masters.jsonnet</code></p>"},{"location":"jiro-controller/#dependencies","title":"Dependencies","text":"<ul> <li>docker</li> <li>bash 4</li> <li>jq</li> <li>jsonnet</li> </ul>"},{"location":"jiro-controller/CONTRIBUTING/","title":"CONTRIBUTING","text":"<p>Home / jiro-controller / CONTRIBUTING</p>"},{"location":"jiro-controller/CONTRIBUTING/#contributing-to-eclipse-common-build-infrastructure","title":"Contributing to Eclipse Common Build Infrastructure","text":"<p>Thanks for your interest in this project.</p>"},{"location":"jiro-controller/CONTRIBUTING/#project-description","title":"Project description","text":"<p>The Eclipse Common Build Infrastructure (CBI) combines technologies and practices for building Eclipse Software.</p> <ul> <li>https://projects.eclipse.org/projects/technology.cbi</li> </ul>"},{"location":"jiro-controller/CONTRIBUTING/#developer-resources","title":"Developer resources","text":"<p>Information regarding source code management, builds, coding standards, and more.</p> <ul> <li>https://projects.eclipse.org/projects/technology.cbi/developer</li> </ul> <p>This project uses GitHub issues on its respective repositories to track ongoing development and issues.</p> <p>Be sure to search for existing bugs before you create another one. Remember that contributions are always welcome!</p>"},{"location":"jiro-controller/CONTRIBUTING/#eclipse-development-process","title":"Eclipse Development Process","text":"<p>This Eclipse Foundation open project is governed by the Eclipse Foundation Development Process and operates under the terms of the Eclipse IP Policy.</p>"},{"location":"jiro-controller/CONTRIBUTING/#eclipse-contributor-agreement","title":"Eclipse Contributor Agreement","text":"<p>Before your contribution can be accepted by the project team contributors must electronically sign the Eclipse Contributor Agreement (ECA).</p> <ul> <li>http://www.eclipse.org/legal/ECA.php</li> </ul> <p>Commits that are provided by non-committers must have a Signed-off-by field in the footer indicating that the author is aware of the terms by which the contribution has been provided to the project. The non-committer must additionally have an Eclipse Foundation account and must have a signed Eclipse Contributor Agreement (ECA) on file.</p> <p>For more information, please see the Eclipse Committer Handbook: https://www.eclipse.org/projects/handbook/#resources-commit</p>"},{"location":"jiro-controller/CONTRIBUTING/#contact","title":"Contact","text":"<p>Contact the project developers via the project's dev list.</p> <ul> <li>mailto:cbi-dev@eclipse.org</li> </ul>"},{"location":"jiro-controller/NOTICE/","title":"NOTICE","text":"<p>Home / jiro-controller / NOTICE</p>"},{"location":"jiro-controller/NOTICE/#notices-for-eclipse-common-build-infrastructure","title":"Notices for Eclipse Common Build Infrastructure","text":"<p>This content is produced and maintained by the Eclipse Common Build Infrastructure project.</p> <ul> <li>Project home: https://projects.eclipse.org/projects/technology.cbi</li> </ul>"},{"location":"jiro-controller/NOTICE/#trademarks","title":"Trademarks","text":"<p>Eclipse Common Build Infrastructure, and Common Build Infrastructure are trademarks of the Eclipse Foundation.</p>"},{"location":"jiro-controller/NOTICE/#copyright","title":"Copyright","text":"<p>All content is the property of the respective authors or their employers. For more information regarding authorship of content, please consult the listed source code repository logs.</p>"},{"location":"jiro-controller/NOTICE/#declared-project-licenses","title":"Declared Project Licenses","text":"<p>This program and the accompanying materials are made available under the terms of the Eclipse Public License 2.0 which is available at https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html.</p> <p>SPDX-License-Identifier: EPL-2.0</p>"},{"location":"jiro-controller/NOTICE/#source-code","title":"Source Code","text":"<p>The project maintains the source code repositories as listed on  https://projects.eclipse.org/projects/technology.cbi/developer</p>"},{"location":"jiro-controller/NOTICE/#third-party-content","title":"Third-party Content","text":"<p>This project leverages the following third party content.</p>"},{"location":"jiro-controller/NOTICE/#cryptography","title":"Cryptography","text":"<p>Content may contain encryption software. The country in which you are currently may have restrictions on the import, possession, and use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check the country's laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted.</p>"},{"location":"jenkins-pipeline-library/","title":"Index","text":"<p>Home / jenkins-pipeline-library</p>"},{"location":"jenkins-pipeline-library/#jenkins-pipeline-library","title":"Jenkins Pipeline Library","text":"<p>This repository is here to help understand and leverage the capabilities of the Jenkins Pipeline Library (<code>jenkins-pipeline-library</code>). </p> <p>This library is designed to streamline and standardize Jenkins pipeline configurations across projects according to Eclipse Foundation infrastructure specificities.</p> <ul> <li><code>ContainerBuild</code>: Build docker images in eclipse foundation infrastructure (based on buildkit) and publish to any container registry such as docker.io, ...</li> <li><code>Jamstack</code>: Build and publish Eclipse Foundation static website based on Hugo framework. </li> <li><code>Notification</code>: Send email notification</li> </ul> <p>[[TOC]]</p>"},{"location":"jenkins-pipeline-library/#configuring-jenkins-shared-library","title":"Configuring Jenkins Shared Library","text":"<p>Jenkins Shared Libraries provide a way to centralize and reuse code across multiple pipelines. </p> <p>If you want to use this shared library named jenkins-pipeline-library follow these steps to configure it in Jenkins.</p> <ol> <li> <p>Jenkins Configuration:</p> </li> <li> <p>Log in to your Jenkins instance</p> </li> <li> <p>Navigate to \"Manage Jenkins\" &gt; \"Configure System\" or to your multibranch pipeline project configuration</p> </li> <li> <p>Configure Global Pipeline Libraries:</p> </li> <li> <p>\"Pipeline Libraries\" section.</p> </li> <li> <p>Click on \"Add\" to add a new library.</p> </li> <li> <p>Library Configuration:</p> </li> <li> <p>Enter a name for the library:<code>releng-pipeline</code></p> </li> <li>Specify the default version (e.g., <code>main</code> or a specific <code>branch/tag</code>).</li> <li>Set the retrieval method: <code>Modern SCM for Git</code></li> <li>Enter the library source: `https://gitlab.eclipse.org/eclipsefdn/it/releng/jenkins-pipeline-service/jenkins-pipeline-library``</li> </ol> <p>Now, you can use the shared library in your Jenkinsfile by referencing functions or steps defined in jenkins-pipeline-library. For example:</p> <pre><code>@Library('releng-pipeline') _\n\npipeline {\n    agent any\n    stages {\n        stage('Build') {\n            steps {\n                relengPipeline.buildStep()\n            }\n        }\n\n    }\n}\n</code></pre> <p>By following these steps, you've configured and imported the <code>jenkins-pipeline-library</code> with the import name <code>releng-pipeline</code> into your Jenkins environment.</p> <p>NOTE: shared library can also be configured at multibranch pipeline configuration level.</p>"},{"location":"jenkins-pipeline-library/#containerbuild","title":"ContainerBuild","text":"<p>Build docker images in eclipse foundation infrastructure (based on buildkit) and publish to any container registry such as docker.io, ...</p>"},{"location":"jenkins-pipeline-library/#using-containerbuild-in-a-stage","title":"Using containerBuild in a stage","text":"<pre><code>@Library('releng-pipeline') _\n\npipeline {\n    agent any\n    environment {\n        HOME = \"${env.WORKSPACE}\"\n    }\n    stages {\n        stage('build') {\n            agent {\n                kubernetes {\n                    yaml loadOverridableResource(\n                        libraryResource: 'org/eclipsefdn/container/agent.yml'\n                    )\n                }\n            }\n            steps {\n                container('containertools') {\n                    containerBuild(\n                        credentialsId: '&lt;jenkins-credential-id&gt;',\n                        name: 'docker.io/&lt;namespace-name&gt;/&lt;container-name&gt;',\n                        version: 'latest'\n                    )\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>IMPORTANT: Don't forget to configure the <code>HOME</code> env!</p>"},{"location":"jenkins-pipeline-library/#containerbuild-as-a-pipeline","title":"containerBuild as a Pipeline","text":"<p>Define a full pipeline to build and deploy an image to a registry from a project.</p> <pre><code>@Library('releng-pipeline') _\n\ncontainerBuildPipeline(\n    credentialsId: '&lt;jenkins-credential-id&gt;',\n    name: 'docker.io/&lt;namespace-name&gt;/&lt;container-name&gt;',\n    version: 'latest'\n)\n</code></pre> <p>NOTE: No need to define the agent here. Can be overridden with <code>kubeAgentYmlFile</code> param.</p>"},{"location":"jenkins-pipeline-library/#advanced-configuration","title":"Advanced Configuration","text":"Parameter Default Value Description Required credentialsId null Registry credentials Yes registry docker.io Default Docker registry No name null Image name (default docker.io) Yes version latest Default image version No extraVersions [] Allows to tag image with different versions No aliases null Adding extra aliases to container image No dockerfile Dockerfile Path to the Dockerfile No context . Build context No push true Enable push by default No buildArg '' Additional build arguments No annotation true Enable image annotations by default No latest false Tag container image with latest version No debug false Default debug mode No kubeAgentYmlFile null Kubernetes agent configuration YAML file (only available in containerBuildPipeline) No"},{"location":"jenkins-pipeline-library/#more-use-case","title":"More use case","text":"<p>More examples are available in the sample project: jenkins-pipeline-library-sample</p> <p>More use cases in the test suite: jenkins-pipeline-library-sample test suite</p>"},{"location":"jenkins-pipeline-library/#common-errors","title":"Common errors","text":"<ol> <li>Error: <code>mkdir /.docker: permission denied</code></li> </ol> <p>Define HOME env var</p> <pre><code>environment {\n    HOME = \"${env.WORKSPACE}\"\n}\n</code></pre> <ol> <li>WorkflowScript: 25: Expected a step @ line xx, column xx.</li> </ol> <p>Adding script tag around your specific code</p> <pre><code>steps {\n    String name = env.REPO_NAME + '/alpine'\n    String versions = ['edge', '3.16', '3.17', '3.18']\n    versions.each { version -&gt;\n    container('containertools') {\n        containerBuild(\n        ...\n        )\n    }\n  }\n}\n</code></pre> <p>to </p> <pre><code>steps {\n    script {\n        String name = env.REPO_NAME + '/alpine'\n        String versions = ['edge', '3.16', '3.17', '3.18']\n        versions.each { version -&gt;\n        container('containertools') {\n            ...\n            )\n        }\n        }\n    }\n}\n</code></pre>"},{"location":"jenkins-pipeline-library/#jamstack-hugo-website","title":"Jamstack: Hugo website","text":"<p>Build and publish a static website based on Hugo framework. </p>"},{"location":"jenkins-pipeline-library/#configuration","title":"Configuration","text":"<pre><code>@Library('releng-pipeline') _\n\nhugo (\n  appName: 'site-name.org',\n  productionDomain: 'site-name.org'\n)\n</code></pre> <ul> <li>The Hugo pipeline has several options that you can customize.</li> <li>Remove unnecessary <code>Dockerfile</code>, <code>docker-compose.yml</code>, Kubernetes resource files (e.g. the folder <code>k8s/</code> or <code>src/main/k8s</code>)</li> </ul>"},{"location":"jenkins-pipeline-library/#jenkins-job-changes","title":"Jenkins job changes","text":"<ul> <li>If the website is on GitLab, ensure that the job configuration uses <code>GitLab username/token</code> as Checkout Credentials rather than <code>GitLab username/password</code> in the Branch Sources section of the job configuration.</li> <li>Until done, you may experience build failures with <code>curl: (22) The requested URL returned error: 401</code> in the build logs.</li> </ul>"},{"location":"jenkins-pipeline-library/#nginx-front-lb-changes","title":"Nginx front LB changes","text":"<ul> <li>Once the change above led to a proper preview being deployed, it's time to deploy to production.</li> <li>Merge the change</li> <li>Change the front load balancer configuration, e.g. change <code>proxy_pass http://www-http/;</code> to <code>proxy_pass https://okd-ingress-tls$request_uri;</code> if the previous site was deployed on <code>www-http</code> VMs.</li> <li>If the site was already served from the cluster, you will need to do 2 things, and it will create a short downtime (otherwise, you're done)<ul> <li>Remove all Kubernetes resources associated with the current production and staging app/site (ask <code>releng/infra team</code> to do so)</li> <li>Restart a build for the production branch of the site.</li> </ul> </li> </ul>"},{"location":"jenkins-pipeline-library/#how-to-deploy-a-jamstack-pipeline-in-a-new-namespace","title":"How to deploy a jamstack pipeline in a new namespace?","text":"<ul> <li> <p>Create a new namespace in the target cluster [webmaster]   <code>oc create ns ${NAMESPACE}</code></p> </li> <li> <p>Create the <code>ServiceAccount</code> with permissions by using the project jamstack-sa.</p> </li> </ul>"},{"location":"jenkins-pipeline-library/#how-to-activate-authbasic","title":"How to activate authBasic","text":"<pre><code>hugo(\n  appName: ...,\n  ...\n  deployment: [\n    domain: ...,\n    authBasic: true\n  ]\n)\n</code></pre> <p>Create and set up the secret in Kubernetes: </p> <pre><code>sudo apt-get install apache2-utils\nsudo htpasswd  -bc /tmp/.htpasswd my_user my_passwd\noc create secret generic &lt;appName&gt;-authbasic-secret --from-file=htpasswd=/tmp/.htpasswd -n ${NAMESPACE}\n</code></pre>"},{"location":"jenkins-pipeline-library/#manage-dockerhub-private-registry","title":"Manage Dockerhub private registry","text":"<p>Create a secret based on the project bot and in the project Kubernetes namespace. </p> <pre><code>oc create secret docker-registry --namespace ${NAMESPACE} dockerconfigjson-jamstack \\\n    --docker-server=docker.io \\\n    --docker-username=&lt;bot_name&gt; \\\n    --docker-password=&lt;bot_token&gt; \\\n    --docker-email=&lt;bot_name&gt;@eclipse.org \\ \n</code></pre> <p>Link the secret to the default service account.</p> <pre><code>oc secrets link --namespace ${NAMESPACE} default dockerconfigjson-jamstack --for=pull\n</code></pre>"},{"location":"jenkins-pipeline-library/#how-to-develop-this-preview-library","title":"How to develop this preview library","text":"<p>This library depends on the kube-deploy Jsonnet library hosted at https://gitlab.eclipse.org/eclipsefdn/it/releng/kube-deploy. Dependencies are managed by https://github.com/jsonnet-bundler/jsonnet-bundler. If you need to use a newer version of kube-deploy, you will have to update the <code>jsonnetfile.json</code> file, e.g. <code>resources/org/eclipsefdn/jamstack/deployment/jsonnetfile.json</code>. During pipeline execution, only <code>jb install</code> is called, not <code>jb update</code></p>"},{"location":"jenkins-pipeline-library/#send-notification","title":"Send notification","text":"<p>Allows to send email notifications on build status.</p> <pre><code> post {\n    always {\n      sendNotifications currentBuild\n    }\n  }\n</code></pre>"},{"location":"jenkins-pipeline-library/#how-to-develop","title":"How to develop","text":"<p>The version used by default in the pipeline should be fixed at a given version (preferably via a tag) in the Jenkins configuration. You can test changes in the library by specifying a specific version when loading the library in the Jenkinsfile, e.g. <code>library \"shared-library@main\"</code>. See https://www.jenkins.io/doc/book/pipeline/shared-libraries/#library-versions for details.</p>"},{"location":"jenkins-pipeline-library-sample/","title":"Index","text":"<p>Home / jenkins-pipeline-library-sample</p>"},{"location":"jenkins-pipeline-library-sample/#jenkins-pipeline-library-sample","title":"Jenkins Pipeline Library Sample","text":"<p>This repository is here to help for understanding and leveraging the capabilities of the Jenkins Pipeline Library (<code>jenkins-pipeline-library</code>). Its primary purpose is to provide examples of Jenkinsfiles that demonstrate the usage of the shared library but also to continuously test pipelines. </p> <p>This library is designed to streamline and standardize Jenkins pipeline configurations across projects according to eclipse foundation infrastructure specificities.</p>"},{"location":"jenkins-pipeline-library-sample/#container-build-declarative-pipeline","title":"Container Build / Declarative pipeline","text":""},{"location":"jenkins-pipeline-library-sample/#define-the-agent","title":"Define the Agent","text":"<pre><code>agent {\n    kubernetes {\n        yaml loadOverridableResource(\n            libraryResource: 'org/eclipsefdn/container/agent.yml'\n        )\n    }\n}\n</code></pre> <p>Load this specific agent kubernetes definition: https://gitlab.eclipse.org/eclipsefdn/it/releng/jenkins-pipeline-service/jenkins-pipeline-library/-/blob/main/resources/org/eclipsefdn/container/agent.yml[agent.yml]</p> <p>Can be defined at pipeline or stage level. </p>"},{"location":"jenkins-pipeline-library-sample/#container-build-stage","title":"Container Build Stage","text":"<p>Define a specific stage for building/publishing container to a registry.</p> <pre><code>@Library('releng-pipeline') _\n\npipeline {\n    agent any\n    options {\n        buildDiscarder(logRotator(numToKeepStr: '5'))\n        disableConcurrentBuilds()\n        timeout(time: 90, unit: 'MINUTES')\n    }\n    triggers {\n        cron('H H * * H')\n    }\n    environment {\n        HOME = \"${env.WORKSPACE}\"\n    }\n    stages {\n        stage('build') {\n            agent {\n                kubernetes {\n                    yaml loadOverridableResource(\n                        libraryResource: 'org/eclipsefdn/container/agent.yml'\n                    )\n                }\n            }\n            steps {\n                container('containertools') {\n                    containerBuild(\n                        credentialsId: 'e93ba8f9-59fc-4fe4-a9a7-9a8bd60c17d9',\n                        name: 'docker.io/eclipsecbi/jenkins-pipeline-library-sample',\n                        version: 'latest'\n                    )\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"jenkins-pipeline-library-sample/#container-build-with-groovy-code","title":"Container Build with groovy code","text":"<p>Using directly groovy class from the library to connect to the registry and build/publish to that registry.</p> <pre><code>@Library('releng-pipeline')\n\nimport org.eclipsefdn.jenkins.container.ContainerBuild\n\nContainerBuild containerBuildInstance = new ContainerBuild(this)\n\npipeline {\n    agent any\n    options {\n        buildDiscarder(logRotator(numToKeepStr: '5'))\n        disableConcurrentBuilds()\n        timeout(time: 90, unit: 'MINUTES')\n    }\n    triggers {\n        cron('H H * * H')\n    }\n    environment {\n        HOME = \"${env.WORKSPACE}\"\n    }    \n    stages {\n        stage('build') {\n            agent {\n                kubernetes {\n                    yaml loadOverridableResource(\n                        libraryResource: 'org/eclipsefdn/container/agent.yml'\n                    )\n                }\n            }\n            steps {\n                container('containertools') {\n                    script {\n                        containerBuildInstance.login('e93ba8f9-59fc-4fe4-a9a7-9a8bd60c17d9')\n                        containerBuildInstance.build('docker.io/eclipsecbi/jenkins-pipeline-library-sample', 'latest')\n                    }\n                }\n            }\n        }\n    }\n\n}\n</code></pre>"},{"location":"jenkins-pipeline-library-sample/#use-container-build-pipeline","title":"Use Container Build Pipeline","text":"<p>Define a full pipeline to build and deploy container image to a registry from a project.</p> <p>NOTE: No need to define the agent here. Can be overrided with <code>kubeAgentYmlFile</code> param.</p> <pre><code>@Library('releng-pipeline') _\n\ncontainerBuildPipeline(\n    credentialsId: 'e93ba8f9-59fc-4fe4-a9a7-9a8bd60c17d9',\n    name: 'docker.io/eclipsecbi/jenkins-pipeline-library-sample',\n    version: 'latest'\n)\n</code></pre>"},{"location":"jenkins-pipeline-library-sample/#advanced-configuration","title":"Advanced Configuration","text":"Parameter Default Value Description Required credentialsId null Registry credentials Yes registry docker.io Default Docker registry No name null Image name (default docker.io) Yes version latest Default image version No extraVersions [] Allows to tag image with different versions No aliases null Adding extra aliases to container image No dockerfile Dockerfile Path to the Dockerfile No context . Build context No push true Enable push by default No buildArg '' Additional build arguments No annotation true Enable image annotations by default No latest false Tag container image with latest version No debug false Default debug mode No kubeAgentYmlFile null Kubernetes agent configuration YAML file (only available in containerBuildPipeline) No"},{"location":"jenkins-pipeline-library-sample/#container-build-scripted-pipeline","title":"Container Build / Scripted pipeline","text":"<pre><code>@Library('releng-pipeline') _\n\ntimeout(time:90, unit:'MINUTES') {\n    podTemplate(yaml: loadOverridableResource(libraryResource: 'org/eclipsefdn/container/agent.yml')) {\n        node(POD_LABEL) {\n            properties([\n                buildDiscarder(logRotator(numToKeepStr: '5')),\n                disableConcurrentBuilds(),\n                pipelineTriggers([\n                    cron('H H * * H')\n                ])\n            ])\n\n            checkout scm\n\n            withEnv([\"HOME=${env.WORKSPACE}\"]){\n                stage('build') {\n                    container('containertools') {\n                        containerBuild(\n                            credentialsId: 'e93ba8f9-59fc-4fe4-a9a7-9a8bd60c17d9',\n                            name: 'docker.io/eclipsecbi/jenkins-pipeline-library-sample',\n                            version: 'latest'\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"cbi-dockerfile/","title":"Index","text":"<p>Home / cbi-dockerfile </p>"},{"location":"cbi-dockerfile/#cbi-dockerfiles","title":"CBI dockerfiles","text":"<p>Various Dockerfiles for building stuff @ Eclipse</p>"},{"location":"cbi-dockerfile/#usage","title":"Usage","text":""},{"location":"cbi-dockerfile/#apps","title":"Apps","text":"Docker image Usage / Notes buildpack-deps-ubuntu Based on buildpack-deps image. Used by GitLab CI templats (add link!). See also https://github.com/eclipse-cbi/dockerfiles/pull/37#issue-2205902199 eclipse-temurin--coreutils hugo hugo-extended Used by hugo-eclipsefdn-website-boilerplate. node openssh semeru-ubuntu-coreutils This image is used as the base image for all Jenkins controller docker images. See also https://github.com/eclipse-cbi/jiro-masters/blob/master/jiro.libsonnet#L28."},{"location":"cbi-dockerfile/#gtk3-wm","title":"GTK3-WM","text":"Docker image Usage / Notes debian-gtk3-mutter fedora-gtk3-mutter ubuntu-gtk3-mutter"},{"location":"gitlab-runner-service/","title":"Index","text":"<p>Home / gitlab-runner-service</p>"},{"location":"gitlab-runner-service/#gitlab-runner-service","title":"GitLab Runner Service","text":"<p>As a part of the Common Build Infrastructure (CBI), the GitLab Runner Service aims to assist Eclipse projects in enabling GitLab CI within their projects.</p> <p>It allows the execution of GitLab CI pipelines through runners deployed in the secure and scalable Eclipse Foundation's Kubernetes infrastructure by allocating the necessary resources.</p> <p>Projects hosted on <code>gitlab.eclipse.org</code> can now take advantage of this new service.</p> <p>This service is powered by GRAC! (GitLab Runner As Code), a tool developed by the foundation that enables rapid deployment of this service, simplifying configuration and maintenance.</p> <p>IMPORTANT: The use of this service is currently not extendable to other GitLab instances like <code>gitlab.com</code>, which, beyond the installation and the use of runners, would require additional work from the Eclipse Foundation for managing Eclipse projects on gitlab.com, similar to what exists with GitHub.</p> <ul> <li>GitLab Runner Service<ul> <li>Introduction<ul> <li>What is a GitLab runner?</li> <li>Leverage GitLab runner configuration and maintenance with Grac!</li> </ul> </li> <li>Quick start!<ul> <li>Request a runner</li> <li>First integration</li> </ul> </li> <li>Provided Services<ul> <li>Pipeline template: Basic features</li> <li>Pipeline template: Auto Devops</li> <li>Pipeline template: Full feature</li> <li>Dockerhub publication</li> <li>Nexus: repo.eclipse.org<ul> <li>Repository creation</li> <li>Deploying with maven</li> </ul> </li> <li>Signing tool</li> <li>Supply Chain Security Best Practices</li> <li>Secret management</li> <li>Build container image (BuildKit)</li> <li>Publish to projects-storage (download.eclipse.org)</li> </ul> </li> <li>Request and Allocation Process for Runners (Resource pack)<ul> <li>Allocating Resource Packs</li> <li>Resource pack configuration</li> <li>Push the limits</li> <li>Dedicated Agent</li> <li>Resource Packs Included in Membership</li> <li>Assigning Resource Packs to a Project</li> <li>Understand the impact of Resource Pack on the EF infrastructure</li> </ul> </li> <li>Service Level Objectives (SLO)</li> <li>Support</li> <li>FAQ<ul> <li>Target a specific runner</li> <li>CPU/RAM specific configuration</li> <li>Shared Runner</li> <li>Docker commands in your CI/CD jobs</li> <li>GitLab CI Services</li> </ul> </li> <li>Known issues<ul> <li>The secrets provider can not be found. Check your CI/CD variables and try again.</li> <li>Error validating token: invalid issuer (iss) claim</li> </ul> </li> <li>Security consideration<ul> <li>Mask CI password variables</li> </ul> </li> </ul> </li> </ul>"},{"location":"gitlab-runner-service/#introduction","title":"Introduction","text":""},{"location":"gitlab-runner-service/#what-is-a-gitlab-runner","title":"What is a GitLab runner?","text":"<p>A GitLab Runner is an agent that works with GitLab CI pipeline. It executes tasks (jobs) defined in your project <code>.gitlab-ci.yml</code> file, by automating various stages such as building, testing, and even deploying code. </p> <p>For more information, start with: https://docs.gitlab.com/ee/topics/build_your_application.html </p>"},{"location":"gitlab-runner-service/#leverage-gitlab-runner-configuration-and-maintenance-with-grac","title":"Leverage GitLab runner configuration and maintenance with Grac!","text":"<p>The goal of GRAC! is to make the administration of GitLab runner instances on a Kubernetes based infrastructure bearable. It uses automation, templates and a configuration-as-code approach. GRAC! consist of a set of custom shell scripts and a jsonnet generation.</p> <p>Following the implementation of Jenkins instance as code at Eclipse Foundation with JIRO, and over +250 instances in production, there is a demand from projects to extend this support to GitLab CI.</p> <p>So as a natural extension, GRAC! is born. Under the woods: same approach and technologies.</p> <p>Grac! helps reduce administration overhead for recurring tasks like setting up a new GitLab runner for groups/projects, configuration, allowing resources, handling specific requests, maintaining runners version, etc.</p>"},{"location":"gitlab-runner-service/#quick-start","title":"Quick start!","text":""},{"location":"gitlab-runner-service/#request-a-runner","title":"Request a runner","text":"<p>A runner can be requested by filling a ticket on the helpdesk.  Please ensure your project lead has approved with a +1 the request. </p>"},{"location":"gitlab-runner-service/#first-integration","title":"First integration","text":"<p>Create your first <code>.gitlab-ci.yml</code> file in your project.</p> <pre><code>default:\n  tags:\n    - origin:eclipse # allow to target eclipse runner\n\nstages:\n  - build  \n\nmy_build_job: \n  stage: build\n  script:\n    - echo \"example job 1\"\n</code></pre> <p>You can find many templates here</p>"},{"location":"gitlab-runner-service/#provided-services","title":"Provided Services","text":""},{"location":"gitlab-runner-service/#pipeline-template-basic-features","title":"Pipeline template: Basic features","text":"<p>The Eclipse Foundation provides a set of functionality to address needs related to control, construction, and publication. All of these functionalities are available within the gitlab-ci-templates, project, and can be imported into project pipelines.</p> <p>Here is an overview of the features :  * <code>Compliance</code>: use of libraries REUSE, DCO check tool, and an ECA script validation Eclipse Contributor Agreement * <code>Container image build</code>: build Container image based on the BuildKit Eclipse Foundation infrastructure and publish to a registry like <code>Docker Hub</code> * <code>Quality</code>: control dockerfile writing with hadolint tool</p> <p>NOTE about GitLab Auto DevOps</p>"},{"location":"gitlab-runner-service/#pipeline-template-auto-devops","title":"Pipeline template: Auto Devops","text":"<p>GitLab provides what's called <code>Auto DevOps</code> which is a comprehensive set of predefined CI/CD pipelines and settings, that aim to streamline and automate the software development lifecycle, from code creation to deployment and monitoring. Auto DevOps is designed to simplify the process by providing a preconfigured CI/CD setup.</p> <p>This feature provides a time-saving advantage in terms of configuration and CI pipeline deployment. However, this mode is not entirely suited to the operational constraints of the Eclipse Foundation's infrastructure. That's why the foundation offers some of these functionalities with an equivalent ready-to-use pipeline for our infrastructure.</p> <p>Available features:  * Container Scanning * Sast Analysis * Sast IaC Analysis * Secret Detection * Dependency Scanning</p> <p>All <code>Autodevops</code> features available in a specific pipeline pipeline-autodevops.gitlab-ci.yml</p> <p>For more information, please read the documentation [here] (https://gitlab.eclipse.org/eclipsefdn/it/releng/gitlab-runner-service/gitlab-ci-templates/-/blob/main/README.md)</p> <p>IMPORTANT: Known limitations When using OpenShift to run a GitLab Runner Fleet, we do not support some GitLab features given OpenShift\u2019s security model. Features requiring Docker-in-Docker might not work.</p> <p>For Auto DevOps, the following features are not supported yet: * Auto Code Quality * Auto License Compliance (License scanning of CycloneDX files is supported on OpenShift) * Auto Browser Performance Testing * Auto Build * Operational Container Scanning (Note: Pipeline Container Scanning is supported)</p>"},{"location":"gitlab-runner-service/#pipeline-template-full-feature","title":"Pipeline template: Full feature","text":"<p>We recommend using the full pipeline pipeline.gitlab-ci.yml. Including all features from:  * Compliance * Container management * Auto Devops </p>"},{"location":"gitlab-runner-service/#dockerhub-publication","title":"Dockerhub publication","text":"<p>The Eclipse Foundation owns the Eclipse organization and a couple of other project-specific organizations at https://hub.docker.com. You can ask to get a repository created on one of these organizations. We will set permissions so that committers have write access to this repo (you will need to share your Docker Hub ID with us).</p> <p>You can also ask us to create a project-specific organization. The organization name needs to follow the pattern <code>eclipse-&lt;projectname&gt;</code>.</p>"},{"location":"gitlab-runner-service/#nexus-repoeclipseorg","title":"Nexus: repo.eclipse.org","text":"<p>The Eclipse Nexus instance is hosted at: <code>https://repo.eclipse.org/</code></p> <p>This repository allows Eclipse projects to publish their build artifacts into a centralized repository.</p> <p>Notes: * Snapshots older than <code>7 days</code> are automatically removed weekly, with a minimum of 1 snapshot being retained. * All snapshots for a given GAV are automatically removed 14 days after release. * All snapshots not being not requested in the last 360 days will be automatically removed.</p>"},{"location":"gitlab-runner-service/#repository-creation","title":"Repository creation","text":"<p>File a ticket and specify what project you'd like a Nexus repo for.</p> <p>3 repositories are typically created: * <code>group</code>: <code>https://repo.eclipse.org/content/repositories/&lt;projectname&gt;</code>, which groups both releases and snapshots repositories. * <code>releases</code>: <code>https://repo.eclipse.org/content/repositories/&lt;projectname&gt;-releases/</code>, for publishing releases. Re-deploy is disabled. * <code>snapshots</code>: <code>https://repo.eclipse.org/content/repositories/&lt;projectname&gt;-snapshots/</code>, for publishing snapshots. Re-deploy is enabled.</p>"},{"location":"gitlab-runner-service/#deploying-with-maven","title":"Deploying with maven","text":"<p>Configure <code>distributionManagement</code> in the <code>pom.xml</code>.</p> <pre><code>  ...  \n  &lt;distributionManagement&gt;\n    &lt;repository&gt;\n      &lt;id&gt;repo.eclipse.org&lt;/id&gt;\n      &lt;name&gt;Project Repository - Releases&lt;/name&gt;\n      &lt;url&gt;https://repo.eclipse.org/content/repositories/project-releases/&lt;/url&gt;\n    &lt;/repository&gt;\n    &lt;snapshotRepository&gt;\n      &lt;id&gt;repo.eclipse.org&lt;/id&gt;\n      &lt;name&gt;Project Repository - Snapshots&lt;/name&gt;\n      &lt;url&gt;https://repo.eclipse.org/content/repositories/project-snapshots/&lt;/url&gt;\n    &lt;/snapshotRepository&gt;\n  &lt;/distributionManagement&gt;\n  ....\n</code></pre> <p>Create <code>settings.xml</code> file in your project with this configuration.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;settings&gt;\n  &lt;interactiveMode&gt;false&lt;/interactiveMode&gt;\n  &lt;servers&gt;\n    &lt;server&gt;\n      &lt;id&gt;repo.eclipse.org&lt;/id&gt;\n      &lt;username&gt;${env.REPO_USERNAME}&lt;/username&gt;\n      &lt;password&gt;${env.REPO_PASSWORD}&lt;/password&gt;\n    &lt;/server&gt;\n  &lt;/servers&gt;\n  &lt;mirrors&gt;\n    &lt;mirror&gt;\n      &lt;id&gt;eclipse.maven.central.mirror&lt;/id&gt;\n      &lt;name&gt;Eclipse Central Proxy&lt;/name&gt;\n      &lt;url&gt;https://repo.eclipse.org/content/repositories/maven_central/&lt;/url&gt;\n      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;\n    &lt;/mirror&gt;\n  &lt;/mirrors&gt;\n&lt;/settings&gt;\n</code></pre> <p>Job example to deploy to <code>repo.eclipse.org</code>: </p> <pre><code>repo.eclipse.org:\n  stage: deploy\n  image: maven:3.9.6-eclipse-temurin-21\n  secrets:\n    REPO_USERNAME:\n      vault: &lt;project_id&gt;/repo.eclipse.org/username@cbi\n      file: false\n    REPO_PASSWORD:\n      vault: &lt;project_id&gt;/repo.eclipse.org/password@cbi\n      file: false\n  variables:\n    MAVEN_OPTS: \"-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true\"\n    MAVEN_CLI_OPTS: \"--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true\"\n  script:\n    - mvn $MAVEN_CLI_OPTS deploy -s settings.xml\n</code></pre>"},{"location":"gitlab-runner-service/#signing-tool","title":"Signing tool","text":"<p>see: CBI Signing tool</p>"},{"location":"gitlab-runner-service/#supply-chain-security-best-practices","title":"Supply Chain Security Best Practices","text":"<p>The Eclipse Foundation has authored an Open Source Software Supply Chain Best Practices document. We highly recommend Eclipse OSS projects read, understand and adopt these best practices as part of their role in the Supply Chain.</p> <p>https://github.com/eclipse-cbi/best-practices/blob/main/software-supply-chain/osssc-best-practices.md </p>"},{"location":"gitlab-runner-service/#secret-management","title":"Secret management","text":"<p>Permissions management in GitLab allows all project leads to add the credentials they need from the UI via <code>project-&gt;settings-&gt;CI/CD</code>, <code>Variables</code> entry.</p> <p>In terms of best practices, it is recommended not to forget to mask declared variables. (GitLab CI/CD Variables Masking Documentation)[https://docs.gitlab.com/ee/ci/variables/#mask-a-cicd-variable]</p> <p>Regarding secrets managed by the Eclipse Foundation, GitLab CI relies on an internal vault. All new requests must go through a helpdesk ticket, where the paths for pipeline configuration will be specified.</p> <pre><code>sonar:\n  stage: quality\n  secrets:\n    SONATYPE_USERNAME:\n      vault: modeling.tmf.xtext/oss.sonatype.org/username@cbi\n    SONATYPE_PASSWORD:\n      vault: modeling.tmf.xtext/oss.sonatype.org/password@cbi\n  script:\n    - export USERNAME=$(cat $SONATYPE_USERNAME)\n    - export PASSWORD=$(cat $SONATYPE_PASSWORD)\n</code></pre> <p>or with property <code>file: false</code>, secret values are put directly in the variable.</p> <pre><code>sonar:\n  stage: quality\n  secrets:\n    SONATYPE_USERNAME:\n      vault: modeling.tmf.xtext/oss.sonatype.org/username@cbi\n      file: false\n    SONATYPE_PASSWORD:\n      vault: modeling.tmf.xtext/oss.sonatype.org/password@cbi\n      file: false\n  script:\n    - ...\n</code></pre> <p>NOTE: Variables coming from secrets are automatically masked.</p>"},{"location":"gitlab-runner-service/#build-container-image-buildkit","title":"Build container image (BuildKit)","text":"<p>The Eclipse Foundation hosts a buildkit infrastructure to build safely container images from GitLab CI.</p> <p>You can use the buildkit job template from the gitlab-ci-templates project.</p> <p>e.g:  <pre><code>include:\n  - project: 'eclipsefdn/it/releng/gitlab-runner-service/gitlab-ci-templates'\n    file: '/jobs/buildkit.gitlab-ci.yml'\n\nvariables:\n  CI_REGISTRY_IMAGE: docker.io/eclipsecbi/grac\n\nbuildkit:\n  secrets:\n    CI_REGISTRY_USER:\n      vault: technology.cbi/docker.com/username@cbi\n      file: false\n    CI_REGISTRY_PASSWORD:\n      vault: technology.cbi/docker.com/api-token@cbi\n      file: false\n</code></pre></p> <p>Or use your own implementation inspired by the template file buildkit.gitlab-ci.yml.</p>"},{"location":"gitlab-runner-service/#publish-to-projects-storage-downloadeclipseorg","title":"Publish to projects-storage (download.eclipse.org)","text":"<p>Replace the script section based on what needs to be copied to the Project Storage server.</p> <pre><code>include:\n  - project: 'eclipsefdn/it/releng/gitlab-runner-service/gitlab-ci-templates'\n    file: '/jobs/projects-storage.gitlab-ci.yml'\n\nprojects-storage:\n  extends: .projects-storage\n  stage: deploy\n  secrets:\n    SSH_PRIVATE_KEY:\n      vault: technology.cbi/projects-storage.eclipse.org/id_rsa@cbi\n    SSH_PRIVATE_KEY_PASSPHRASE:\n      vault: technology.cbi/projects-storage.eclipse.org/id_rsa.passphrase@cbi\n    script:\n    - echo \"Copy your artifacts with ssh.\"\n    - ssh \"genie.$EF_SHORT_NAME@$SSH_HOSTNAME\" ls -l \"$DOWNLOADS_PATH\"\n</code></pre>"},{"location":"gitlab-runner-service/#request-and-allocation-process-for-runners-resource-pack","title":"Request and Allocation Process for Runners (Resource pack)","text":""},{"location":"gitlab-runner-service/#allocating-resource-packs","title":"Allocating Resource Packs","text":"<p>Each Eclipse Project has access to one Resources Pack for building by default. </p> <p>For some projects, that may not be enough. Projects sponsored by Eclipse Membership (via Project Lead) have additional Packs, based on membership level. These Packs can be allocated to projects. </p> <ul> <li>Some resources are only available to Enterprise and Strategic members.</li> <li>Enterprise and Strategic members can engage with the Foundation to acquire additional Packs.</li> </ul>"},{"location":"gitlab-runner-service/#resource-pack-configuration","title":"Resource pack configuration","text":"<p>Considering the microservice aspect in the execution of GitLab CI pipelines, where the aim is to have dedicated jobs for different kinds of tasks and thus to have a large number of jobs running in parallel to execute a pipeline.</p> <p>As a consequence, three types of build containers are proposed with the following specifications: </p> Small Medium Large cpu req 250m 1000m 2000m cpu limit 500m 2000m 4000m mem 1024Mi 4096Mi 8192Mi <p>The distribution of concurrency is based on the resource pack specifications as follows:</p> # Resource packs 1 2 3 4 5 10 Concurrent Small 3 5 7 9 11 21 Concurrent Medium 1 2 3 4 5 10 Concurrent Large 0 0 1 1 2 5 max concurrency 4 7 11 14 18 36 <p>NOTE: * 2 basics per resource pack starting from 3 * 1 advance per resource pack * 1 expert every 2 resources pack</p>"},{"location":"gitlab-runner-service/#push-the-limits","title":"Push the limits","text":"<p>The resource pack definition draws a global framework within which one or more project pipelines can run. In cases where a job requires more resources for a pipeline, projects are not limited to the <code>small</code>/<code>medium</code>/<code>large</code> runner templates but can benefit from additional resources within the boundaries of the resource pack.</p> <p>Through the definition of jobs in GitLab Runner, projects have direct control over these customizations with the definition of variables such as <code>KUBERNETES_MEMORY_LIMIT_OVERWRITE_MAX_ALLOWED</code>, <code>KUBERNETES_MEMORY_REQUEST_OVERWRITE_MAX_ALLOWED</code>, ...</p> <p>For more information: Overwrite container resources</p> # Max Overwrite Allowed/Resource packs 1 2 3 KUBERNETES_CPU_REQUEST_OVERWRITE_MAX_ALLOWED 1750m 3250m 6750m KUBERNETES_CPU_LIMIT_OVERWRITE_MAX_ALLOWED 3500m 6500m 13500m KUBERNETES_MEMORY_REQUEST_OVERWRITE_MAX_ALLOWED 7168Mi 13312Mi 27648Mi KUBERNETES_MEMORY_LIMIT_OVERWRITE_MAX_ALLOWED 7168Mi 13312Mi 27648Mi <p>Calculation example: </p> <p>Memory request calculation with one resource pack 3 small + 1 medium = 3 * 1024 + 1 * 4096 = 7168Mi   </p> <p>NOTE: Resources are not only constrained by the resource pack definition but also by the resources available in the node cluster. If the definition is set too high, a job may struggle to find an available node for execution.</p> <p>IMPORTANT: We encourage projects to take advantage of concurrent build jobs. Therefore, as a best practice, it's recommended to reduce code size by breaking it down into smaller modules and pieces, allowing for parallel execution rather than relying on a monolithic codebase.</p>"},{"location":"gitlab-runner-service/#dedicated-agent","title":"Dedicated Agent","text":"Agent type Linux/Windows/macOS (VMs) vCPU 4 RAM 8GiB Disk 100GB"},{"location":"gitlab-runner-service/#resource-packs-included-in-membership","title":"Resource Packs Included in Membership","text":"Associate / Contributing  [\u20ac0, \u20ac15k] Associate / Contributing  [\u20ac15k, \u20ac20k] Associate / Contributing  [\u20ac25k, \u20ac50k] Strategic    [\u20ac50k, \u20ac100k]\u00a0 Strategic  [\u20ac100k, \u20ac500k] Resource packs 1 2 3 5 10 Dedicated Agents 0 0 0 0 2"},{"location":"gitlab-runner-service/#assigning-resource-packs-to-a-project","title":"Assigning Resource Packs to a Project","text":"<p>Resource Packs are assigned by Member organizations of the Eclipse Foundation to Eclipse Projects they sponsor. Packs are assigned as a whole to a single project (i.e., can\u2019t split Packs across multiple projects). A member can assign several packs to a single project.</p> <p>Important: When asking for packs for your project, please ensure that project leads and your organization representatives are copied to the GitLab ticket. We require approval from project leads but assume immediate approval from organization representatives. We strongly advise you to seek authorization internally from your organization before opening such a request though. Should conflictual requests arise, the organization representatives will be asked to actively arbitrate.</p> <p>To assign a pack to a project, please file a ticket</p> <p>By default, resource packs are assigned build agents. In some cases, it may be required to scale up the Jenkins master. In such a case, we can allocate resource packs to the master instance. Sponsored Projects</p> <p>A public API of sponsored projects is accessible. Organizations can check how many Resource Packs they have left for project sponsoring on the membership portal. </p>"},{"location":"gitlab-runner-service/#understand-the-impact-of-resource-pack-on-the-ef-infrastructure","title":"Understand the impact of Resource Pack on the EF infrastructure","text":"<p>Pods and containers definition: </p> <pre><code>@startuml kubernetes\n\nfooter Kubernetes Plant-UML\nscale max 1024 width\n\nskinparam nodesep 10\nskinparam ranksep 10\n\n\n' Kubernetes\n!define KubernetesPuml https://raw.githubusercontent.com/dcasati/kubernetes-PlantUML/master/dist\n\n!includeurl KubernetesPuml/kubernetes_Common.puml\n!includeurl KubernetesPuml/kubernetes_Context.puml\n!includeurl KubernetesPuml/kubernetes_Simplified.puml\n\n!includeurl KubernetesPuml/OSS/KubernetesSvc.puml\n!includeurl KubernetesPuml/OSS/KubernetesIng.puml\n!includeurl KubernetesPuml/OSS/KubernetesPod.puml\n!includeurl KubernetesPuml/OSS/KubernetesRs.puml\n!includeurl KubernetesPuml/OSS/KubernetesDeploy.puml\n!includeurl KubernetesPuml/OSS/KubernetesHpa.puml\n\n!includeurl KubernetesPuml/OSS/KubernetesQuota.puml\n!includeurl KubernetesPuml/OSS/KubernetesLimits.puml\n!includeurl KubernetesPuml/OSS/KubernetesNode.puml\n\n!includeurl KubernetesPuml/kubernetes_Container.puml\n\n' Kubernetes Components\n\nNamespace_Boundary(podns, \"Pod/Container Definitions\") {\n    Container_Boundary(runnerContainerBoundaries, \"Pod Runner\") {\n        Container(runnerContainer, \"Runner Container\", \"\", \"cpu: 100/200,\\n mem: 128/256mi\")\n    }\n\n    Container_Boundary(smallContainerBoundaries, \"Small Pod Runner\") {\n        Container(smallBuildContainer, \"Build Container\", \"\", \"cpu: 250/500,\\n mem: 1Gi\")\n        Container(smallHelperContainer, \"Helper Container\", \"\", \"cpu: 100/150,\\n mem: 1Gi\")\n        Container(smallInitContainer, \"Init Container\", \"temporary\", \"cpu: 100/150,\\n mem: 128mi\")\n    }\n\n    Container_Boundary(mediumContainerBoundaries, \"Medium Pod Runner\") {\n        Container(mediumBuildContainer, \"Build Container\", \"\", \"cpu: 1000/2000,\\n mem: 4Gi\")\n        Container(mediumHelperContainer, \"Helper Container\", \"\", \"cpu: 100/150,\\n mem: 1Gi\")\n        Container(mediumInitContainer, \"Init Container\", \"temporary\", \"cpu: 100/150,\\n mem: 128m\")\n    }\n\n    Container_Boundary(largeContainerBoundaries, \"Large Pod Runner\") {\n        Container(largeBuildContainer, \"Build Container\", \"\", \"cpu: 2000/4000,\\n mem: 8Gi\")\n        Container(largeHelperContainer, \"Helper Container\", \"\", \"cpu: 100/150,\\n mem: 1Gi\")\n        Container(largeInitContainer, \"Init Container\", \"temporary\", \"cpu: 100/150,\\n mem: 128mi\")\n    }\n\n    Container_Boundary(serviceContainerBoundaries, \"Service Pod Runner\") {\n        Container(serviceContainer, \"Service Container\", \"\", \"cpu: 500/1000,\\n mem: 1/2Gi\")\n    }\n}\n\n\n@enduml\n</code></pre> <p>A concrete example of competing project pipelines running in the EF infrastructure: </p> <pre><code>@startuml kubernetes\n\nfooter Kubernetes Plant-UML\nscale max 1024 width\n\nskinparam nodesep 10\nskinparam ranksep 10\n\n\n' Kubernetes\n!define KubernetesPuml https://raw.githubusercontent.com/dcasati/kubernetes-PlantUML/master/dist\n\n!includeurl KubernetesPuml/kubernetes_Common.puml\n!includeurl KubernetesPuml/kubernetes_Context.puml\n!includeurl KubernetesPuml/kubernetes_Simplified.puml\n\n!includeurl KubernetesPuml/OSS/KubernetesSvc.puml\n!includeurl KubernetesPuml/OSS/KubernetesIng.puml\n!includeurl KubernetesPuml/OSS/KubernetesPod.puml\n!includeurl KubernetesPuml/OSS/KubernetesRs.puml\n!includeurl KubernetesPuml/OSS/KubernetesDeploy.puml\n!includeurl KubernetesPuml/OSS/KubernetesHpa.puml\n\n!includeurl KubernetesPuml/OSS/KubernetesQuota.puml\n!includeurl KubernetesPuml/OSS/KubernetesLimits.puml\n!includeurl KubernetesPuml/OSS/KubernetesNode.puml\n\n!includeurl KubernetesPuml/kubernetes_Container.puml\n\n' Kubernetes Components\nCluster_Boundary(cluster, \"Eclipse Foundation Kubernetes Cluster\") {\n\n    Namespace_Boundary(nodens, \"Nodes infrastructure\") {\n        KubernetesNode(node1, \"Node 1\", \"\")\n        KubernetesNode(node2, \"Node 2\", \"\")\n        KubernetesNode(node3, \"Node ...\", \"\")\n    }\n\n    Namespace_Boundary(ns, \"Project Runner Namespace\") {\n\n        Container_Boundary(RunnerBoundaries, \"Runner context\") {\n            KubernetesPod(runner, \"Gitlab Runner\", \"\")\n\n            Container_Boundary(concurrentBoundaries, \"Concurrent Jobs\") {\n                KubernetesPod(JobMedium, \"Job1 Medium Runner \\nBuild:\\n cpu: 1000/2000,\\n mem: 4Gi\" , \"\")\n                KubernetesPod(JobSmall1, \"Job2 Small Runner \\nBuild:\\n cpu: 250/500,\\n mem: 1Gi\", \"\")\n                KubernetesPod(JobSmall2, \"Job3 Small Runner \\nBuild:\\n cpu: 250/500,\\n mem: 1Gi\", \"\")\n                KubernetesPod(JobSmall3, \"Job4 Small Runner \\nBuild:\\n cpu: 250/500,\\n mem: 1Gi\", \"\")\n            }\n            KubernetesPod(JobMediumPodService1, \"Job1 Service\\n cpu: 500/1000,\\n mem: 1Gi/2Gi\", \"\")\n        }\n        KubernetesLimits(limit,\"Resource Pack 1\", \" \")\n\n        Container_Boundary(ResourceBoundaries, \"Resource limits\") {\n\n            KubernetesQuota(quota,\"Resource Quotas \\ncpu:2750/5100, \\nmem: 12032/12288, \\npods: 8\", \" \")\n        }\n    }\n\n    Namespace_Boundary(nsOther, \"Other Project Runner Namespace\") {\n\n        Container_Boundary(RunnerBoundariesOther, \"Runner context\") {\n            KubernetesPod(runnerOther, \"Gitlab Runner\", \"\")\n            KubernetesPod(JobSmall1Other, \"Job1 Small Runner \\nBuild: cpu: 250/500,\\n mem: 1Gi\", \"\")\n        }\n        KubernetesLimits(limitOther,\"Resource Pack...\", \" \")\n        Container_Boundary(ResourceBoundariesOther, \"Resource limits\") {\n            KubernetesQuota(quotaOther,\"Resource Quotas...\", \" \")\n        }\n    }\n}\n\nRel(runner, JobMedium, \" \")\nRel(runner, JobSmall1, \" \")\nRel(runner, JobSmall2, \" \")\nRel(runner, JobSmall3, \" \")\n\nRel_Left(JobMedium, JobMediumPodService1, \" \")\n\nRel(JobMedium, node1, \" \")\nRel(JobSmall1, node2, \" \")\nRel(JobSmall2, node2, \" \")\nRel(JobSmall3, node3, \" \")\n\nRel(runnerOther, JobSmall1Other, \" \")\nRel(JobSmall1Other, node1, \" \")\n\nRel_Down(limit, ResourceBoundaries, \"Define Namespace Quotas\")\nRel_Right(limit, RunnerBoundaries, \"Define Runner Quotas\")\n\nRel_Down(limitOther, ResourceBoundariesOther, \"Define Namespace Quotas\")\nRel_Right(limitOther, RunnerBoundariesOther, \"Define Runner Quotas\")\n\n@enduml\n</code></pre>"},{"location":"gitlab-runner-service/#service-level-objectives-slo","title":"Service Level Objectives (SLO)","text":"<p>Most CBI services are Tier 2 - Best Effort, which means they are expected to be available at all times, and rapid restoration can be expected in the event of an outage. Eclipse Strategic Members can contact the Webmaster in certain cases of off-hours support.</p> <p>Please see IT Service Level Objectives for more information on the Eclipse Foundation IT Services SLO.</p>"},{"location":"gitlab-runner-service/#support","title":"Support","text":"<ul> <li>HelpDesk</li> <li>IT chat service room: #eclipsefdn.it:matrix.eclipse.org</li> <li>GitLab CI templates</li> <li>Grac!</li> </ul>"},{"location":"gitlab-runner-service/#faq","title":"FAQ","text":""},{"location":"gitlab-runner-service/#target-a-specific-runner","title":"Target a specific runner","text":"<p>Q: How can I target a specific runner for my GitLab CI/CD job? A: To target a specific runner for your job, you can use runner tags. Runner tags are labels assigned to runners that help you select the right runner for specific jobs. Each Eclipse foundation GitLab runner comes with a set of default labels.  I.e:  * <code>prefix:ef-grac</code>  * <code>cluster:okd-c1</code>  * <code>type:groups</code>  * <code>instance:technologie.cbi.grac</code> * <code>ctx:releng-group</code>  * <code>executor:kubernetes</code>  * <code>kubenamespace:ef-grac-technologie-cbi-grac</code> * <code>concurrent:8</code>  * <code>outputLimit:100000</code>  * <code>image:ubuntu:20.04</code>  * <code>cpuLimit:8000</code>  * <code>cpuRequest:1000</code>  * <code>memoryLimit:16384</code>  * <code>memoryRequest:2048</code>  * <code>serviceCpuLimit:8000</code>  * <code>origin:eclipse</code></p> <p>Q: How do I assign extra tags to runners?</p> <p>A: Tags can be assigned to runners during runner registration, e.g: my-tag, java, docker, etc., based on the capabilities or characteristics of the runner. This can be requested at any time, at runner creation or later by simply filling out a request in the helpdesk support.</p> <p>NOTE: by default, runners are set up to run untagged jobs.</p> <p>Q: How do I use runner tags in my CI/CD job configuration?</p> <p>A: In your <code>.gitlab-ci.yml</code> file, you can use the <code>tags</code> keyword at the top-level description for pipeline definition or in the job configuration to specify the runner tags that the pipeline or the job should target.</p> <p>At pipeline level:</p> <pre><code>default:\n  tags:\n    - origin:eclipse\n</code></pre> <p>At job level: </p> <pre><code>my_job:\n  tags:\n    - origin:eclipse\n  script:\n    - echo \"Running on a Eclipse foundation runner\"\n</code></pre> <p>Q: What if no runner matches the specified tags?</p> <p>A: If no runner matches the specified tags, the job won't run. Make sure that your runner tags correspond to the capabilities of your runners and the requirements of your jobs.</p> <p>Q: Is there a default runner if no tags are specified?</p> <p>A: GitLab CI will automatically select a runner that doesn't have any tags assigned if you don't specify tags for a job. However, for more control and specificity, it's recommended to use runner tags, especially the <code>origin:eclipse</code> tag.</p>"},{"location":"gitlab-runner-service/#cpuram-specific-configuration","title":"CPU/RAM specific configuration","text":"<p>Q: Is it possible to create a pod with more CPU/RAM allocation?</p> <p>A: Specific runners can be configured for projects with more CPU/RAM allocation.  WARNING: It's important to keep in mind that this kind of runner will be executed in a context constrained by the resource pack allocated to the project. This means that if the CPU or the RAM used by all executors at the same time exceeds the limit set by resource quotas can cause a build failure.</p> <p>see: Overwrite container resources</p> <p>e.g: </p> <pre><code>build:\n  stage: build\n  variables:\n    KUBERNETES_CPU_REQUEST: \"3\"\n    KUBERNETES_CPU_LIMIT: \"5\"\n    KUBERNETES_MEMORY_REQUEST: \"6Gi\"\n    KUBERNETES_MEMORY_LIMIT: \"6Gi\"\n</code></pre>"},{"location":"gitlab-runner-service/#shared-runner","title":"Shared Runner","text":"<p>Q: Can I use shared runners for my project?</p> <p>A: No, it is not possible to use shared runners in the Eclipse Foundation's infrastructure. This is because shared runners do not align with the resource pack per project approach and the sponsorship model that the Eclipse Foundation follows. Each project at the Eclipse Foundation has its resource pack and associated resources, making shared runners incompatible with this model. </p>"},{"location":"gitlab-runner-service/#docker-commands-in-your-cicd-jobs","title":"Docker commands in your CI/CD jobs","text":"<p>Q: Is the Docker's command enabled in the infrastructure?</p> <p>A: No, Docker's privilege mode is <code>not enabled</code> in the infrastructure, therefore, <code>docker</code> client can't be directly called in a build, even <code>docker compose</code>, ...</p> <p>This decision aligns with the best practices recommended with our OKD infrastructure. The Eclipse Foundation's infrastructure prioritizes security and follows industry-standard guidelines to ensure a safe and controlled environment. </p>"},{"location":"gitlab-runner-service/#gitlab-ci-services","title":"GitLab CI Services","text":"<p>Q: Can I use GitLab CI services in my pipeline?</p> <p>A: GitLab CI services are not recommended for the moment. This is not factored into the resource pack calculation and their usage can potentially lead to build failure. </p>"},{"location":"gitlab-runner-service/#known-issues","title":"Known issues","text":""},{"location":"gitlab-runner-service/#the-secrets-provider-can-not-be-found-check-your-cicd-variables-and-try-again","title":"The secrets provider can not be found. Check your CI/CD variables and try again.","text":"<p>For a Gitlab runner to interact with the secret manager, several CI variables must be configured. By default, these variables are set at the GitLab group level during GitLab runner initialization with <code>Grac!</code>'s scripts: <code>VAULT_SERVER_URL</code>, <code>VAULT_AUTH_ROLE</code>, <code>VAULT_AUTH_PATH</code>.</p> <p>If they are missing, please create an issue. helpdesk </p>"},{"location":"gitlab-runner-service/#error-validating-token-invalid-issuer-iss-claim","title":"Error validating token: invalid issuer (iss) claim","text":"<pre><code>ERROR: Job failed (system failure): resolving secrets: initializing Vault service: preparing authenticated client: authenticating Vault client: writing to Vault: api error: status code 400: error validating token: invalid issuer (iss) claim\n</code></pre> <p>This error message means that the secret audience is not configured. </p> <p>Two ways of fixing this. </p> <ol> <li>Import <code>secrets.gitlab-ci.yml</code></li> </ol> <pre><code>include:\n  - project: \"eclipsefdn/it/releng/gitlab-runner-service/gitlab-ci-templates\"\n    file: \"jobs/secrets.gitlab-ci.yml\"\n\nbuild:\n  stage: build\n  extends: \n    - .secrets\n</code></pre> <ol> <li>Configure <code>id_tokens</code>: </li> </ol> <pre><code>build:\n  stage: build\n  id_tokens:\n      VAULT_ID_TOKEN:\n        aud: https://gitlab.eclipse.org\n</code></pre>"},{"location":"gitlab-runner-service/#security-consideration","title":"Security consideration","text":""},{"location":"gitlab-runner-service/#mask-ci-password-variables","title":"Mask CI password variables","text":"<p>To ensure the protection of sensitive data like credentials, it's imperative to never forget to mask passwords managed by the project itself. </p> <p>https://docs.gitlab.com/ee/ci/variables/#mask-a-cicd-variable</p> <p>WARN: Common errors with mask password:</p> <pre><code>This value cannot be masked because it contains the following characters: &amp;\n</code></pre>"},{"location":"gitlab-runner-template/","title":"Index","text":"<p>Home / gitlab-runner-template</p>"},{"location":"gitlab-runner-template/#gitlab-ci-templates","title":"GitLab CI templates","text":"<p><code>gitlab-ci-templates</code> is a repository of GitLab CI template jobs and pipelines that aims to help Eclipse Foundation Open Sources projects get started quickly in the Eclipse Infrastructure OKD and with all features provided by GitLab.</p> <ul> <li>GitLab CI templates<ul> <li>Getting started!</li> <li>Template job lists</li> <li>Template auth job lists<ul> <li>How to include a template job in your pipeline</li> <li>EF specific variables</li> </ul> </li> <li>Secrets manager<ul> <li>Build Docker image with buildkit</li> <li>Publish to projects-storage (download.eclipse.org)</li> </ul> </li> <li>Pipeline lists<ul> <li>Pipeline compliance</li> <li>Pipeline autodevops</li> <li>Pipeline container</li> <li>Pipeline \"Full\"</li> </ul> </li> <li>Workflow</li> <li>Quick tips!<ul> <li>How to disable a specific job?</li> <li>How to allow a job to fail and not the pipeline?</li> <li>How to target a docker file in a directory?</li> <li>How to only build docker image with latest tag?</li> <li>How to apply my own tag strategy for docker image?</li> </ul> </li> <li>Other use cases<ul> <li>Maven integration with repo.eclipse.org</li> <li>Gitlab Services Integration</li> </ul> </li> </ul> </li> </ul>"},{"location":"gitlab-runner-template/#getting-started","title":"Getting started!","text":"<p>Create a <code>.gitlab-ci.yml</code> file in your project root directory. </p> <p>ex: </p> <pre><code>include:\n  - project: 'eclipsefdn/it/releng/gitlab-runner-service/gitlab-ci-templates'\n    file: pipeline.gitlab-ci.yml'\n</code></pre> <p>And push to the GitLab repository.</p> <p>NOTE: You must first activate <code>CI/CD</code> feature in your project. <code>Settings</code> -&gt; <code>General</code>, select section <code>Visibility, project features, permissions</code>, Check <code>CI/CD</code>, and Save.</p>"},{"location":"gitlab-runner-template/#template-job-lists","title":"Template job lists","text":"Job Description <code>workflow</code> Define a workflow for your pipeline <code>dco</code> DCO check tool that certify that a contributor has the right to submit their code according to the Developer Certificate of Origin (DCO) <code>hadolint</code> Control docker image quality with hadolint tool <code>reuse</code> Check REUSE compliance <code>buildkit</code> Build docker image with buildkit and crane tools and specific instance dedicated in EF infrastructure (SERVICE_ADDRESS) <code>eca</code> Check Eclipse Contributor Agreement  from commits in Merge Request <code>ssh</code> Configure ssh client in a <code>before_script</code> section <code>git</code> Configure git client in a <code>before_script</code> section <code>download-eclipse.org</code> Push artifacts to <code>download.eclipse.org</code> just override <code>script</code> section <code>repo-eclipse-org</code> Push artifacts to <code>repo.eclipse.org</code> just override <code>script</code> section <code>renovate</code> Automated dependency updates. Renovate <code>matrix</code> Get credentials for matrix bot"},{"location":"gitlab-runner-template/#template-auth-job-lists","title":"Template auth job lists","text":"Job Description Inherit <code>ef-buildkit</code> Configure buildkit client with <code>docker.com</code> credentials <code>ef-buildkit-docker.com</code> <code>ef-buildkit-docker.com</code> Configure buildkit client with <code>docker.com</code> credentials <code>buildkit</code> <code>ef-buildkit-quay.com</code> Configure buildkit client with <code>quay.io</code> credentials <code>buildkit</code> <code>ef-git</code> Configure git client with gitlab credentials <code>ef-git-gitlab</code> <code>ef-git-gitlab</code> Configure git client with gitlab credentials <code>git</code> <code>ef-git-github</code> Configure git client with github credentials <code>git</code> <code>ef-download-eclipse.org</code> Configure job with <code>projects-storage</code> credentials <code>download-eclipse.org</code> <code>ef-repo-eclipse-org</code> Configure job with <code>repo.eclipse.org</code> credentials <code>repo-eclipse-org</code> <code>ef-build-develocity</code> Configure job with <code>develocity.eclipse.org</code> credentials <code>ef-build-develocity</code> <code>ef-build-develocity-maven</code> Configure job with <code>develocity.eclipse.org</code> credentials and build with maven <code>ef-build-develocity</code> <code>ef-build-develocity-gradle</code> Configure job with <code>develocity.eclipse.org</code> credentials and build with gradle <code>ef-build-develocity</code> <code>ef-renovate</code> Configure job with <code>renovate</code> credentials"},{"location":"gitlab-runner-template/#how-to-include-a-template-job-in-your-pipeline","title":"How to include a template job in your pipeline","text":"<pre><code>include:\n  - project: 'eclipsefdn/it/releng/gitlab-runner-service/gitlab-ci-templates'\n    file: '/jobs/dco.gitlab-ci.yml'\n\nstages:\n  - compliance\n</code></pre>"},{"location":"gitlab-runner-template/#ef-specific-variables","title":"EF specific variables","text":"<p>These variables are injected at runner creation: * <code>EF_PROJECT_ID</code> * <code>EF_SHORT_NAME</code></p> <p>e.g: with eclipse cbi project * EF_PROJECT_ID=<code>techonology.cbi</code> * EF_SHORT_NAME=<code>cbi</code></p> <p><code>EF_PROJECT_ID</code> can be used in the path when using secrets from the <code>secretsmanager</code>. </p>"},{"location":"gitlab-runner-template/#secrets-manager","title":"Secrets manager","text":"<p>GitLab CI can use the internal secrets manager to fetch secrets for publishing docker images, accessing internal services, ...</p> <p>e.g:</p> <pre><code>  secrets:\n    REPO_USERNAME:\n      vault: $EF_PROJECT_ID/repo.eclipse.org/username@cbi\n      file: false\n    REPO_PASSWORD:\n      vault: $EF_PROJECT_ID/repo.eclipse.org/password@cbi\n      file: false\n</code></pre> <p>NOTE: If you are not sure of the path, don't hesitate to ask a support</p>"},{"location":"gitlab-runner-template/#build-docker-image-with-buildkit","title":"Build Docker image with buildkit","text":"<p>Buildkit job needs <code>CI_REGISTRY_IMAGE</code> variable definition.</p> <p>CI Auth variables must be set a least in project CI/CD variable configuration with a mask or in a vault:  * <code>CI_REGISTRY_USER</code>: docker registry username * <code>CI_REGISTRY_PASSWORD</code>: docker registry token</p> <p>The registry by default is <code>docker.io</code>, but can be overriden with <code>CI_REGISTRY</code>.</p> <pre><code>include:\n  - project: 'eclipsefdn/it/releng/gitlab-runner-service/gitlab-ci-templates'\n    file: '/jobs/buildkit.gitlab-ci.yml'\n\nvariables:  \n  CI_REGISTRY_IMAGE: docker.io/eclipsecbi/gitlab-ci-templates\n</code></pre> <p>Full example with secrets:</p> <p>e.g: </p> <pre><code>include:\n  - project: 'eclipsefdn/it/releng/gitlab-runner-service/gitlab-ci-templates'\n    file: '/jobs/buildkit.gitlab-ci.yml'\n\nvariables:\n  CI_REGISTRY_IMAGE: docker.io/eclipsecbi/gitlab-ci-templates\n\nbuildkit:\n  secrets:\n    CI_REGISTRY_USER:\n      vault: $EF_PROJECT_ID/docker.com/username@cbi\n      file: false\n    CI_REGISTRY_PASSWORD:\n      vault: $EF_PROJECT_ID/docker.com/api-token@cbi\n      file: false\n</code></pre> <p>IMPORTANT: Buildkit needs a build docker image infrastructure, address of this infrastructure can be changed with <code>BUILDKIT_ADDRESS</code>. </p>"},{"location":"gitlab-runner-template/#publish-to-projects-storage-downloadeclipseorg","title":"Publish to projects-storage (download.eclipse.org)","text":"<p>Replace the script section based on what needs to be copied to the Project Storage server.</p> <pre><code>include:\n  - project: 'eclipsefdn/it/releng/gitlab-runner-service/gitlab-ci-templates'\n    file: '/jobs/projects-storage.gitlab-ci.yml'\n\nprojects-storage:\n  extends: .projects-storage\n  stage: deploy\n  secrets:\n    SSH_PRIVATE_KEY:\n      vault: $EF_PROJECT_ID/projects-storage.eclipse.org/id_rsa@cbi\n    SSH_PRIVATE_KEY_PASSPHRASE:\n      vault: $EF_PROJECT_ID/projects-storage.eclipse.org/id_rsa.passphrase@cbi\n  script:\n    - echo \"Copy your artifacts with ssh.\"\n    - ssh \"genie.$EF_SHORT_NAME@$SSH_HOSTNAME\" ls -l \"$DOWNLOADS_PATH\"\n</code></pre>"},{"location":"gitlab-runner-template/#pipeline-lists","title":"Pipeline lists","text":""},{"location":"gitlab-runner-template/#pipeline-compliance","title":"Pipeline compliance","text":"<p>Pipeline compliance groups all compliance jobs in one include file.</p> <pre><code>include:\n  - project: 'eclipsefdn/it/releng/gitlab-runner-service/gitlab-ci-templates'\n    file: pipeline-compliance.gitlab-ci.yml'\n</code></pre>"},{"location":"gitlab-runner-template/#pipeline-autodevops","title":"Pipeline autodevops","text":"<p>Pipeline <code>autodevops</code> includes only features from GitLab working in the Eclipse Foundation Infrastructure.</p> <pre><code>include:\n  - project: 'eclipsefdn/it/releng/gitlab-runner-service/gitlab-ci-templates'\n    file: pipeline-autodevops.gitlab-ci.yml'\n</code></pre> <p>These are all <code>autodevops</code> features included:</p> <pre><code>  - template: Jobs/Container-Scanning.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Jobs/Container-Scanning.gitlab-ci.yml\n  - template: Jobs/SAST.gitlab-ci.yml # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/SAST-IaC.gitlab-ci.yml\n  - template: Jobs/SAST-IaC.latest.gitlab-ci.yml # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/SAST-IaC.gitlab-ci.yml\n  - template: Jobs/Secret-Detection.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/Secret-Detection.gitlab-ci.yml\n  - template: Jobs/Dependency-Scanning.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/Dependency-Scanning.gitlab-ci.yml\n</code></pre> <p>The following features are not supported yet due to Openshift security policies: * Auto Code Quality * Auto License Compliance (License scanning of CycloneDX files is supported on OpenShift) * Auto Browser Performance Testing * Auto Build * Operational Container Scanning (Note: Pipeline Container Scanning is supported)</p>"},{"location":"gitlab-runner-template/#pipeline-container","title":"Pipeline container","text":"<p>Pipeline container groups all related container tools jobs in one file, including: * <code>buildkit</code> job * <code>hadolint</code> job * <code>autodevops</code> pipeline</p> <pre><code>include:\n  - project: 'eclipsefdn/it/releng/gitlab-runner-service/gitlab-ci-templates'\n    file: pipeline-container.gitlab-ci.yml'\n</code></pre>"},{"location":"gitlab-runner-template/#pipeline-full","title":"Pipeline \"Full\"","text":"<p>This pipeline includes previous pipelines (<code>pipeline-compliance</code>, <code>pipeline-autodevops</code>), and adds container build feature and hadolint tool analysis. </p> <pre><code>include:\n  - project: 'eclipsefdn/it/releng/gitlab-runner-service/gitlab-ci-templates'\n    file: pipeline.gitlab-ci.yml'\n\nvariables:  \n  CI_REGISTRY_IMAGE: docker.io/eclipsecbi/gitlab-ci-templates\n</code></pre> <p>IMPORTANT: <code>CI_REGISTRY_IMAGE</code>, docker registry auth variables are mandatory on this pipeline.</p>"},{"location":"gitlab-runner-template/#workflow","title":"Workflow","text":"<p>Default workflow provided is as follows:</p> <pre><code>workflow:\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"merge_request_event\" || $CI_PIPELINE_SOURCE == \"web\" || $CI_PIPELINE_SOURCE == \"parent_pipeline\"\n    - if: $CI_MERGE_REQUEST_IID\n    - if: $CI_COMMIT_TAG\n    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH\n</code></pre> <p>This one can be easily overriden in <code>.gitlab-ci.yml</code> project file.</p>"},{"location":"gitlab-runner-template/#quick-tips","title":"Quick tips!","text":""},{"location":"gitlab-runner-template/#how-to-disable-a-specific-job","title":"How to disable a specific job?","text":"<pre><code>buildkit:\n  rules:\n    - when: never\n</code></pre>"},{"location":"gitlab-runner-template/#how-to-allow-a-job-to-fail-and-not-the-pipeline","title":"How to allow a job to fail and not the pipeline?","text":"<pre><code>dco:\n  allow_failure: true\n</code></pre>"},{"location":"gitlab-runner-template/#how-to-target-a-docker-file-in-a-directory","title":"How to target a docker file in a directory?","text":"<pre><code>buildkit:\n  variables:\n    BUILD_CONTEXT: test/docker\n    BUILD_CONTEXT_CHANGE: test/docker\n\nhadolint:\n  variables:\n    DOCKERFILE_CONTEXT: test/docker\n    DOCKERFILE_CONTEXT_CHANGE: test/docker\n</code></pre>"},{"location":"gitlab-runner-template/#how-to-only-build-docker-image-with-latest-tag","title":"How to only build docker image with latest tag?","text":"<pre><code>buildkit:\n  variables:\n    IMAGE_TAG: latest\n</code></pre>"},{"location":"gitlab-runner-template/#how-to-apply-my-own-tag-strategy-for-docker-image","title":"How to apply my own tag strategy for docker image?","text":"<p>By default, the buildkit job proposes a tagging strategy for docker image, but this one can be overriden in <code>before_script</code> section by project.</p> <pre><code>buildkit:\n  before_script:\n    - echo 'define your tag stategy'\n</code></pre> <p>WARNING: if you use <code>autodevops</code> you must apply this new strategy to Container Scanning</p> <pre><code>container_scanning:\n  variables: \n    GIT_STRATEGY: fetch\n    BUILD_CONTEXT_CHANGE: \"\" #\u00a0https://gitlab.com/gitlab-org/gitlab/-/issues/216906\n  before_script:\n    - echo 'define your tag stategy'\n    - export CS_REGISTRY_USER=$CI_REGISTRY_USER\n    - export CS_REGISTRY_PASSWORD=$CI_REGISTRY_PASSWORD\n    - export CS_IMAGE=\"$CI_REGISTRY_IMAGE${CONTAINER_NAME:+\"/$CONTAINER_NAME\"}\":\"$IMAGE_TAG\"\n</code></pre>"},{"location":"gitlab-runner-template/#other-use-cases","title":"Other use cases","text":""},{"location":"gitlab-runner-template/#maven-integration-with-repoeclipseorg","title":"Maven integration with <code>repo.eclipse.org</code>","text":"<p>Configure <code>distributionManagement</code> in the <code>pom.xml</code>.</p> <pre><code>  ...  \n  &lt;distributionManagement&gt;\n    &lt;repository&gt;\n      &lt;id&gt;repo.eclipse.org&lt;/id&gt;\n      &lt;name&gt;Project Repository - Releases&lt;/name&gt;\n      &lt;url&gt;https://repo.eclipse.org/content/repositories/project-releases/&lt;/url&gt;\n    &lt;/repository&gt;\n    &lt;snapshotRepository&gt;\n      &lt;id&gt;repo.eclipse.org&lt;/id&gt;\n      &lt;name&gt;Project Repository - Snapshots&lt;/name&gt;\n      &lt;url&gt;https://repo.eclipse.org/content/repositories/project-snapshots/&lt;/url&gt;\n    &lt;/snapshotRepository&gt;\n  &lt;/distributionManagement&gt;\n  ....\n</code></pre> <p>Create <code>settings.xml</code> file in your project with this configuration.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;settings&gt;\n  &lt;interactiveMode&gt;false&lt;/interactiveMode&gt;\n  &lt;servers&gt;\n    &lt;server&gt;\n      &lt;id&gt;repo.eclipse.org&lt;/id&gt;\n      &lt;username&gt;${env.REPO_USERNAME}&lt;/username&gt;\n      &lt;password&gt;${env.REPO_PASSWORD}&lt;/password&gt;\n    &lt;/server&gt;\n  &lt;/servers&gt;\n  &lt;mirrors&gt;\n    &lt;mirror&gt;\n      &lt;id&gt;eclipse.maven.central.mirror&lt;/id&gt;\n      &lt;name&gt;Eclipse Central Proxy&lt;/name&gt;\n      &lt;url&gt;https://repo.eclipse.org/content/repositories/maven_central/&lt;/url&gt;\n      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;\n    &lt;/mirror&gt;\n  &lt;/mirrors&gt;\n&lt;/settings&gt;\n</code></pre> <p>Job example to deploy to <code>repo.eclipse.org</code>: </p> <pre><code>repo.eclipse.org:\n  stage: deploy\n  image: maven:3.9.6-eclipse-temurin-21\n  secrets:\n    REPO_USERNAME:\n      vault: &lt;project_id&gt;/repo.eclipse.org/username@cbi\n      file: false\n    REPO_PASSWORD:\n      vault: &lt;project_id&gt;/repo.eclipse.org/password@cbi\n      file: false\n  variables:\n    MAVEN_OPTS: \"-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true\"\n    MAVEN_CLI_OPTS: \"--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true\"\n  script:\n    - mvn $MAVEN_CLI_OPTS deploy -s settings.xml\n</code></pre>"},{"location":"gitlab-runner-template/#gitlab-services-integration","title":"Gitlab Services Integration","text":"<p>For security reasons, most official images from dockerhub don't work with the foundation's okd cluster. Which is the case with the <code>postgresql</code> docker image. But alternatives exist. </p> <p>Do not hesitate to ask for support in such cases.</p> <pre><code>variables:  \n  POSTGRESQL_DATABASE: smo\n  POSTGRESQL_USER: custom_user\n  POSTGRESQL_PASSWORD: custom_pass\n\ngitlab-services-integration:\n  stage: integration\n  needs: []\n  services:\n    - name: quay.io/sclorg/postgresql-15-c9s\n      alias: Postgres\n  image: Postgres\n  script:\n    - export PGPASSWORD=$POSTGRES_PASSWORD\n    - psql -h \"postgres\" -U \"$POSTGRESQL_USER\" -d \"$POSTGRESQL_DATABASE\" -c \"SELECT 'OK' AS status;\"\n</code></pre> <p>NOTE: Variables to pass to the services have to be defined at the pipeline level.</p>"},{"location":"gitlab-runner-as-code/","title":"Index","text":"<p>Home / gitlab-runner-as-code</p>"},{"location":"gitlab-runner-as-code/#gitlab-runner-as-code-grac","title":"GitLab Runner As Code - GRAC!","text":"<p><code>GRAC!</code> is an infrastructure as code for GitLab runner in Kubernetes infrastructure dedicated to projects hosted by the Eclipse Foundation at gitlab.eclipse.org.</p> <ul> <li>GitLab Runner As Code - GRAC!<ul> <li>What is GRAC?</li> <li>Why GRAC?</li> <li>Before starting<ul> <li>Instance notion</li> <li>Kubernetes Context</li> </ul> </li> <li>CBI Configuration</li> <li>Kube configuration</li> <li>Build locally docker image</li> <li>Execute command</li> <li>Tasks</li> <li>Tasks *-all</li> <li>Create a new instance</li> <li>Add clean-up pod with ttl<ul> <li>use a namespace RegEx</li> </ul> </li> </ul> </li> </ul>"},{"location":"gitlab-runner-as-code/#what-is-grac","title":"What is GRAC?","text":"<p>The goal of <code>GRAC!</code> is to make the administration of hundreds of GitLab runner instances on a Kubernetes-based infrastructure bearable. It uses automation, templates and a configuration-as-code approach. <code>GRAC!</code> consist of a set of custom shell scripts and a jsonnet generation. It relies also on the <code>Docker CLI</code>, <code>OpenShift CLI</code>.</p>"},{"location":"gitlab-runner-as-code/#why-grac","title":"Why GRAC?","text":"<p>With the implementation of Jenkins instance as code at Eclipse Foundation under the name of JIRO, and over +250 instances in production, Gitlab Continuous Integration has been requested by projects to be supported.  So as a natural extension, <code>GRAC!</code> is Born, under the Woods: same approach and technologies.</p> <p><code>GRAC!</code> allows a lower administration overhead for recurring tasks like setting up a new GitLab runner for projects/groups, configuring, allowing resources, handling specific requests, etc.</p>"},{"location":"gitlab-runner-as-code/#before-starting","title":"Before starting","text":""},{"location":"gitlab-runner-as-code/#instance-notion","title":"Instance notion","text":"<p>Each group or project in GitLab is linked to an instance reference. At the foundation, it refers to project_id.  But this can be customized very easily depending on the organization you want to set up.</p> <p>Group: https://gitlab.eclipse.org/eclipsefdn/it/releng * Instance: <code>technology.cbi</code></p> <p>Configuration is generated in the directory: <code>./instances/technology.cbi</code></p>"},{"location":"gitlab-runner-as-code/#kubernetes-context","title":"Kubernetes Context","text":"<p>All commands in GRAC depend on kube <code>current-context</code>.</p> <p>Before launching a command, it is recommended to verify the current target: <code>kubectl config current-context</code> or <code>kubectx</code></p> <p>All generation files will be attached to this context</p>"},{"location":"gitlab-runner-as-code/#cbi-configuration","title":"CBI Configuration","text":"<p>Create file <code>~/.cbi/config</code></p> <pre><code>{\n  \"kubeconfig\": {\n    \"path\": \"~/.kube/config\",\n  },\n  \"gitlab.com-token\": \"XXXXXXXXXXXXXX\",\n  \"gitlab.eclipse.org-token\": \"XXXXXXXXXXXXXX\",\n}\n</code></pre> <p><code>kubeconfig</code>: allow to configure the path to the Kubernetes configuration file.  Default: <code>~/.kube/config</code></p> <p><code>&lt;gitlab_address&gt;-token</code>: Personal Acces Token from GitLab. Need to be created from the profile UI in GitLab. e.g: PAT.</p>"},{"location":"gitlab-runner-as-code/#kube-configuration","title":"Kube configuration","text":"<pre><code>apiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: ...\n    server: https://api.xxxx.org\n  name: &lt;cluster-ctx&gt;\ncontexts:\n- context:\n    cluster: &lt;cluster-ctx&gt;\n    namespace: grac-...\n    user: sebastien.heurtematte@eclipse-foundation.org/xxxx\n  name: &lt;cluster-ctx&gt;\ncurrent-context: &lt;cluster-ctx&gt;\nkind: Config\npreferences: {}\nusers:\n- name: sebastien.heurtematte@eclipse-foundation.org/xxxxx\n  user:\n    token: sha256~XXXXXXX\n</code></pre>"},{"location":"gitlab-runner-as-code/#build-locally-docker-image","title":"Build locally docker image","text":"<pre><code>docker build . --tag eclipsecbi/grac \ndocker pull eclipsecbi/grac \n</code></pre>"},{"location":"gitlab-runner-as-code/#execute-command","title":"Execute command","text":"<pre><code>./grac.sh deploy technology.cbi\n</code></pre> <p>or directly with the Docker CLI:</p> <pre><code>docker run \\\n    -v \"${PWD}\":/app \\\n    -v ~/.cbi/config:/home/grac/.cbi/config \\\n    -v ~/.kube/config:/home/grac/.kube/config \\\n    -v /etc/timezone:/etc/timezone:ro \\\n    -v /etc/localtime:/etc/localtime:ro \\\n    --env GITLAB_URL=https://gitlab.com\n    --env PERSONAL_ACCESS_TOKEN=XXXXXXXXXXX\n    --env KUBECONFIG=/home/grac/.kube/config \\\n    --network host \\\n    eclipsecbi/grac make deploy instance=technology.cbi\n</code></pre> <p>IMPORTANT: All command executed depends on Kubernetes context. </p> <p>Find the current context: <code>kubectl config current-context</code> or <code>kubectx</code></p>"},{"location":"gitlab-runner-as-code/#tasks","title":"Tasks","text":"Task Description <code>create</code> Create directory for the project/group under ./instance with by default <code>config.jsonnet</code> and <code>grac.jsonnet</code> configure <code>config</code> Generation of all jsonnet file under <code>./instance/project_name/env_name/target</code> <code>k8s</code> Generation of configmap which is based on templating processor, <code>genconfig</code> is also execute with this task <code>registration</code> Gitlab Runner registration and store token kubernetes secrets <code>deploy</code> Deploy all configuration to kubernetes cluster and restart deployment after a reconfiguration <code>restart</code> Restart all deployment from kubernetes cluster <code>delete-k8s</code> Delete all kubernetes cluster configuration files <code>delete-runner</code> Delete all runner from gitlab <code>delete</code> Delete all runner and k8s configuration file <code>init</code> Generate an instance and deploy <code>replay</code> Delete, regenerate an instance and redeploy <code>reload</code> Regenerate an instance and redeploy <code>clean</code> Delete target directory generate by <code>k8s</code> or <code>genconfig</code> tasks <code>resume</code> Print runner infos from all deployment <p>Made with: <code>makefile2dot | dot -Tpng &gt; makefile.png</code></p>"},{"location":"gitlab-runner-as-code/#tasks-all","title":"Tasks <code>*-all</code>","text":"<p>All tasks defined have an equivalent with <code>-all</code> suffix.  Ex: <code>create-all</code>, <code>deploy-all</code>, <code>k8s-all</code>, ... </p> <p>They apply to all instances of the directory <code>./instances</code>.  And depends on the Kubernetes context. </p>"},{"location":"gitlab-runner-as-code/#create-a-new-instance","title":"Create a new instance","text":"<pre><code>./grac.sh create oniro.oniro-core\n</code></pre> <p>NOTE: <code>oniro.oniro-core</code> must match an existing namespace in GitLab like <code>https://gitlab.org/oniro/oniro-core</code></p> <p>Custom creation when an instance name is not the same as the GitLab project namespace.</p> <pre><code>./grac.sh create foundation-internal.infra -a eclipsefdn/...\n</code></pre> <p>Change project definition if necessary:</p> <pre><code>./instances/oniro.oniro-core/&lt;cluster-ctx&gt;/grac.jsonnet\n</code></pre> <p>And generate k8s files and deploy to the cluster</p> <pre><code>./grac.sh init oniro.oniro-core\n</code></pre>"},{"location":"gitlab-runner-as-code/#add-clean-up-pod-with-ttl","title":"Add clean-up pod with ttl","text":"<p>Kubernetes configuration file <code>pod-cleanup-example.yml</code> allows defining policy around GitLab runner pod especially if they stay stuck for any reason. It's based on this project gitlab-runner-pod-cleanup. </p> <p>Annotation should be added to the pod: </p> <p>grac configuration <code>podAnnotations</code> to add:  <pre><code>  kubernetes+:{\n    podAnnotations+:{\n      'pod-cleanup.gitlab.com/ttl':'6h',\n    },\n  },\n</code></pre></p>"},{"location":"gitlab-runner-as-code/#use-a-namespace-regex","title":"use a namespace RegEx","text":"<p>A RegEx can be defined to apply the policy on a specific namespace:</p> <p>ex:</p> <pre><code>  - name: POD_CLEANUP_KUBERNETES_NAMESPACES\n    value: grac* \n</code></pre> <p>grac configuration <code>prefix</code> to add: </p> <pre><code>  project+: {\n    prefix: 'grac',\n</code></pre>"},{"location":"chat-service-provisionner/readme/","title":"Readme","text":"<p>Home / chat-service-provisionner / readme</p>"},{"location":"chat-service-provisionner/readme/#chat-service-provisioner","title":"Chat Service Provisioner","text":"<p>Chat Service Provisioner is a tool tailored to simplify the process of creating rooms and spaces within Chat Service Matrix Synapse instance. Using of Infrastructure as Code (IaC) concept, this project gives the ability to define spaces and rooms programmatically.</p> <ul> <li>Chat Service Provisioner</li> <li>How It Works?</li> <li>Getting started!<ul> <li>Project file definition</li> <li>Generate secrets</li> <li>Install jsonnet dependencies</li> <li>Deploy with apply script</li> <li>Deploy manually<ul> <li>tanka</li> <li>Cronjob</li> </ul> </li> </ul> </li> </ul>"},{"location":"chat-service-provisionner/readme/#how-it-works","title":"How It Works?","text":"<p>Define Configuration: Use a yaml syntax to define room or space configuration in code.</p> <p>Run Provisioner: Execute the Synapse Space Provisioner as a kubernetes cronjob and providing the configuration file as input in a kubernetes config file.</p> <p>Automated Creation: The provisioner interacts with Chat Service Matrix Synapse instance's API to create rooms and spaces based on the defined configuration.</p>"},{"location":"chat-service-provisionner/readme/#getting-started","title":"Getting started!","text":""},{"location":"chat-service-provisionner/readme/#project-file-definition","title":"Project file definition","text":"<p>All room and space definitions are stored in the <code>project.yaml</code> file.</p> <p>For documentation reference, check this readme.md For project room definition, see this section: project room space definition</p> <p>Example of adding a new room:</p> <pre><code>  - tools.mylyn:\n      rooms:\n      - alias: '#tools.mylyn'\n        name: 'Eclipse Mylyn'\n        parent: *defaultProjectSpace\n        topic: |\n          Eclipse Mylyn is a Task-Focused Interface for Eclipse that reduces information overload and makes multi-tasking easy. The mission of the Mylyn project is to provide: 1. Frameworks and APIs for Eclipse-based task and Application Lifecycle Management (ALM) 2. Exemplary tools for task-focused programming within the Eclipse IDE. 3. Reference implementations for open source ALM tools used by the Eclipse community and for open ALM standards such as OSLC The project is structured into sub-projects, each representing an ALM category and providing common APIs for specific ALM tools. The primary consumers of this project are ALM ISVs and other adopters of Eclipse ALM frameworks.  Please see the project charter for more details. Mylyn makes tasks a first class part of Eclipse, and integrates rich and offline editing for repositories such as Bugzilla, Trac, and JIRA. Once your tasks are integrated, Mylyn monitors your work activity to identify information relevant to the task-at-hand, and uses this task context to focus the Eclipse UI on the interesting information, hide the uninteresting, and automatically find what's related. This puts the information you need to get work done at your fingertips and improves productivity by reducing searching, scrolling, and navigation. By making task context explicit Mylyn also facilitates multitasking, planning, reusing past efforts, and sharing expertise.\n</code></pre> <p>Example of adding a space:</p> <pre><code>  - oniro:\n      rooms:\n      - alias: '#oniro'\n        type: space\n        name: 'Oniro'\n        topic: |\n          The mission of the Eclipse Oniro is the design, development, production and maintenance of an open source software platform, having an operating system, an ADK/SDK, standard APIs and basic applications, like UI, as core elements, targeting different industries thanks to a next-generation multi-kernel architecture, that simplifies the existing landscape of complex systems, and its deployment across a wide range of devices.\n</code></pre>"},{"location":"chat-service-provisionner/readme/#generate-secrets","title":"Generate secrets","text":"<p>Execute:  <code>secrets/gen-secrets.sh {env}</code> (env = dev/prod/staging)</p> <p>It will store secrets under: <code>/environments/chat-matrix/{env}/.secrets</code></p>"},{"location":"chat-service-provisionner/readme/#install-jsonnet-dependencies","title":"Install jsonnet dependencies","text":"<p>Requires <code>jsonnet-bundler</code> to be installed: https://github.com/jsonnet-bundler/jsonnet-bundler</p> <pre><code>jb install\n</code></pre>"},{"location":"chat-service-provisionner/readme/#deploy-with-apply-script","title":"Deploy with apply script","text":"<pre><code>./apply.sh dev\n</code></pre>"},{"location":"chat-service-provisionner/readme/#deploy-manually","title":"Deploy manually","text":""},{"location":"chat-service-provisionner/readme/#tanka","title":"tanka","text":"<p>see doc installation tanka: <code>https://tanka.dev/install</code></p> <pre><code>tk show \"environments/chat-matrix/dev\"\ntk apply \"environments/chat-matrix/dev\"\n</code></pre> <p>If you want to check the Kubernetes file before applying, try exporting with this command:</p> <pre><code>tk show --dangerous-allow-redirect \"environments/chat-matrix/dev\" &gt; ./k8s/chat-matrix-dev.yaml\n</code></pre>"},{"location":"chat-service-provisionner/readme/#cronjob","title":"Cronjob","text":"<pre><code>JOB_NAME=\"${USERNAME}-manual-run-001\"\nNAMESPACE=\"chat-matrix-prod\"\nkubectl delete job ${JOB_NAME} -n ${NAMESPACE}\nkubectl create job -n ${NAMESPACE} --from=cronjob/chatservice-sync ${JOB_NAME}\n</code></pre> <p>Accept all room invitations and replay the job. This will allow the script to add permissions for users. </p>"},{"location":"chat-service-synapse/readme/","title":"Readme","text":"<p>Home / chat-service-synapse / readme</p>"},{"location":"chat-service-synapse/readme/#eclipse-foundation-synapse-matrix-server-implementation","title":"Eclipse Foundation - Synapse Matrix Server Implementation","text":"<ul> <li>Eclipse Foundation - Synapse Matrix Server Implementation</li> <li>Architecture</li> <li>Getting started locally<ul> <li>prerequisite</li> <li>Local start</li> <li>Local federated start</li> </ul> </li> <li>Installation and Configuration in kubernetes cluster<ul> <li>Kubernetes architecture</li> <li>Install modules</li> <li>New Environment</li> <li>Generate secrets<ul> <li>media repo signing key generation</li> </ul> </li> </ul> </li> <li>Manual configuration<ul> <li>Policy bot<ul> <li>Configure rate limit</li> </ul> </li> <li>Moderation with Mjolnir/pantalaimon<ul> <li>Mjolnir default ACL</li> <li>Room moderation configuration</li> <li>Activate protections</li> <li>LocalAbuseReports</li> </ul> </li> <li>Slack integration (Appservice-Slack)<ul> <li>Configure slack App</li> <li>Create matrix admin room</li> <li>invite slack bot in room</li> <li>slack bot rate limit</li> <li>Set the right admin room</li> </ul> </li> <li>Link a chat service room to a slack channel</li> </ul> </li> <li>Devops<ul> <li>Generate secrets</li> <li>tanka</li> <li>Apply.sh script</li> <li>kubectl status</li> </ul> </li> <li>Upgrade<ul> <li>Synapse<ul> <li>Check changelog</li> <li>Upgrade version</li> </ul> </li> <li>Matrix-media-repo<ul> <li>Check changelog</li> <li>Upgrade version</li> </ul> </li> <li>Synapse-admin<ul> <li>Check changelog</li> <li>Upgrade version</li> </ul> </li> </ul> </li> <li>Maintenance<ul> <li>Compress state</li> </ul> </li> <li>Admin<ul> <li>Experimental feature</li> </ul> </li> <li>Development<ul> <li>register new user</li> <li>list users</li> <li>set admin</li> <li>change rate limit</li> <li>Reuse lint</li> <li>Docker-compose render</li> <li>k8s render</li> </ul> </li> <li>Usefull links</li> </ul>"},{"location":"chat-service-synapse/readme/#architecture","title":"Architecture","text":"<p>Architecture diagram is create with structurizr, dsl is available here.</p> <pre><code>graph LR\n  linkStyle default fill:#ffffff\n\n  subgraph diagram [Chat Service - Containers]\n    style diagram fill:#ffffff,stroke:#ffffff\n\n    1[\"&lt;div style='font-weight: bold'&gt;Eclipse Account User&lt;/div&gt;&lt;div style='font-size: 70%; margin-top: 0px'&gt;[Person]&lt;/div&gt;&lt;div style='font-size: 80%; margin-top:10px'&gt;An Eclipse Foundation account&lt;br /&gt;user.&lt;/div&gt;\"]\n    style 1 fill:#08427b,stroke:#052e56,color:#ffffff\n    2[\"&lt;div style='font-weight: bold'&gt;User Federated&lt;/div&gt;&lt;div style='font-size: 70%; margin-top: 0px'&gt;[Person]&lt;/div&gt;&lt;div style='font-size: 80%; margin-top:10px'&gt;An Matrix federated account&lt;br /&gt;user.&lt;/div&gt;\"]\n    style 2 fill:#08427b,stroke:#052e56,color:#ffffff\n\n    subgraph 4 [Chat Service]\n      style 4 fill:#ffffff,stroke:#0b4884,color:#0b4884\n\n      10[\"&lt;div style='font-weight: bold'&gt;Synapse Database&lt;/div&gt;&lt;div style='font-size: 70%; margin-top: 0px'&gt;[Container]&lt;/div&gt;\"]\n      style 10 fill:#dddddd,stroke:#9a9a9a,color:#000000\n      12[\"&lt;div style='font-weight: bold'&gt;Elementweb&lt;/div&gt;&lt;div style='font-size: 70%; margin-top: 0px'&gt;[Container]&lt;/div&gt;&lt;div style='font-size: 80%; margin-top:10px'&gt;chat.eclipse.org&lt;/div&gt;\"]\n      style 12 fill:#dddddd,stroke:#9a9a9a,color:#000000\n      14[\"&lt;div style='font-weight: bold'&gt;Matrix-Media-Repo&lt;/div&gt;&lt;div style='font-size: 70%; margin-top: 0px'&gt;[Container]&lt;/div&gt;&lt;div style='font-size: 80%; margin-top:10px'&gt;matrix-media-repo.eclipsecontent.org&lt;/div&gt;\"]\n      style 14 fill:#dddddd,stroke:#9a9a9a,color:#000000\n      18[\"&lt;div style='font-weight: bold'&gt;Matrix-Media-Repo Database&lt;/div&gt;&lt;div style='font-size: 70%; margin-top: 0px'&gt;[Container]&lt;/div&gt;\"]\n      style 18 fill:#dddddd,stroke:#9a9a9a,color:#000000\n      20[\"&lt;div style='font-weight: bold'&gt;appservice-policies&lt;/div&gt;&lt;div style='font-size: 70%; margin-top: 0px'&gt;[Container]&lt;/div&gt;&lt;div style='font-size: 80%; margin-top:10px'&gt;matrix-media-repo.eclipsecontent.org&lt;/div&gt;\"]\n      style 20 fill:#dddddd,stroke:#9a9a9a,color:#000000\n      23[\"&lt;div style='font-weight: bold'&gt;bot-mjolnir&lt;/div&gt;&lt;div style='font-size: 70%; margin-top: 0px'&gt;[Container]&lt;/div&gt;&lt;div style='font-size: 80%; margin-top:10px'&gt;Moderation bot&lt;/div&gt;\"]\n      style 23 fill:#dddddd,stroke:#9a9a9a,color:#000000\n      25[\"&lt;div style='font-weight: bold'&gt;pantalaimon&lt;/div&gt;&lt;div style='font-size: 70%; margin-top: 0px'&gt;[Container]&lt;/div&gt;&lt;div style='font-size: 80%; margin-top:10px'&gt;Proxy for encrypt rooms&lt;/div&gt;\"]\n      style 25 fill:#dddddd,stroke:#9a9a9a,color:#000000\n      5[\"&lt;div style='font-weight: bold'&gt;Synapse&lt;/div&gt;&lt;div style='font-size: 70%; margin-top: 0px'&gt;[Container]&lt;/div&gt;&lt;div style='font-size: 80%; margin-top:10px'&gt;matrix.eclipse.org&lt;/div&gt;\"]\n      style 5 fill:#dddddd,stroke:#9a9a9a,color:#000000\n    end\n\n    5-. \"&lt;div&gt;Reads from and writes to&lt;/div&gt;&lt;div style='font-size: 70%'&gt;&lt;/div&gt;\" .-&gt;10\n    1-. \"&lt;div&gt;Uses&lt;/div&gt;&lt;div style='font-size: 70%'&gt;&lt;/div&gt;\" .-&gt;12\n    5-. \"&lt;div&gt;Uses&lt;/div&gt;&lt;div style='font-size: 70%'&gt;&lt;/div&gt;\" .-&gt;14\n    1-. \"&lt;div&gt;Uses&lt;/div&gt;&lt;div style='font-size: 70%'&gt;&lt;/div&gt;\" .-&gt;14\n    2-. \"&lt;div&gt;Uses&lt;/div&gt;&lt;div style='font-size: 70%'&gt;&lt;/div&gt;\" .-&gt;14\n    14-. \"&lt;div&gt;Reads from and writes to&lt;/div&gt;&lt;div style='font-size: 70%'&gt;&lt;/div&gt;\" .-&gt;18\n    5-. \"&lt;div&gt;Uses&lt;/div&gt;&lt;div style='font-size: 70%'&gt;&lt;/div&gt;\" .-&gt;20\n    20-. \"&lt;div&gt;Uses&lt;/div&gt;&lt;div style='font-size: 70%'&gt;&lt;/div&gt;\" .-&gt;5\n    23-. \"&lt;div&gt;Uses&lt;/div&gt;&lt;div style='font-size: 70%'&gt;&lt;/div&gt;\" .-&gt;5\n    23-. \"&lt;div&gt;Uses&lt;/div&gt;&lt;div style='font-size: 70%'&gt;&lt;/div&gt;\" .-&gt;25\n    25-. \"&lt;div&gt;Uses&lt;/div&gt;&lt;div style='font-size: 70%'&gt;&lt;/div&gt;\" .-&gt;5\n    1-. \"&lt;div&gt;Uses&lt;/div&gt;&lt;div style='font-size: 70%'&gt;&lt;/div&gt;\" .-&gt;5\n    2-. \"&lt;div&gt;Uses&lt;/div&gt;&lt;div style='font-size: 70%'&gt;&lt;/div&gt;\" .-&gt;5\n  end\n</code></pre>"},{"location":"chat-service-synapse/readme/#getting-started-locally","title":"Getting started locally","text":""},{"location":"chat-service-synapse/readme/#prerequisite","title":"prerequisite","text":"<p>Set local domain name in <code>/etc/hosts</code>:</p> <pre><code>127.0.0.1       matrix-local.eclipse.org chat-local.eclipse.org matrix-media-repo-local.eclipse.org synapse-admin-local.eclipse.org \n127.0.0.1       matrix-federated.eclipse.org chat-federated.eclipse.org matrix-media-repo-federated.eclipse.org synapse-admin-federated.eclipse.org\n</code></pre>"},{"location":"chat-service-synapse/readme/#local-start","title":"Local start","text":"<pre><code>docker-compose build\ndocker-compose up -d\n</code></pre> <p>Do the same on <code>ef-element-web</code> project and start docker-compose up.</p> <p>Browser access: <code>https://chat-local.eclipse.org:8443</code></p> <p></p>"},{"location":"chat-service-synapse/readme/#local-federated-start","title":"Local federated start","text":"<p><pre><code>docker-compose -f docker-compose-federated.yaml build\ndocker-compose -f docker-compose-federated.yaml up -d\n</code></pre> Matrix access: <code>https://matrix-local.eclipse.org</code> Matrix access: <code>https://matrix-federated.eclipse.org</code></p> <p>Do the same on <code>ef-element-web</code> project and start docker-compose up.</p> <p>Browser access: <code>https://chat-local.eclipse.org:8443</code> Browser access: <code>https://chat-federated.eclipse.org:8443</code></p> <p></p>"},{"location":"chat-service-synapse/readme/#installation-and-configuration-in-kubernetes-cluster","title":"Installation and Configuration in kubernetes cluster","text":""},{"location":"chat-service-synapse/readme/#kubernetes-architecture","title":"Kubernetes architecture","text":""},{"location":"chat-service-synapse/readme/#install-modules","title":"Install modules","text":"<p>Install <code>jsonnet-bundler</code>: https://github.com/jsonnet-bundler/jsonnet-bundler</p> <pre><code>jb install\n</code></pre>"},{"location":"chat-service-synapse/readme/#new-environment","title":"New Environment","text":"<pre><code>tk env add environments/chat-matrix/{env} --namespace=chat-matrix-{env}\n</code></pre> <p>Add this property in <code>spec.json</code>:</p> <pre><code>{\n  ...\n\"apiServer\": \"https://my_cluster\",\n\"injectLabels\": true\n ...\n}\n</code></pre> <p><code>main.jsonnet</code> template: </p> <pre><code>(import 'chat-matrix/main.libsonnet') +\n(import '.secrets/secrets.jsonnet') +\n{\n  _config+:: {\n    local config = self,\n    environment: '{env}',\n    synapse+: {\n      replicas: 1,\n      logconfig+: {\n        root+: {\n          level: 'DEBUG',\n        },\n        loggers+: {\n          synapse: {\n            level: 'INFO',\n          },\n        },\n      },\n      homeserver+: {        \n      },\n    },\n    appservicePolicies+:{\n      appservice+: {\n        logLevel: \"DEBUG\",\n        skipMessage: \"true\"\n      },\n    },\n    matrixMediaRepo+: {\n      mediarepo+: {     \n        repo+: {\n          logLevel: \"INFO\",  \n        },\n      },\n    },\n    clamav+:{\n    },\n    synapseAdmin+: {\n    },\n    botMjolnir+: {\n      mjolnir+: {\n          logLevel: \"INFO\",  \n      },\n    },\n    pantalaimon+: {      \n      \"pantalaimon.conf\"+: {\n        sections+: {\n          Default+: {\n              LogLevel: \"Debug\",\n          }\n        }\n      }\n    }\n  },\n}\n</code></pre>"},{"location":"chat-service-synapse/readme/#generate-secrets","title":"Generate secrets","text":"<pre><code>docker run -it  -e SYNAPSE_SERVER_NAME=matrix-dev.eclipse.org -e SYNAPSE_REPORT_STATS=no -v $PWD/config/gen:/data docker.io/eclipsecbi/synapse:latest generate\n</code></pre> <p>Get secrets: <code>registration_shared_secret</code>, <code>macaroon_secret_key</code>, <code>form_secret</code> from files <code>./config/gen/homeserver.yaml</code>  And store the signing keys from file: <code>./config/gen/matrix-dev.eclipse.org.signing.key</code></p> <p>For all other passwords, use your own password generator like <code>pwgen</code>.</p> <p>Store passwords in pass with this organization:</p> <pre><code>IT/services/chat-service\n\u251c\u2500\u2500 appservice\n\u2502   \u251c\u2500\u2500 {env}\n\u2502   \u2502   \u251c\u2500\u2500 asToken\n\u2502   \u2502   \u2514\u2500\u2500 hsToken\n\u251c\u2500\u2500 bot-mjolnir\n\u2502   \u251c\u2500\u2500 {env}\n\u2502   \u2502   \u2514\u2500\u2500 password\n\u251c\u2500\u2500 matrix-appservice-slack\n\u2502   \u2514\u2500\u2500 {env}\n\u2502   \u2502   \u251c\u2500\u2500 database_password\n\u2502   \u2502   \u251c\u2500\u2500 asToken\n\u2502   \u2502   \u2514\u2500\u2500 hsToken\n\u251c\u2500\u2500 matrix-media-repo\n\u2502   \u251c\u2500\u2500 {env}\n\u2502   \u2502   \u251c\u2500\u2500 database_password\n\u2502   \u2502   \u251c\u2500\u2500 mmr.signing.key\n\u2502   \u2502   \u2514\u2500\u2500 synapse.mmr.signing.key\n\u251c\u2500\u2500 matrix-media-repo-keyserver\n\u2502   \u251c\u2500\u2500 {env}\n|   \u2502\u00a0\u00a0 \u251c\u2500\u2500 form_secret\n|   \u2502\u00a0\u00a0 \u251c\u2500\u2500 macaroon_secret_key\n|   \u2502\u00a0\u00a0 \u251c\u2500\u2500 merged.signing.key\n|   \u2502\u00a0\u00a0 \u251c\u2500\u2500 registration_shared_secret\n|   \u2502\u00a0\u00a0 \u2514\u2500\u2500 signing.key\n\u2514\u2500\u2500 synapse\n    \u251c\u2500\u2500 {env}\n    \u2502   \u251c\u2500\u2500 database_password\n    \u2502   \u251c\u2500\u2500 form_secret\n    \u2502   \u251c\u2500\u2500 macaroon_secret_key\n    \u2502   \u251c\u2500\u2500 oidc_providers_oauth2_eclipse_secret\n    \u2502   \u251c\u2500\u2500 registration_shared_secret\n    \u2502   \u251c\u2500\u2500 signing.key\n    \u2502   \u2514\u2500\u2500 merged.signing.key\n</code></pre> <p>i.e: <code>pass add IT/services/chat-service/matrix-media-repo/staging-community/database_password</code></p> <p>Execute:  <code>./gen-secrets.sh</code></p> <p>It will store secrets under: <code>/environments/chat-matrix/&lt;env&gt;/.secrets</code></p>"},{"location":"chat-service-synapse/readme/#media-repo-signing-key-generation","title":"media repo signing key generation","text":"<p>https://docs.t2bot.io/matrix-media-repo/v1.3.5/installation/signing-key/</p> <p>Download binaries here:  * https://github.com/t2bot/matrix-media-repo/releases/download/v1.3.7/generate_signing_key-linux-x64 * https://github.com/t2bot/matrix-media-repo/releases/download/v1.3.7/combine_signing_keys-linux-x64</p> <p>For each env generate a new signing.key </p> <pre><code>./signing.sh &lt;env&gt;\n</code></pre> <p>Check keys: <code>https://matrix-&lt;env&gt;.eclipse.org/_matrix/key/v2/server</code> Check keys: <code>https://matrix-media-repo-&lt;env&gt;.eclipse.org/_matrix/key/v2/server</code></p>"},{"location":"chat-service-synapse/readme/#manual-configuration","title":"Manual configuration","text":""},{"location":"chat-service-synapse/readme/#policy-bot","title":"Policy bot","text":""},{"location":"chat-service-synapse/readme/#configure-rate-limit","title":"Configure rate limit","text":"<p>https://github.com/matrix-org/synapse/issues/6286</p> <pre><code>insert into ratelimit_override values ('@EF_policy_bot:matrix.eclipse.org', 0, 0);\n</code></pre>"},{"location":"chat-service-synapse/readme/#moderation-with-mjolnirpantalaimon","title":"Moderation with Mjolnir/pantalaimon","text":"<p>NOTE: must be admin!</p> <pre><code>UPDATE users SET name = admin='1' where name='@usertest:matrix-local.eclipse.org';\n</code></pre> <p>Before starting: Clean mjolnir and pantalaimon local storage (not production) if exist: </p> <pre><code>sudo rm -Rf ./config/local/mjolnir/storage\nsudo rm -Rf ./config/local/pantalaimon/local-matrix\nsudo rm -Rf ./config/local/pantalaimon/pan.db\n</code></pre> <p>IMPORTANT: Activate temporary homeserver password config the time to configure bot for first login. </p> <p>file: <code>lib/chat-matrix/synapse/config-homeserver.libsonnet</code></p> <pre><code>password_config: {\n  enabled: false,\n},\n</code></pre> <ol> <li>create moderator user: <code>@ef_moderator_bot:matrix-local.eclipse.org</code></li> </ol> <p>Get password from pass: /IT/services/chat-service/bot-mjolnir/{env}/password</p> <pre><code>MATRIX_URL=\"https://matrix-local.eclipse.org\"\nACCESS_TOKEN=\"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\"\n\ncurl -k -s -X PUT \\\n    -H \"Authorization: Bearer ${ACCESS_TOKEN}\" \\\n    -d '{\"displayname\": \"Eclipse Foundation Moderator Bot\", \"password\": \"XXXXXXXXXXXXXXXX\"}' \\\n    \"${MATRIX_URL}/_synapse/admin/v2/users/@ef_moderator_bot:${MATRIX_URL##*://}\"\n</code></pre> <p>return:</p> <pre><code>{\"name\":\"@ef_moderator_bot:matrix-local.eclipse.org\",\"is_guest\":0,\"admin\":false,\"consent_version\":null,\"consent_ts\":null,\"consent_server_notice_sent\":null,\"appservice_id\":null,\"creation_ts\":1681830226,\"user_type\":null,\"deactivated\":false,\"shadow_banned\":false,\"displayname\":\"Eclipse Foundation moderator\",\"avatar_url\":null,\"threepids\":[],\"external_ids\":[],\"erased\":false}% \n</code></pre> <ol> <li>Accept consent policy: Need to connect to the web interface with user <code>ef_moderator_bot</code> or calculate consent url.</li> </ol> <p>Param openssl hmac is <code>form_secret</code>property in <code>homeserver.yaml</code>:</p> <pre><code>echo -n 'ef_moderator_bot' | openssl sha256 -hmac '15,CKuwubYD^2m2II.aQhRpf9gu37I9f.2kQv2-b^aHTz,UtMT'\n</code></pre> <pre><code>https://matrix-local.eclipse.org/_matrix/consent?u=ef_moderator_bot&amp;h=92cf81f3db94ded5387a0cc4c7b8138409f13f9d4b0ae2ee130923209531d0b9\n</code></pre> <p>go and accept!</p> <ol> <li>Moderation room creation</li> </ol> <p>via UI: Room creation:   * Name: <code>Chat Service moderation</code>   * Alias: <code>#eclipsefdn.chat-moderation:matrix-local.eclipse.org</code>    * <code>private</code>    * <code>encrypt</code></p> <p>Add room to <code>#eclipsefdn:matrix.eclipse.org</code> space. (not mandatory for local tests)</p> <p>via script:</p> <pre><code>MATRIX_URL=\"https://matrix-local.eclipse.org\"\nACCESS_TOKEN=\"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\"\ncurl -s -X POST --insecure \\\n                -H \"Content-Type: application/json\" \\\n                -H \"Authorization: Bearer ${ACCESS_TOKEN}\" \\\n                -d '{\"preset\":\"trusted_private_chat\", \"name\": \"Chat Service moderation\", \"room_alias_name\": \"eclipsefdn.chat-moderation\", \"topic\":\"Room moderation with mjolnir for chat service\", \"invite\": [\"@ef_moderator_bot:matrix-local.eclipse.org\"]}' \\\n                \"${MATRIX_URL}/_matrix/client/r0/createRoom\"\n</code></pre> <p>return: </p> <pre><code>{\"room_id\":\"!RkEPsVKweWTdfyMCUH:dev.matrix.eclipsecontent.org\"}\n</code></pre> <p>Attach to <code>eclipsefdn</code> space:</p> <pre><code>MATRIX_URL=\"https://matrix-local.eclipse.org\"\nACCESS_TOKEN=\"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\"\nSPACE_ALIAS=\"%23eclipsefdn%3A${MATRIX_URL##*://}\"\nSPACE_ID=$(curl -s --insecure -H \"Authorization: Bearer $ACCESS_TOKEN\" \"${MATRIX_URL}/_matrix/client/v3/directory/room/${SPACE_ALIAS}\"|jq -r '.room_id')\nROOM_ALIAS=\"%23eclipsefdn.chat-moderation%3A${MATRIX_URL##*://}\"\nROOM_ID=$(curl -s --insecure -H \"Authorization: Bearer $ACCESS_TOKEN\" \"${MATRIX_URL}/_matrix/client/r0/directory/room/${ROOM_ALIAS}\"|jq -r '.room_id')\ncurl -s -X PUT --insecure \\\n                -H \"Content-Type: application/json\" \\\n                -H \"Authorization: Bearer ${ACCESS_TOKEN}\" \\\n                -d '{\"via\":[\"matrix-local.eclipse.org\"],\"suggested\":false}' \\\n                \"${MATRIX_URL}/_matrix/client/r0/rooms/${SPACE_ID}/state/m.space.child/${ROOM_ID}\"\n</code></pre> <p>Return: </p> <pre><code>{\"event_id\":\"$5lBc6twDKWviKsn3tqKUiAEd-SAnbZiprGklIri1OF4\"}\n</code></pre> <ol> <li> <p>Add user <code>ef_moderator_bot</code> as <code>admin</code> if not set.</p> </li> <li> <p>Set rate limit:</p> </li> </ol> <pre><code>insert into ratelimit_override values ('@ef_moderator_bot:matrix-local.eclipse.org', 0, 0);\n</code></pre> <p>or via curl: </p> <pre><code>MATRIX_URL=\"https://matrix-local.eclipse.org\"\nACCESS_TOKEN=\"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\"\n\n\ncurl -k -s -X POST \\\n    -H \"Authorization: Bearer ${ACCESS_TOKEN}\" \\\n    -d '{\"messages_per_second\": 0, \"burst_count\": 0}' \\\n    \"${MATRIX_URL}/_synapse/admin/v1/users/@ef_moderator_bot:${MATRIX_URL##*://}/override_ratelimit\"\n</code></pre>"},{"location":"chat-service-synapse/readme/#mjolnir-default-acl","title":"Mjolnir default ACL","text":"<ol> <li>give temporary permission to moderator bot to create room with module <code>UserControlModule</code></li> </ol> <pre><code>modules: [\n          {\n            module: 'synapse.modules.synapse_user_control.UserControlModule',\n            config: {\n              creators: [\n                ...\n                '@ef_moderator_bot:' + mxDomain,                \n              ],\n            },\n          }\n</code></pre> <ol> <li>Create first banlist: <code>!list create EF eclipsefdn.chat-moderation-bl</code></li> <li>Set banlist as default: <code>!default EF</code></li> <li>Add Community Moderation Effort: <ul> <li>First join these room with your account otherwise you'll get: <code>error: \"Can't join remote room because no servers that are in the room have been provided.\"</code></li> <li>!watch #community-moderation-effort-bl:neko.dev (see: https://blog.neko.dev/posts/)matrix-year-in-review-2022.html</li> <li>!watch #matrix-org-hs-tos-bl:matrix.org</li> </ul> </li> <li>Sync banlist: <code>!sync</code></li> </ol> <p>Example of ACL for a specific matrix server: <code>!ban EF server matrix-local.eclipse.fr Known for spam</code> </p>"},{"location":"chat-service-synapse/readme/#room-moderation-configuration","title":"Room moderation configuration","text":"<p>At room level:</p> <ol> <li>Invite bot moderation to all rooms with custom level like <code>60</code></li> <li>Change ACL with custom level like <code>60</code></li> <li>Verify with <code>!verify</code></li> </ol> <p>At space level: just add <code>moderator</code> power level to bot.</p> <p>NOTE: <code>!verify</code> show an error for space <code>eclipsefdn - Missing power level for server ACLs: 50 &lt; 100</code></p>"},{"location":"chat-service-synapse/readme/#activate-protections","title":"Activate protections","text":"<p>Protections list: <code>!protections</code></p>"},{"location":"chat-service-synapse/readme/#localabusereports","title":"LocalAbuseReports","text":"<p><code>!enabled LocalAbuseReports</code></p> <p>put nginx configuration:</p> <pre><code>  location ~ ^/_matrix/client/(r0|v3)/rooms/([^/]*)/report/(.*)$ {\n    set $room_id $2;\n    set $event_id $3;\n    proxy_pass http://127.0.0.1:8082/api/1/report/$room_id/$event_id;\n  }\n</code></pre>"},{"location":"chat-service-synapse/readme/#slack-integration-appservice-slack","title":"Slack integration (Appservice-Slack)","text":""},{"location":"chat-service-synapse/readme/#configure-slack-app","title":"Configure slack App","text":"<p>see: https://matrix-appservice-slack.readthedocs.io/en/stable/link_channels/</p> <p>1- Create a Slack App (Classic): https://api.slack.com/apps?new_classic_app=1</p> <pre><code>App Name: `matrix-bridge`\nDevelopment Slack Workspace: choose the right slack workspace for the Slack App.\n</code></pre> <p>Select the <code>matrix-bridge</code>. Under <code>Features</code> Menu -&gt; <code>App Home</code>-&gt; First, add a legacy bot user </p> <pre><code>Display Name (Bot Name): `Eclipse Foundation Matrix Bridge Bot`\nDefault username: `ef_matrix_bridge_bot`\n</code></pre> <p>2- Create <code>OAuth &amp; Permissions</code></p> <p>Under <code>Features</code> Menu -&gt; <code>OAuth &amp; Permissions</code></p> <p>Click <code>Install to Workspace</code> button</p> <p>Get User OAuth Token and Bot User OAuth Token and store in pass.</p> <pre><code>/IT/services/chat-service/slack-integration/&lt;app&gt;/bot-user-oauth-token\n</code></pre>"},{"location":"chat-service-synapse/readme/#create-matrix-admin-room","title":"Create matrix admin room","text":"<p>Create a private room: <code>#eclipsefdn.chat-slack:matrix.eclipse.org</code> with Name: <code>Chat Service Slack Admin</code>. And attach to space: <code>#eclipsefdn:matrix.eclipse.org</code>.</p> <p>IMPORTANT: Must not be encrypt!</p> <p>Set the ID in the configuration: </p> <p>i.e:</p> <pre><code>matrix_admin_room: !abcdefg12345hijk:matrix.eclipse.org\n</code></pre>"},{"location":"chat-service-synapse/readme/#invite-slack-bot-in-room","title":"invite slack bot in room","text":"<pre><code>/invite @ef_slack_bridge_bot:matrix.eclipse.org\n</code></pre> <p>Even if the bot is not recognized.</p>"},{"location":"chat-service-synapse/readme/#slack-bot-rate-limit","title":"slack bot rate limit","text":"<p>https://github.com/matrix-org/synapse/issues/6286</p> <pre><code>insert into ratelimit_override values ('@ef_slack_bridge_bot:matrix.eclipse.org', 0, 0);\n</code></pre> <p>Need a restart!</p>"},{"location":"chat-service-synapse/readme/#set-the-right-admin-room","title":"Set the right admin room","text":"<p>It might possible that the bridge set another room that the one previously created. This can be force by updating database;</p> <pre><code>update user_admin_rooms set roomid='!becqmCHUKvDiueefgt:matrix-staging.eclipse.org' where matrixuser='-internal-';\n</code></pre>"},{"location":"chat-service-synapse/readme/#link-a-chat-service-room-to-a-slack-channel","title":"Link a chat service room to a slack channel","text":"<p>1- On Chat service room </p> <ul> <li>Invite bot <code>ef_slack_bridge_bot</code> to room on chat service.</li> </ul> <pre><code>/invite @ef_slack_bridge_bot:matrix.eclipse.org\n</code></pre> <ul> <li>Get room_id from settings -&gt; Advanced -&gt; Internal room ID ex: <code>!xxxxxxxxxxxxxx:matrix.eclipse.org</code></li> </ul> <p>2- On slack room</p> <ul> <li>Add app matrix-bridge on slack channel</li> </ul> <p>Right click on slack room channel -&gt; <code>View channel details</code>  -&gt; <code>Integration</code> -&gt; <code>Add apps</code>  Select <code>matrix-bridge</code></p> <ul> <li>Invite bot <code>ef_matrix_bridge_bot</code> to room on chat service.</li> </ul> <pre><code>/invite ef_matrix_bridge_bot\n</code></pre> <ul> <li>Get channel ID</li> </ul> <p>Right-click your channel name in Slack and select \u201cCopy Link\u201d. The channel id is the last argument in the url.</p> <p>Get the Id from the URL: <code>https://XXX.Slack.com/messages/&lt;channel id&gt;/</code></p> <p>3- Link rooms</p> <p>In the chat service admin room: <code>Chat Service Slack Admin</code></p> <pre><code>link --channel_id YYYYYYYY --room !xxxxxxxxxxxxxx:matrix.eclipse.org --slack_bot_token xoxb-xxxxxxxxxxxxxxxx\n</code></pre> <p><code>Eclipse Foundatino Slack Bridge Bot</code> should write:</p> <pre><code>Room is now pending-name\nRemember to invite the slack bot to the slack channel.\n</code></pre>"},{"location":"chat-service-synapse/readme/#devops","title":"Devops","text":""},{"location":"chat-service-synapse/readme/#generate-secrets_1","title":"Generate secrets","text":"<p>Execute:  <code>./gen-secrets.sh</code></p> <p>It will store secrets under: <code>/environments/chat-matrix/{env}/.secrets</code></p>"},{"location":"chat-service-synapse/readme/#tanka","title":"tanka","text":"<p>see doc installation tanka: <code>https://tanka.dev/install</code></p> <pre><code>tk show \"environments/chat-matrix/dev\"\ntk apply \"environments/chat-matrix/dev\"\n</code></pre> <p>Exporting kubernetes files:</p> <pre><code>tk show --dangerous-allow-redirect \"environments/chat-matrix/dev\" &gt; ./k8s/chat-matrix-dev.yaml\n</code></pre>"},{"location":"chat-service-synapse/readme/#applysh-script","title":"Apply.sh script","text":"<p>Allow to run tanka and apply modification with kubectl for an environment.</p> <pre><code>./apply.sh {env}\n</code></pre>"},{"location":"chat-service-synapse/readme/#kubectl-status","title":"kubectl status","text":"<p>Installation</p> <pre><code>kubectl krew install status\n</code></pre> <pre><code>kubectl status deployment -n chat-matrix-dev\n</code></pre>"},{"location":"chat-service-synapse/readme/#upgrade","title":"Upgrade","text":""},{"location":"chat-service-synapse/readme/#synapse","title":"Synapse","text":""},{"location":"chat-service-synapse/readme/#check-changelog","title":"Check changelog","text":"<p>First check changelog, ex: <code>https://github.com/matrix-org/synapse/releases/tag/v1.82.0</code></p> <p>Look at : * Module signature deprecation: impact <code>modules/synapse_prevent_encrypt_room</code>, <code>modules/synapse_user_control</code>, <code>modules/synapse_user_restrictions</code>)  * OIDC changes: impact <code>/synapse/config/oidc.py</code>, <code>/synapse/handlers/oidc.py</code>  * Templates: impact <code>/synpase/res/templates</code> * Configuration files: Configuration changes should be apply in this configuration file: <code>/lib/chat-matrix/synapse/config-homeserver.libsonnet</code>. * New features!</p>"},{"location":"chat-service-synapse/readme/#upgrade-version","title":"Upgrade version","text":"<p>Check version and look for dockerhub tags: <code>https://hub.docker.com/r/matrixdotorg/synapse/tags</code></p> <p>And apply change in docker image file: <code>/docker/Dockerfile.synapse</code></p> <pre><code>ARG SYNAPSE_VERSION=\"v1.82.0\"\n</code></pre> <p>Commit with message: <code>feat: upgrade synapse to v1.82.0</code> gitmoji: <code>\u2b06\ufe0f  - Upgrade dependencies.</code></p> <p>Push/Wait for CI building synapse image and apply changes in kubernetes: <code>./apply.sh {env}</code></p>"},{"location":"chat-service-synapse/readme/#matrix-media-repo","title":"Matrix-media-repo","text":""},{"location":"chat-service-synapse/readme/#check-changelog_1","title":"Check changelog","text":"<p>First check changelog, ex: <code>https://github.com/turt2live/matrix-media-repo/releases/tag/v1.2.13</code></p> <p>Look for compatibilities with synapse version. Look for changes in API, cors, everything that could impact nginx rewrite rules.</p>"},{"location":"chat-service-synapse/readme/#upgrade-version_1","title":"Upgrade version","text":"<p>Note: Media repo version is currently a specific tag for two reasons: * tag 1.2.13 missing some features * last commit failed CI</p> <p>Apply change in docker image file: <code>/docker/Dockerfile.mediarepo</code></p> <pre><code>ARG CLONE_BRANCH=\"master\" \nARG CO_SHA=\"219e4bc67ab8e354b263774aca0118332ea48c25\" \n</code></pre> <p>Commit with message: <code>feat: upgrade mediarepo to branch XXXXXXX and commit XXXXXXXXXXXX</code> gitmoji: <code>\u2b06\ufe0f  - Upgrade dependencies.</code></p> <p>Push/Wait for CI building synapse image and apply changes in kubernetes: <code>./apply.sh {env}</code></p>"},{"location":"chat-service-synapse/readme/#synapse-admin","title":"Synapse-admin","text":""},{"location":"chat-service-synapse/readme/#check-changelog_2","title":"Check changelog","text":"<p>First check changelog, ex: <code>https://github.com/Awesome-Technologies/synapse-admin/releases/tag/0.8.7</code></p>"},{"location":"chat-service-synapse/readme/#upgrade-version_2","title":"Upgrade version","text":"<p>Check version and look for github branch tags: <code>https://github.com/Awesome-Technologies/synapse-admin/tree/0.8.7</code></p> <p>Apply change in docker image file: <code>/docker/Dockerfile.admin</code></p> <pre><code>ARG SYNAPSE_ADMIN_BRANCH=\"0.9.1\"\n</code></pre> <p>Commit with message: <code>feat: upgrade synapse-admin to 0.8.7</code> gitmoji: <code>\u2b06\ufe0f  - Upgrade dependencies.</code></p> <p>Push/Wait for CI building synapse image and apply changes in kubernetes: <code>./apply.sh {env}</code></p>"},{"location":"chat-service-synapse/readme/#maintenance","title":"Maintenance","text":""},{"location":"chat-service-synapse/readme/#compress-state","title":"Compress state","text":"<p>Compress state cronjob is based on project: https://github.com/matrix-org/rust-synapse-compress-state and runs daily.</p> <p>Run manually a job: </p> <pre><code>JOB_NAME=\"${USERNAME}-manual-compress-state-run-$(date +\"%s\")\"\nkubectl create job -n chat-matrix-prod --from=cronjob/synapse-compress-state ${JOB_NAME}\n</code></pre>"},{"location":"chat-service-synapse/readme/#admin","title":"Admin","text":""},{"location":"chat-service-synapse/readme/#experimental-feature","title":"Experimental feature","text":"<p>NOTE: Need admin API access.</p> <p>e.g: activate msc3575 experimental feature for a specific user.</p> <pre><code>curl -k --header \"Authorization: Bearer syt_XXXXXXXXXXXX\" -X GET https://matrix.eclipse.org/_synapse/admin/v1/experimental_features/@sebastien.heurtematte:matrix.eclipse.org\n\n\ncurl -k --header \"Authorization: Bearer syt_XXXXXXXXXXXX\" -X PUT https://matrix.eclipse.org/_synapse/admin/v1/experimental_features/@sebastien.heurtematte:matrix.eclipse.org \\\n-d '{\"features\":{\"msc3881\":false,\"msc3575\":true,\"msc4222\":false}}'\n</code></pre>"},{"location":"chat-service-synapse/readme/#development","title":"Development","text":""},{"location":"chat-service-synapse/readme/#register-new-user","title":"register new user","text":"<pre><code>sudo docker exec -it $(sudo docker ps -aqf \"name=synapse\"|head -n 1) register_new_matrix_user -u test -p test -a -c /synapse/config/homeserver.yaml http://localhost:8008\n</code></pre>"},{"location":"chat-service-synapse/readme/#list-users","title":"list users","text":"<pre><code>docker exec -it $(sudo docker ps -aqf \"name=postgres\"|head -n 1) psql -U synapse -d synapse -c \"SELECT * FROM users;\"\n</code></pre>"},{"location":"chat-service-synapse/readme/#set-admin","title":"set admin","text":"<pre><code>docker exec -it $(sudo docker ps -aqf \"name=postgres\"|head -n 1) psql -U synapse -d synapse -c \"UPDATE users SET admin = 1 WHERE name = '@test:matrix-local.eclipse.org';\"\n</code></pre>"},{"location":"chat-service-synapse/readme/#change-rate-limit","title":"change rate limit","text":"<pre><code>docker exec -it $(sudo docker ps -aqf \"name=postgres\"|head -n 1) psql -U synapse -d synapse -c \"insert into ratelimit_override values ('@test:matrix-local.eclipse.org', 0, 0);\"\n</code></pre> <p>Need a restart!</p>"},{"location":"chat-service-synapse/readme/#reuse-lint","title":"Reuse lint","text":"<pre><code>docker run -v $PWD:/data fsfe/reuse:latest lint\n</code></pre>"},{"location":"chat-service-synapse/readme/#docker-compose-render","title":"Docker-compose render","text":"<pre><code>docker run --rm -it --name dcv -v $(pwd):/input pmsipilot/docker-compose-viz render -m image docker-compose.yaml\n</code></pre>"},{"location":"chat-service-synapse/readme/#k8s-render","title":"k8s render","text":"<pre><code>./k8sviz.sh -n chat-matrix-prod -t png -o k8s-architecture.png\n</code></pre>"},{"location":"chat-service-synapse/readme/#usefull-links","title":"Usefull links","text":"<p>Matrix version and features: </p> <pre><code>https://matrix.eclipse.org/_matrix/client/versions\nhttps://matrix.eclipse.org/_matrix/federation/v1/version\n</code></pre>"},{"location":"chat-service-elementweb/readme/","title":"Readme","text":"<p>Home / chat-service-elementweb / readme</p>"},{"location":"chat-service-elementweb/readme/#eclipse-foundation-elementweb-implementation","title":"Eclipse Foundation - Elementweb Implementation","text":"<ul> <li>Eclipse Foundation - Elementweb Implementation</li> <li>Getting started locally<ul> <li>prerequisite</li> <li>Local start</li> <li>Local federated start</li> </ul> </li> <li>Installation and Configuration in kubernetes cluster<ul> <li>Kubernetes architecture</li> <li>Install modules</li> <li>New Environment</li> </ul> </li> <li>Devops<ul> <li>Generate secrets</li> <li>tanka</li> <li>Apply.sh script</li> </ul> </li> <li>Upgrade<ul> <li>Check changelog</li> <li>Upgrade version</li> </ul> </li> <li>Development<ul> <li>Reuse lint</li> <li>Docker-compose render</li> <li>k8s render</li> <li>Debug configuration</li> </ul> </li> </ul>"},{"location":"chat-service-elementweb/readme/#getting-started-locally","title":"Getting started locally","text":""},{"location":"chat-service-elementweb/readme/#prerequisite","title":"prerequisite","text":"<p>Set local domain name in <code>/etc/hosts</code>:</p> <pre><code>127.0.0.1       matrix-local.eclipse.org chat-local.eclipse.org matrix-media-repo-local.eclipse.org synapse-admin-local.eclipse.org \n127.0.0.1       matrix-federated.eclipse.org chat-federated.eclipse.org matrix-media-repo-federated.eclipse.org synapse-admin-federated.eclipse.org\n</code></pre>"},{"location":"chat-service-elementweb/readme/#local-start","title":"Local start","text":"<pre><code>docker-compose up -d\n</code></pre> <p>Browser access: <code>https://chat-local.eclipse.org:8443</code></p> <p>IMPORTANT: matrix must be start! see: Synapse local start</p> <p></p>"},{"location":"chat-service-elementweb/readme/#local-federated-start","title":"Local federated start","text":"<pre><code>docker-compose -f docker-compose-federated.yaml up -d\n</code></pre> <p>Browser access: <code>https://chat-local.eclipse.org:8443</code> Browser access: <code>https://chat-federated.eclipse.org:8443</code></p> <p>IMPORTANT: matrix servers must be start! see: Synapse local federated start</p> <p></p>"},{"location":"chat-service-elementweb/readme/#installation-and-configuration-in-kubernetes-cluster","title":"Installation and Configuration in kubernetes cluster","text":""},{"location":"chat-service-elementweb/readme/#kubernetes-architecture","title":"Kubernetes architecture","text":""},{"location":"chat-service-elementweb/readme/#install-modules","title":"Install modules","text":"<p>Install <code>jsonnet-bundler</code>: https://github.com/jsonnet-bundler/jsonnet-bundler</p> <pre><code>jb install\n</code></pre>"},{"location":"chat-service-elementweb/readme/#new-environment","title":"New Environment","text":"<pre><code>tk env add environments/chat-elementweb/{env} --namespace=chat-elementweb-{env}\n</code></pre> <p>Add this property in <code>spec.json</code>:</p> <pre><code>{\n  ...\n\"apiServer\": \"https://my_cluster\",\n\"injectLabels\": true\n ...\n}\n</code></pre> <p><code>main.jsonnet</code> template: </p> <pre><code>(import \"chat-elementweb/main.libsonnet\") +\n{\n    _config+:: { \n        environment: \"dev\",        \n        elementweb+: {\n            replicas: 1,\n            config+:{\n                \"broadcast\": \"Eclipse foundation chat service 'DEV' environment\",\n            },\n        },\n    }\n}\n</code></pre>"},{"location":"chat-service-elementweb/readme/#devops","title":"Devops","text":""},{"location":"chat-service-elementweb/readme/#generate-secrets","title":"Generate secrets","text":"<p>Execute:  <code>./gen-secrets.sh</code></p> <p>It will store secrets under: <code>/environments/chat-elementweb/{env}/.secrets</code></p>"},{"location":"chat-service-elementweb/readme/#tanka","title":"tanka","text":"<p>see doc installation tanka: <code>https://tanka.dev/install</code></p> <pre><code>tk show \"environments/chat-elementweb/dev\"\ntk apply \"environments/chat-elementweb/dev\"\n</code></pre> <p>Exporting kubernetes files:</p> <pre><code>tk show --dangerous-allow-redirect \"environments/chat-elementweb/dev\" &gt; ./k8s/chat-elementweb-dev.yaml\n</code></pre>"},{"location":"chat-service-elementweb/readme/#applysh-script","title":"Apply.sh script","text":"<p>Allow to run tanka and apply modification with kubectl for an environment.</p> <pre><code>./apply.sh {env}\n</code></pre>"},{"location":"chat-service-elementweb/readme/#upgrade","title":"Upgrade","text":""},{"location":"chat-service-elementweb/readme/#check-changelog","title":"Check changelog","text":"<p>First check changelog, ex: <code>https://github.com/vector-im/element-web/releases/tag/v1.11.30</code></p> <p>Look at : * feature namming changes, ex with: <code>feature_threadestable</code> change to <code>feature_threadenabled</code> * Dockerfile changes: <code>https://github.com/vector-im/element-web/blob/v1.11.30/Dockerfile</code></p> <p>Configuration changes should be apply in this configuration file: <code>/lib/chat-elementweb/element-web/config-app.libsonnet</code>.</p>"},{"location":"chat-service-elementweb/readme/#upgrade-version","title":"Upgrade version","text":"<p>Check version and look for github branch tags: <code>https://github.com/vector-im/element-web/tree/v1.11.30</code></p> <p>And apply change in docker image file: <code>/docker/Dockerfile.element-web</code></p> <pre><code>ARG ELEMENT_BRANCH=\"v1.11.29\"\n</code></pre> <p>Commit with message: <code>feat: upgrade to elementweb 1.11.30</code> gitmoji: <code>\u2b06\ufe0f  - Upgrade dependencies.</code></p> <p>Push/Wait for CI building elementweb image and apply changes in kubernetes: <code>./apply.sh {env}</code></p>"},{"location":"chat-service-elementweb/readme/#development","title":"Development","text":""},{"location":"chat-service-elementweb/readme/#reuse-lint","title":"Reuse lint","text":"<pre><code>docker run -v $PWD:/data fsfe/reuse:latest lint\n</code></pre>"},{"location":"chat-service-elementweb/readme/#docker-compose-render","title":"Docker-compose render","text":"<pre><code>docker run --rm -it --name dcv -v $(pwd):/input pmsipilot/docker-compose-viz render -m image docker-compose.yaml\n</code></pre>"},{"location":"chat-service-elementweb/readme/#k8s-render","title":"k8s render","text":"<pre><code>./k8sviz.sh -n chat-matrix-prod -t png -o k8s-architecture.png\n</code></pre>"},{"location":"chat-service-elementweb/readme/#debug-configuration","title":"Debug configuration","text":"<p>ex: type in browser console for feature <code>feature_exploring_public_spaces</code></p> <pre><code>mxSettingsStore.debugSetting('feature_exploring_public_spaces')\n</code></pre> <p>output: </p> <pre><code>--- DEBUG feature_exploring_public_spaces rageshake.ts:64:12\n--- definition: {\"displayName\":\"Explore public spaces in the new search dialog\",\"supportedLevels\":[\"device\",\"config\"],\"default\":false} rageshake.ts:64:12\n--- default level order: [\"device\",\"room-device\",\"room-account\",\"account\",\"room\",\"config\",\"default\"] rageshake.ts:64:12\n--- registered handlers: [\"device\",\"room-device\",\"room-account\",\"account\",\"room\",\"platform\",\"config\",\"default\"] rageshake.ts:64:12\n---     device@&lt;no_room&gt; = true rageshake.ts:64:12\n---     room-device@&lt;no_room&gt; = null rageshake.ts:64:12\n---     room-account@&lt;no_room&gt; = undefined rageshake.ts:64:12\n---     account@&lt;no_room&gt; = undefined rageshake.ts:64:12\n---     room@&lt;no_room&gt; = undefined rageshake.ts:64:12\n---     platform@&lt;no_room&gt; = undefined rageshake.ts:64:12\n---     config@&lt;no_room&gt; = null rageshake.ts:64:12\n---     default@&lt;no_room&gt; = false rageshake.ts:64:12\n--- calculating as returned by SettingsStore rageshake.ts:64:12\n--- these might not match if the setting uses a controller - be warned! rageshake.ts:64:12\n---     SettingsStore#generic@&lt;no_room&gt;  = true rageshake.ts:64:12\n---     SettingsStore#device@&lt;no_room&gt; = true rageshake.ts:64:12\n---     SettingsStore#room-device@&lt;no_room&gt; = false rageshake.ts:64:12\n---     SettingsStore#room-account@&lt;no_room&gt; = false rageshake.ts:64:12\n---     SettingsStore#account@&lt;no_room&gt; = false rageshake.ts:64:12\n---     SettingsStore#room@&lt;no_room&gt; = false rageshake.ts:64:12\n---     SettingsStore#config@&lt;no_room&gt; = false rageshake.ts:64:12\n---     SettingsStore#default@&lt;no_room&gt; = false rageshake.ts:64:12\n--- END DEBUG rageshake.ts:64:12\n</code></pre>"},{"location":"chat-service-sync-tools/readme/","title":"Readme","text":"<p>Home / chat-service-sync-tools / readme</p>"},{"location":"chat-service-sync-tools/readme/#chat-service-sync","title":"Chat Service Sync","text":"<p>This project allow to configure matrix as code (room/space, permission), and to sync permission with Eclipse Foundation profile like project lead.</p> <ul> <li>Chat Service Sync</li> <li>Environment configuration</li> <li>Project file configuration<ul> <li>Default</li> <li>Project room/space definition</li> </ul> </li> <li>Installation</li> <li>Create sync bot</li> <li>launch</li> <li>Development</li> </ul>"},{"location":"chat-service-sync-tools/readme/#environment-configuration","title":"Environment configuration","text":"<p>Configuration file: <code>./config/default.js</code></p> Configuration Parameter Description Default Value Environment Variable <code>logLevel</code> The log level for the service. <code>\"DEBUG\"</code> <code>SYNC_LOG_LEVEL</code> <code>dry</code> Dry mode execution <code>true</code> <code>SYNC_DRY</code> <code>projectConfigFile</code> Locate configuration file. <code>__dirname +</code>/project.yaml`` <code>SYNC_PROJECT_CONFIG_FILE</code> <code>matrixAPI</code> Object configuration for matrix API. (see definition below) <code>eclipseAPI</code> Object configuration for eclipse API. (see definition below) <ul> <li><code>matrixAPI</code> object configuration </li> </ul> Configuration Parameter Description Default Value Environment Variable <code>baseUrl</code> Base url of the homeserver. <code>https://matrix-local.eclipse.org</code> <code>SYNC_PERMS_HOMESERVER_URL</code> <code>accessToken</code> Acces token to homeserver API. <code>XXXXXXXXXXXXX</code> <code>SYNC_PERMS_HOMESERVER_TOKEN</code> <code>matrixDomain</code> Matrix domain, can be different from baseUrl. <code>matrix-local.eclipse.org</code> <code>SYNC_PERMS_HOMESERVER_DOMAIN</code> <ul> <li><code>eclipseAPI</code> object configuration </li> </ul> Configuration Parameter Description Default Value Environment Variable <code>userAPIBaseUrl</code> Base url of the homeserver. <code>https://matrix-local.eclipse.org</code> <code>SYNC_PERMS_HOMESERVER_URL</code> <code>projectAPIBaseUrl</code> Acces token to homeserver API. <code>XXXXXXXXXXXXX</code> <code>SYNC_PERMS_HOMESERVER_TOKEN</code> <code>oauth</code> Matrix domain, can be different from baseUrl. <code>matrix-local.eclipse.org</code> <code>SYNC_PERMS_HOMESERVER_DOMAIN</code> <code>additionnalOauth</code> Matrix domain, can be different from baseUrl. <code>matrix-local.eclipse.org</code> <code>SYNC_PERMS_HOMESERVER_DOMAIN</code> <ul> <li><code>oauth</code> object configuration </li> </ul> <p>Configuration object from library: simple-oauth2</p> Configuration Parameter Description Default Value Environment Variable <code>client.id</code> Client id <code>XXXXXXXXXXXXXX</code> <code>SYNC_ECLIPSE_API_OAUTH_CLIENT_ID</code> <code>client.secret</code> Client secret. <code>XXXXXXXXXXXXXX</code> <code>SYNC_ECLIPSE_API_OAUTH_SECRET</code> <code>auth.tokenHost</code> Oauth domain <code>https://accounts.eclipse.org</code> <code>SYNC_ECLIPSE_API_OAUTH_AUTH_TOKEN_HOST</code> <code>auth.tokenPath</code> Oauth token path. <code>/oauth2/token</code> <code>SYNC_ECLIPSE_API_OAUTH_AUTH_TOKEN_PATH</code> <ul> <li><code>additionnalOauth</code> object configuration </li> </ul> <p>Extrat oauth options: </p> Configuration Parameter Description Default Value Environment Variable <code>timeout</code> Request timeout <code>3600</code> <code>SYNC_ECLIPSE_API_ADDITIONNALOAUTH_TIMEOUT</code> <code>scope</code> Oauth scope for viewing profile. <code>eclipsefdn_view_all_profiles</code> <code>SYNC_ECLIPSE_API_ADDITIONNALOAUTH_SCOPE</code> <p>Default configuration file: </p> <pre><code>logLevel: process.env.SYNC_LOG_LEVEL || \"INFO\",\n    dry: process.env.SYNC_DRY || true,\n    projectConfigFile: process.env.SYNC_PROJECT_CONFIG_FILE || __dirname + `/project.yaml`,\n    matrixAPI: { \n        baseUrl: process.env.SYNC_PERMS_HOMESERVER_URL || \"https://matrix-local.eclipse.org\", \n        accessToken: process.env.SYNC_PERMS_HOMESERVER_TOKEN || \"XXXXXXXXXXXXX\",\n        matrixDomain: process.env.SYNC_PERMS_HOMESERVER_DOMAIN || \"matrix-local.eclipse.org\", \n    },\n    eclipseAPI: {\n        userAPIBaseUrl: process.env.SYNC_ECLIPSE_USER_API_BASE_URL || 'https://api.eclipse.org',\n        projectAPIBaseUrl: process.env.SYNC_ECLIPSE_PROJECT_API_BASE_URL || 'https://projects.eclipse.org',\n        oauth: {\n            client: {\n                id: process.env.SYNC_ECLIPSE_API_OAUTH_CLIENT_ID || 'XXXXXXXXXXXXX',\n                secret: process.env.SYNC_ECLIPSE_API_OAUTH_SECRET || 'XXXXXXXXXXXXXX',\n            },\n            auth: {\n                tokenHost: process.env.SYNC_ECLIPSE_API_OAUTH_AUTH_TOKEN_HOST || 'https://accounts.eclipse.org',\n                tokenPath: process.env.SYNC_ECLIPSE_API_OAUTH_AUTH_TOKEN_PATH || '/oauth2/token',\n            }\n        },\n        additionnalOauth: {\n            timeout: parseInt(process.env.SYNC_ECLIPSE_API_ADDITIONNALOAUTH_TIMEOUT) || 3600,\n            scope: process.env.SYNC_ECLIPSE_API_ADDITIONNALOAUTH_SCOPE ||  'eclipsefdn_view_all_profiles'\n        },\n    }\n</code></pre>"},{"location":"chat-service-sync-tools/readme/#project-file-configuration","title":"Project file configuration","text":""},{"location":"chat-service-sync-tools/readme/#default","title":"Default","text":"Configuration Parameter Description <code>users</code> List of default users with permission (optionnal) apply to all room/space <code>defaultProjectSpace</code> Define default project space for all Room. Just de reference for later use in other yaml definition <code>userPowerLevel</code> Default powerlevel for user if not define: default format <code>@ef_moderator_bot': 60</code>, but <code>@ef_moderator_bot</code> will result in <code>@ef_moderator_bot': 50</code> with default <code>userPowerLevel</code> <code>roomPowerLevel</code> Default powerlevel for room/space, call state event <code>/rooms/$roomId/state/m.room.power_levels</code>, see mroompower_levels for specification <code>roomVisibility</code> <code>public</code>, <code>private</code>. Define at room creation, see createRoom API <code>roomPreset</code> <code>private_chat</code>, <code>trusted_private_chat</code>, <code>public_chat</code>. Define at room creation, see createRoom API <p>Example:</p> <pre><code>default:\n  users: &amp;defaultUsers\n    - '@sebastien.heurtematte': 100\n    - '@ef_sync_bot': 100\n    - '@ef_moderator_bot': 60\n  defaultProjectSpace: '#eclipse-projects'\n  userPowerLevel: 50\n  roomPowerLevel:\n    ban: 50\n    events:\n      m.reaction: 0\n      m.room.avatar: 55\n      m.room.canonical_alias: 55\n      m.room.encryption: 100\n      m.room.history_visibility: 100\n      m.room.name: 55\n      m.room.pinned_events: 50\n      m.room.power_levels: 100\n      m.room.redaction: 0\n      m.room.server_acl: 60\n      m.room.tombstone: 100\n      m.room.topic: 50\n      m.space.child: 55\n      org.matrix.msc3401.call: 50\n      org.matrix.msc3401.call.member: 50\n    events_default: 0\n    historical: 100\n    invite: 50\n    kick: 50\n    redact: 50\n    state_default: 50\n    users_default: 0\n  roomVisibility: \"public\"\n  roomPreset: \"public_chat\"\n</code></pre>"},{"location":"chat-service-sync-tools/readme/#project-roomspace-definition","title":"Project room/space definition","text":"Configuration Parameter Description Example <code>{project_id}</code> Eclipse Project_id as define in eclipse project website: https://projects.eclipse.org <code>ee4j.rest</code> <code>projectLead</code> Sync moderator permission with project lead. Only if project_id is valid <code>true</code> <code>rooms</code> Defining a list of room/space. <p>Room/space options: </p> Configuration Parameter Description Optionnal default value \u00a0Example <code>alias</code> Eclipse Project_id as define in eclipse project website: https://projects.eclipse.org false <code>ee4j.rest</code> <code>extraAlias</code> string or array that allows to add extra alias for room true <code>ee4j-general.rest</code> <code>name</code> Set room name false <code>Jakarta RESTful Web Services\u2122</code> <code>type</code> Define if it's a space or a room. Room by default. true <code>room</code>, <code>space</code> <code>topic</code> Define topic for this room true <code>visibility</code> Define visibility for this room/space true <code>public</code> <code>public</code>, <code>private</code> <code>preset</code> Define preset for this room/space true <code>public_chat</code> <code>private_chat</code>, <code>trusted_private_chat</code>, <code>public_chat</code> <code>powerLevel</code> Define specific powerLevel for this room/space true <code>projectLead</code> Sync extra project lead permission. Only if project_id is valid true <code>true</code> <code>projectId</code> Sync extra project lead permission with a valid project_id true <code>users</code> Define a list of extra users for moderation true <code>parent</code> Define parent space. true <code>#eclipse-projects</code> <code>forceUpdate</code> Allow the script to override any change occuring by the UI. Only fields topic for the moment. true <code>false</code> <code>true</code> <code>encryption</code> Allow to encrypt room. true <code>false</code> <code>true</code> <p>Example:</p> <pre><code>projects:\n  - eclipsefdn:\n      projectLead: false\n      rooms:\n        - alias: '#eclipsefdn'\n          name: 'Eclipse Foundation'\n          type: space\n        - alias: '#eclipsefdn.it'\n          type: room\n          name: 'IT'\n          parent: '#eclipsefdn'\n</code></pre>"},{"location":"chat-service-sync-tools/readme/#installation","title":"Installation","text":""},{"location":"chat-service-sync-tools/readme/#create-sync-bot","title":"Create sync bot","text":"<p>IMPORTANT: Activate for a short period registration in matrix.</p> <ol> <li>create sync user: <code>@ef_sync_bot:matrix.eclipse.org</code></li> </ol> <p>Get password from pass: /IT/services/chat-service/chat-service-sync/{env}/password</p> <pre><code>MATRIX_URL=\"https://matrix.eclipse.org\"\nACCESS_TOKEN=\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n\ncurl -k -s -X PUT \\\n    -H \"Authorization: Bearer ${ACCESS_TOKEN}\" \\\n    -d '{\"displayname\": \"Eclipse Foundation Sync Bot\", \"password\": \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\", \"admin\": true}' \\\n    \"${MATRIX_URL}/_synapse/admin/v2/users/@ef_sync_bot:${MATRIX_URL##*://}\"\n</code></pre> <ol> <li>Get access_token</li> </ol> <pre><code>MATRIX_URL=\"https://matrix.eclipse.org\"\nACCESS_TOKEN=\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\ncurl -k -s -X POST \\\n    -d '{\"type\":\"m.login.password\", \"user\":\"ef_sync_bot\", \"password\":\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"}' \\\n    \"${MATRIX_URL}/_matrix/client/r0/login\"\n</code></pre> <ol> <li>Accept consent policy: Need to connect to the web interface with user <code>ef_sync_bot</code> or calculate consent url.</li> </ol> <p>Param openssl hmac is <code>form_secret</code>property in <code>homeserver.yaml</code>: <code>pass /IT/services/chat-service/synapse/prod/form_secret</code></p> <pre><code>echo -n 'ef_sync_bot' | openssl sha256 -hmac 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'\n</code></pre> <pre><code>https://matrix.eclipse.org/_matrix/consent?u=ef_sync_bot&amp;h=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n</code></pre> <ol> <li>Get Device</li> </ol> <pre><code>MATRIX_URL=\"https://matrix.eclipse.org\"\nACCESS_TOKEN=\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n\ncurl -s -X GET \\\n    -H \"Authorization: Bearer ${ACCESS_TOKEN}\" \\\n    \"${MATRIX_URL}/_matrix/client/v3/devices\"\n</code></pre> <p>and set deviceId in configuration:</p> <pre><code>matrixAPI: { \n        deviceId: \"XXXXXXXXXXX\", \n    },\n</code></pre> <ol> <li>Set rate limit:</li> </ol> <pre><code>insert into ratelimit_override values ('@ef_sync_bot:matrix.eclipse.org', 0, 0);\n</code></pre> <p>or via curl: </p> <pre><code>MATRIX_URL=\"https://matrix.eclipse.org\"\nACCESS_TOKEN=\"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\"\n\n\ncurl -k -s -X POST \\\n    -H \"Authorization: Bearer ${ACCESS_TOKEN}\" \\\n    -d '{\"messages_per_second\": 0, \"burst_count\": 0}' \\\n    \"${MATRIX_URL}/_synapse/admin/v1/users/@ef_sync_bot:${MATRIX_URL##*://}/override_ratelimit\"\n</code></pre> <ol> <li>Add bot to existing room</li> </ol> <p>If rooms already exist, bot must be add manually first.</p>"},{"location":"chat-service-sync-tools/readme/#launch","title":"launch","text":"<pre><code>npm install \nnpm run build\nnpm run start\n</code></pre>"},{"location":"chat-service-sync-tools/readme/#development","title":"Development","text":""},{"location":"chat-service-sync-tools/readme/#dev-file-environment","title":"Dev file environment","text":"<p>Create a <code>dev.js</code> file in <code>./config</code>, and overwrite all configuration from <code>default.json</code>.</p> <pre><code>npm install \nnpm run build\nnpm run start-dev\n</code></pre>"},{"location":"develocity/CONTRIBUTING/","title":"CONTRIBUTING","text":"<p>Home / develocity / CONTRIBUTING</p>"},{"location":"develocity/CONTRIBUTING/#contributing-to-eclipse-common-build-infrastructure","title":"Contributing to Eclipse Common Build Infrastructure","text":"<p>Thanks for your interest in this project.</p>"},{"location":"develocity/CONTRIBUTING/#project-description","title":"Project description","text":"<p>The Eclipse Common Build Infrastructure (CBI) combines technologies and practices for building Eclipse Software.</p> <ul> <li>https://projects.eclipse.org/projects/technology.cbi</li> </ul>"},{"location":"develocity/CONTRIBUTING/#developer-resources","title":"Developer resources","text":"<p>Information regarding source code management, builds, coding standards, and more.</p> <ul> <li>https://projects.eclipse.org/projects/technology.cbi/developer</li> </ul> <p>This project uses GitHub issues on the respective repositories to track ongoing development and issues.</p> <p>Be sure to search for existing bugs before you create another one. Remember that contributions are always welcome!</p>"},{"location":"develocity/CONTRIBUTING/#eclipse-development-process","title":"Eclipse Development Process","text":"<p>This Eclipse Foundation open project is governed by the Eclipse Foundation Development Process and operates under the terms of the Eclipse IP Policy.</p>"},{"location":"develocity/CONTRIBUTING/#eclipse-contributor-agreement","title":"Eclipse Contributor Agreement","text":"<p>Before your contribution can be accepted by the project team contributors must electronically sign the Eclipse Contributor Agreement (ECA).</p> <ul> <li>http://www.eclipse.org/legal/ECA.php</li> </ul> <p>Commits that are provided by non-committers must have a Signed-off-by field in the footer indicating that the author is aware of the terms by which the contribution has been provided to the project. The non-committer must additionally have an Eclipse Foundation account and must have a signed Eclipse Contributor Agreement (ECA) on file.</p> <p>For more information, please see the Eclipse Committer Handbook: https://www.eclipse.org/projects/handbook/#resources-commit</p>"},{"location":"develocity/CONTRIBUTING/#contact","title":"Contact","text":"<p>Contact the project developers via the project's dev list.</p> <ul> <li>mailto:cbi-dev@eclipse.org</li> </ul>"},{"location":"develocity/LICENSE/","title":"LICENSE","text":"<p>Home / develocity / LICENSE This program and the accompanying materials are made available under the terms of the Eclipse Public License 2.0 which is available at http://www.eclipse.org/legal/epl-2.0, or the MIT License which is  available at https://opensource.org/licenses/MIT.</p> <p>Eclipse Public License - v 2.0</p> <pre><code>THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE\nPUBLIC LICENSE (\"AGREEMENT\"). ANY USE, REPRODUCTION OR DISTRIBUTION\nOF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.\n</code></pre> <ol> <li>DEFINITIONS</li> </ol> <p>\"Contribution\" means:</p> <p>a) in the case of the initial Contributor, the initial content      Distributed under this Agreement, and</p> <p>b) in the case of each subsequent Contributor:      i) changes to the Program, and      ii) additions to the Program;   where such changes and/or additions to the Program originate from   and are Distributed by that particular Contributor. A Contribution   \"originates\" from a Contributor if it was added to the Program by   such Contributor itself or anyone acting on such Contributor's behalf.   Contributions do not include changes or additions to the Program that   are not Modified Works.</p> <p>\"Contributor\" means any person or entity that Distributes the Program.</p> <p>\"Licensed Patents\" mean patent claims licensable by a Contributor which are necessarily infringed by the use or sale of its Contribution alone or when combined with the Program.</p> <p>\"Program\" means the Contributions Distributed in accordance with this Agreement.</p> <p>\"Recipient\" means anyone who receives the Program under this Agreement or any Secondary License (as applicable), including Contributors.</p> <p>\"Derivative Works\" shall mean any work, whether in Source Code or other form, that is based on (or derived from) the Program and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship.</p> <p>\"Modified Works\" shall mean any work in Source Code or other form that results from an addition to, deletion from, or modification of the contents of the Program, including, for purposes of clarity any new file in Source Code form that contains any contents of the Program. Modified Works shall not include works that contain only declarations, interfaces, types, classes, structures, or files of the Program solely in each case in order to link to, bind by name, or subclass the Program or Modified Works thereof.</p> <p>\"Distribute\" means the acts of a) distributing or b) making available in any manner that enables the transfer of a copy.</p> <p>\"Source Code\" means the form of a Program preferred for making modifications, including but not limited to software source code, documentation source, and configuration files.</p> <p>\"Secondary License\" means either the GNU General Public License, Version 2.0, or any later versions of that license, including any exceptions or additional permissions as identified by the initial Contributor.</p> <ol> <li>GRANT OF RIGHTS</li> </ol> <p>a) Subject to the terms of this Agreement, each Contributor hereby   grants Recipient a non-exclusive, worldwide, royalty-free copyright   license to reproduce, prepare Derivative Works of, publicly display,   publicly perform, Distribute and sublicense the Contribution of such   Contributor, if any, and such Derivative Works.</p> <p>b) Subject to the terms of this Agreement, each Contributor hereby   grants Recipient a non-exclusive, worldwide, royalty-free patent   license under Licensed Patents to make, use, sell, offer to sell,   import and otherwise transfer the Contribution of such Contributor,   if any, in Source Code or other form. This patent license shall   apply to the combination of the Contribution and the Program if, at   the time the Contribution is added by the Contributor, such addition   of the Contribution causes such combination to be covered by the   Licensed Patents. The patent license shall not apply to any other   combinations which include the Contribution. No hardware per se is   licensed hereunder.</p> <p>c) Recipient understands that although each Contributor grants the   licenses to its Contributions set forth herein, no assurances are   provided by any Contributor that the Program does not infringe the   patent or other intellectual property rights of any other entity.   Each Contributor disclaims any liability to Recipient for claims   brought by any other entity based on infringement of intellectual   property rights or otherwise. As a condition to exercising the   rights and licenses granted hereunder, each Recipient hereby   assumes sole responsibility to secure any other intellectual   property rights needed, if any. For example, if a third party   patent license is required to allow Recipient to Distribute the   Program, it is Recipient's responsibility to acquire that license   before distributing the Program.</p> <p>d) Each Contributor represents that to its knowledge it has   sufficient copyright rights in its Contribution, if any, to grant   the copyright license set forth in this Agreement.</p> <p>e) Notwithstanding the terms of any Secondary License, no   Contributor makes additional grants to any Recipient (other than   those set forth in this Agreement) as a result of such Recipient's   receipt of the Program under the terms of a Secondary License   (if permitted under the terms of Section 3).</p> <ol> <li>REQUIREMENTS</li> </ol> <p>3.1 If a Contributor Distributes the Program in any form, then:</p> <p>a) the Program must also be made available as Source Code, in   accordance with section 3.2, and the Contributor must accompany   the Program with a statement that the Source Code for the Program   is available under this Agreement, and informs Recipients how to   obtain it in a reasonable manner on or through a medium customarily   used for software exchange; and</p> <p>b) the Contributor may Distribute the Program under a license   different than this Agreement, provided that such license:      i) effectively disclaims on behalf of all other Contributors all      warranties and conditions, express and implied, including      warranties or conditions of title and non-infringement, and      implied warranties or conditions of merchantability and fitness      for a particular purpose;</p> <pre><code> ii) effectively excludes on behalf of all other Contributors all\n liability for damages, including direct, indirect, special,\n incidental and consequential damages, such as lost profits;\n\n iii) does not attempt to limit or alter the recipients' rights\n in the Source Code under section 3.2; and\n\n iv) requires any subsequent distribution of the Program by any\n party to be under a license that satisfies the requirements\n of this section 3.\n</code></pre> <p>3.2 When the Program is Distributed as Source Code:</p> <p>a) it must be made available under this Agreement, or if the   Program (i) is combined with other material in a separate file or   files made available under a Secondary License, and (ii) the initial   Contributor attached to the Source Code the notice described in   Exhibit A of this Agreement, then the Program may be made available   under the terms of such Secondary Licenses, and</p> <p>b) a copy of this Agreement must be included with each copy of   the Program.</p> <p>3.3 Contributors may not remove or alter any copyright, patent, trademark, attribution notices, disclaimers of warranty, or limitations of liability (\"notices\") contained within the Program from any copy of the Program which they Distribute, provided that Contributors may add their own appropriate notices.</p> <ol> <li>COMMERCIAL DISTRIBUTION</li> </ol> <p>Commercial distributors of software may accept certain responsibilities with respect to end users, business partners and the like. While this license is intended to facilitate the commercial use of the Program, the Contributor who includes the Program in a commercial product offering should do so in a manner which does not create potential liability for other Contributors. Therefore, if a Contributor includes the Program in a commercial product offering, such Contributor (\"Commercial Contributor\") hereby agrees to defend and indemnify every other Contributor (\"Indemnified Contributor\") against any losses, damages and costs (collectively \"Losses\") arising from claims, lawsuits and other legal actions brought by a third party against the Indemnified Contributor to the extent caused by the acts or omissions of such Commercial Contributor in connection with its distribution of the Program in a commercial product offering. The obligations in this section do not apply to any claims or Losses relating to any actual or alleged intellectual property infringement. In order to qualify, an Indemnified Contributor must: a) promptly notify the Commercial Contributor in writing of such claim, and b) allow the Commercial Contributor to control, and cooperate with the Commercial Contributor in, the defense and any related settlement negotiations. The Indemnified Contributor may participate in any such claim at its own expense.</p> <p>For example, a Contributor might include the Program in a commercial product offering, Product X. That Contributor is then a Commercial Contributor. If that Commercial Contributor then makes performance claims, or offers warranties related to Product X, those performance claims and warranties are such Commercial Contributor's responsibility alone. Under this section, the Commercial Contributor would have to defend claims against the other Contributors related to those performance claims and warranties, and if a court requires any other Contributor to pay any damages as a result, the Commercial Contributor must pay those damages.</p> <ol> <li>NO WARRANTY</li> </ol> <p>EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, AND TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE PROGRAM IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the Program and assumes all risks associated with its exercise of rights under this Agreement, including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations.</p> <ol> <li>DISCLAIMER OF LIABILITY</li> </ol> <p>EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, AND TO THE EXTENT PERMITTED BY APPLICABLE LAW, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <ol> <li>GENERAL</li> </ol> <p>If any provision of this Agreement is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this Agreement, and without further action by the parties hereto, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.</p> <p>If Recipient institutes patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Program itself (excluding combinations of the Program with other software or hardware) infringes such Recipient's patent(s), then such Recipient's rights granted under Section 2(b) shall terminate as of the date such litigation is filed.</p> <p>All Recipient's rights under this Agreement shall terminate if it fails to comply with any of the material terms or conditions of this Agreement and does not cure such failure in a reasonable period of time after becoming aware of such noncompliance. If all Recipient's rights under this Agreement terminate, Recipient agrees to cease use and distribution of the Program as soon as reasonably practicable. However, Recipient's obligations under this Agreement and any licenses granted by Recipient relating to the Program shall continue and survive.</p> <p>Everyone is permitted to copy and distribute copies of this Agreement, but in order to avoid inconsistency the Agreement is copyrighted and may only be modified in the following manner. The Agreement Steward reserves the right to publish new versions (including revisions) of this Agreement from time to time. No one other than the Agreement Steward has the right to modify this Agreement. The Eclipse Foundation is the initial Agreement Steward. The Eclipse Foundation may assign the responsibility to serve as the Agreement Steward to a suitable separate entity. Each new version of the Agreement will be given a distinguishing version number. The Program (including Contributions) may always be Distributed subject to the version of the Agreement under which it was received. In addition, after a new version of the Agreement is published, Contributor may elect to Distribute the Program (including its Contributions) under the new version.</p> <p>Except as expressly stated in Sections 2(a) and 2(b) above, Recipient receives no rights or licenses to the intellectual property of any Contributor under this Agreement, whether expressly, by implication, estoppel or otherwise. All rights in the Program not expressly granted under this Agreement are reserved. Nothing in this Agreement is intended to be enforceable by any entity that is not a Contributor or Recipient. No third-party beneficiary rights are created under this Agreement.</p> <p>Exhibit A - Form of Secondary Licenses Notice</p> <p>\"This Source Code may also be made available under the following  Secondary Licenses when the conditions for such availability set forth  in the Eclipse Public License, v. 2.0 are satisfied: {name license(s), version(s), and exceptions or additional permissions here}.\"</p> <p>Simply including a copy of this Agreement, including this Exhibit A   is not sufficient to license the Source Code under Secondary Licenses.</p> <p>If it is not possible or desirable to put the notice in a particular   file, then You may include the notice in a location (such as a LICENSE   file in a relevant directory) where a recipient would be likely to   look for such a notice.</p> <p>You may add additional accurate notices of copyright ownership.</p> <p>The MIT License</p> <p>Copyright (c) 2014-, Michael Neale, Nicolas de Loof, Carlos Sanchez, and a number of other of contributors</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"develocity/readme/","title":"Readme","text":"<p>Home / develocity / readme</p>"},{"location":"develocity/readme/#develocity-service","title":"Develocity Service","text":"<p>The Develocity Service at the Eclipse Foundation aims to help Eclipse projects in enabling Develocity by providing a seamless integration to CI pipeline, as well as local builds (opt-in). </p> <p>IMPORTANT: The Eclipse Develocity instance is currently in an experimental phase (staging). During this period, we will integrate the platform with projects interested in participating. Following this integration phase, we will assess the value of Develocity for the community based on the feedback from these pilot projects, its impact on the foundation's infrastructure, and the effort required to maintain it in operational condition.  </p> <p>At the end of this period, and if the feedback is positive, the platform will move into a production phase. Data from the staging platform will not be migrated.</p> <p>NOTE: This experimentation is currently focused primarily on Gradle/Maven projects. However, if a project wants to experiment with other tools, we strongly encourage it. Doing so will provide even more feedback on the overall scope of the product, and thus strengthen the conclusions of this experiment.</p> <ul> <li>Develocity Service<ul> <li>What is Develocity?</li> <li>Quick start!<ul> <li>Gradle<ul> <li>settings.gradle</li> </ul> </li> <li>Maven<ul> <li>.mvn/extensions.xml</li> <li>.mvn/develocity.xml</li> </ul> </li> </ul> </li> <li>CI integration<ul> <li>Request a CI integration</li> <li>CI tools integration<ul> <li>Jenkins</li> <li>GitLab CI</li> <li>GitHub Action</li> </ul> </li> <li>Authenticating to develocity-staging.eclipse.org<ul> <li>CI Builds</li> <li>Local Builds</li> <li>Unauthenticated Builds</li> </ul> </li> <li>Best practices<ul> <li>Obfuscation</li> <li>Tags</li> </ul> </li> </ul> </li> <li>Support</li> <li>Useful link</li> </ul> </li> </ul>"},{"location":"develocity/readme/#what-is-develocity","title":"What is Develocity?","text":"<p>Develocity is a product developed by Gradle as a build data platform and performance management tool aiming to monitor, debug, optimize and accelerate the build and delivery process.</p> <p>It provides insights into build times, tests, requests, caches, ... Helping identify inefficiencies/bottlenecks and offers recommendations to improve build speed and reliability. </p> <p>Develocity integrates seamlessly with many CI: Jenkins, GitLab CI, Github Acions, ... It supports as well many build tools: Gradle, Maven, sbt, bazel</p> <p>The Eclipse Foundation Develocity instance (available at https://develocity-staging.eclipse.org/) is fully featured and freely available for use by all Eclipse Foundation projects. When a project onboards its product to Develocity, every CI build and every local build from an authenticated Eclipse committer uploads a Build Scan\u00ae. A Build Scan\u00ae contains deep build insights that can help troubleshoot build failures and performance issues. By aggregating these Build Scans\u00ae, Develocity also provides:</p> <ul> <li>Dashboards to view all historical Build Scans\u00ae and performance trends over time</li> <li>Build failure analytics for enhanced investigation and diagnosis of build failures</li> <li>Test failure analytics to better understand trends and causes around slow, failing, and flaky tests</li> </ul>"},{"location":"develocity/readme/#quick-start","title":"Quick start!","text":"<p>The Develocity platform can be accessed at https://develocity-staging.eclipse.org/ by using your Eclipse account: email / password.</p> <p>Generically, onboarding a project to Develocity consists of: - Applying Develocity to the build  - Configuring Develocity to:   - Send Build Scans\u00ae to https://develocity-staging.eclipse.org   - Always publish Build Scans\u00ae if authenticated   - Upload Build Scans\u00ae in the background for local builds and in the foreground for CI builds   - Apply Common Custom User Data to the build - Configuring build caching:   - Enable local caching for local builds only (unless CI builds are already using local cache)   - Disable remote caching (unless builds are already using a remote cache, or you want to use / experiment with it)</p>"},{"location":"develocity/readme/#gradle","title":"Gradle","text":"<p>The following sample shows a minimal Develocity configuration for a project building with Gradle 6 or above, using Groovy build scripts. A kotlin script sample (<code>setting.gradle.kts</code>) is available here.</p>"},{"location":"develocity/readme/#settingsgradle","title":"settings.gradle","text":"<p><pre><code>plugins {\n    id 'com.gradle.develocity' version '3.18.1'\n    id 'com.gradle.common-custom-user-data-gradle-plugin' version '2.0.2'\n}\n\ndef isCI = System.getenv('CI') != null // adjust to your CI provider\n\ndevelocity {\n    server = \"https://develocity-staging.eclipse.org\"\n    projectId = \"project-identifier\" // adjust to your project identifier / descriptor\n    buildScan {\n        uploadInBackground = !isCI\n        publishing.onlyIf { it.isAuthenticated() }\n        obfuscation {\n            username { _ -&gt; \"eclipse-\" + System.getenv(\"EF_SHORT_NAME\") + \"-bot\" }\n            ipAddresses { addresses -&gt; addresses.collect { address -&gt; \"0.0.0.0\" } }\n        }\n    }\n}\n\nbuildCache {\n    // disable local caching in CI, unless already used by the build\n    local {\n        enabled = !isCI\n    }\n    // disable remote caching, unless already used by the build or you want to use / experiment with it\n    remote(develocity.buildCache) {\n        enabled = false\n        push = isCI\n    }\n}\n\nrootProject.name = 'project-name' // adjust to your project name\n</code></pre> See the Develocity compatibility chart for the most recent version of the Develocity Gradle Plugin compatible with the currently installed version of Develocity at https://develocity-staging.eclipse.org/.</p> <p>See the Common Custom User Data Gradle Plugin releases page for the most recent version of the Common Custom User Data Gradle Plugin.</p> <p>For information about configuring Develocity for Gradle versions before 6, see the Develocity Gradle Plugin User Manual.</p>"},{"location":"develocity/readme/#maven","title":"Maven","text":"<p>The following sample shows a Develocity configuration for a Maven project:</p>"},{"location":"develocity/readme/#mvnextensionsxml","title":".mvn/extensions.xml","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;extensions&gt;\n    &lt;extension&gt;\n        &lt;groupId&gt;com.gradle&lt;/groupId&gt;\n        &lt;artifactId&gt;develocity-maven-extension&lt;/artifactId&gt;\n        &lt;version&gt;1.22.2&lt;/version&gt;\n    &lt;/extension&gt;\n    &lt;extension&gt;\n        &lt;groupId&gt;com.gradle&lt;/groupId&gt;\n        &lt;artifactId&gt;common-custom-user-data-maven-extension&lt;/artifactId&gt;\n        &lt;version&gt;2.0.1&lt;/version&gt;\n    &lt;/extension&gt;\n&lt;/extensions&gt;\n</code></pre>"},{"location":"develocity/readme/#mvndevelocityxml","title":".mvn/develocity.xml","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?&gt;\n&lt;develocity\n    xmlns=\"https://www.gradle.com/develocity-maven\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"https://www.gradle.com/develocity-maven https://www.gradle.com/schema/develocity-maven.xsd\"&gt;\n  &lt;server&gt;\n    &lt;url&gt;https://develocity-staging.eclipse.org&lt;/url&gt;\n  &lt;/server&gt;\n  &lt;projectId&gt;project-identifier&lt;/projectId&gt; &lt;!-- adjust to your project identifier / descriptor --&gt;\n  &lt;buildScan&gt;\n    &lt;obfuscation&gt;\n      &lt;username&gt;#{'eclipse-' + env['EF_SHORT_NAME'] + '-bot'}&lt;/username&gt;\n      &lt;ipAddresses&gt;0.0.0.0&lt;/ipAddresses&gt;\n    &lt;/obfuscation&gt;\n    &lt;publishing&gt;\n      &lt;onlyIf&gt;\n        &lt;![CDATA[authenticated]]&gt;\n      &lt;/onlyIf&gt;\n    &lt;/publishing&gt;\n    &lt;backgroundBuildScanUpload&gt;#{isFalse(env['CI'])}&lt;/backgroundBuildScanUpload&gt; &lt;!-- adjust to your CI provider --&gt;\n  &lt;/buildScan&gt;\n  &lt;buildCache&gt;\n    &lt;local&gt;\n      &lt;enabled&gt;#{isFalse(env['CI'])}&lt;/enabled&gt;\n    &lt;/local&gt;\n    &lt;remote&gt;\n      &lt;enabled&gt;false&lt;/enabled&gt;\n      &lt;storeEnabled&gt;#{isTrue(env['CI'])}&lt;/storeEnabled&gt; &lt;!-- adjust to your CI provider --&gt;\n    &lt;/remote&gt;\n  &lt;/buildCache&gt;\n&lt;/develocity&gt;\n</code></pre> <p>See the Develocity compatibility chart for the most recent version of the Develocity Maven Extension compatible with the currently installed version of Develocity at https://develocity-staging.eclipse.org/.</p> <p>See the Common Custom User Data Maven Extension releases page for the most recent version of the Common Custom User Data Gradle Plugin.</p>"},{"location":"develocity/readme/#ci-integration","title":"CI integration","text":""},{"location":"develocity/readme/#request-a-ci-integration","title":"Request a CI integration","text":"<p>A Develocity integration within CI can be requested by filling a ticket on the helpdesk.  Please ensure your project lead has approved with a +1 the request. </p> <p>This integration will provide:  * A Develocity CI Bot with CI permission on the platform * Secrets integration with the Secrets Manager * Accessing secrets from any CI * Accessing Develocity platform from any CI</p>"},{"location":"develocity/readme/#ci-tools-integration","title":"CI tools integration","text":"<p>https://docs.gradle.com/develocity/get-started/#integrating_your_ci_tool</p>"},{"location":"develocity/readme/#jenkins","title":"Jenkins","text":"<pre><code>def secrets = [\n  [path: 'cbi/&lt;project_id&gt;/develocity.eclipse.org', secretValues: [\n    [envVar: 'DEVELOCITY_ACCESS_KEY', vaultKey: 'api-token']\n    ]\n  ]\n]\n\npipeline {\n    agent any\n    tools {\n        maven 'apache-maven-3.9.6'\n        jdk 'openjdk-jdk17-latest'\n    }\n    stages {\n        stage('Build') {\n            steps {\n                withVault([vaultSecrets: secrets]) {\n                    sh 'mvn clean verify -Prelease -B'\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"develocity/readme/#gitlab-ci","title":"GitLab CI","text":"<p>see: GitLab CI templates</p> <ol> <li>Gradle</li> </ol> <pre><code>include:\n  - local: /jobs/develocity.eclipse.org.gitlab-ci.yml\n\ndevelocity.eclipse.org-gradle-test:\n  extends: \n    - .ef-build-develocity-gradle\n</code></pre> <ol> <li>Maven</li> </ol> <pre><code>include:\n  - local: /jobs/develocity.eclipse.org.gitlab-ci.yml\n\ndevelocity.eclipse.org-mvn-test:\n  extends: \n    - .ef-build-develocity-maven\n</code></pre> <p>This can be easily overwritten by extending <code>.ef-build-develocity</code>:</p> <pre><code>develocity.eclipse.org-mvn-test:\n  extends: .ef-build-develocity\n  variables:\n    MAVEN_OPTS: \"-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true\"\n    MAVEN_CLI_OPTS: \"--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true\"\n  script:\n    - !reference [.injectDevelocityForMaven]\n    - ./mvnw clean deploy -s settings.xml\n</code></pre>"},{"location":"develocity/readme/#github-action","title":"GitHub Action","text":"<p>Prerequisite: Ask for a token: <code>DEVELOCITY_ACCESS_KEY</code> in your GitHub Organization.</p> <ol> <li>Gradle: </li> <li>https://docs.gradle.com/develocity/get-started/#github_actions</li> <li>https://github.com/gradle/gradle-build-action</li> </ol> <pre><code>jobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout sources\n      uses: actions/checkout@v4\n    - name: Setup Gradle\n      uses: gradle/actions/setup-gradle@v3\n    - name: Build with Gradle\n      run: ./gradlew build\n      env:\n          DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_ACCESS_KEY }}\n</code></pre> <ol> <li>Maven: </li> <li>https://docs.gradle.com/develocity/get-started/#github_actions</li> <li>https://github.com/gradle/develocity-actions</li> </ol> <pre><code>jobs:\n  build:  \n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout sources\n        uses: actions/checkout@v4\n      - name: Setup Maven\n        uses: gradle/develocity-actions/maven-setup@v1\n      - name: Build with Maven\n        run: ./mvnw clean package\n        env:\n            DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_ACCESS_KEY }}\n</code></pre>"},{"location":"develocity/readme/#authenticating-to-develocity-stagingeclipseorg","title":"Authenticating to develocity-staging.eclipse.org","text":""},{"location":"develocity/readme/#ci-builds","title":"CI Builds","text":"<p>CI environments are most commonly configured to read access keys from an environment variable, stored as a secret. Onboarded Gradle and Maven CI builds will look for the environment variable <code>DEVELOCITY_ACCESS_KEY</code> and use its value to authenticate to develocity-staging.eclipse.org.</p>"},{"location":"develocity/readme/#local-builds","title":"Local Builds","text":"<p>In order to authenticate a local development machine, Develocity offers automated access key provisioning:</p> <ul> <li>Automated access key provisioning for Gradle builds </li> <li>Automated access key provisioning for Maven builds</li> </ul> <p>When executed, the automated provisioning launches a web browser to develocity-staging.eclipse.org and asks you to sign in. All Eclipse Foundation committers can log in using their Eclipse account: email / password.</p>"},{"location":"develocity/readme/#unauthenticated-builds","title":"Unauthenticated Builds","text":"<p>Builds that are not authenticated to Develocity will simply not publish a Build Scan\u00ae. A lack of authentication will not cause the build to fail and will not be shown to the user. This includes builds by unauthenticated Eclipse committers, unauthenticated CI systems, or community contributors.</p>"},{"location":"develocity/readme/#best-practices","title":"Best practices","text":""},{"location":"develocity/readme/#obfuscation","title":"Obfuscation","text":"<ol> <li>Gradle: <code>build.gradle.kts</code></li> </ol> <p>doc: https://docs.gradle.com/develocity/gradle-plugin/current/#obfuscating_identifying_data</p> <pre><code>develocity {\n    buildScan {        \n        obfuscation {\n            username { _ -&gt; \"eclipse-\" + System.getenv(\"EF_SHORT_NAME\") + \"-bot\" }\n            ipAddresses { addresses -&gt; addresses.map { _ -&gt; \"0.0.0.0\" } }\n        }\n    }\n}\n</code></pre> <ol> <li>Maven: <code>.mvn/develocity.xml</code></li> </ol> <p>doc: https://docs.gradle.com/develocity/maven-extension/current/#obfuscating_identifying_data</p> <pre><code>&lt;develocity&gt;\n  ...\n  &lt;buildScan&gt;\n    &lt;obfuscation&gt;\n      &lt;username&gt;#{'eclipse-' + env['EF_SHORT_NAME'] + '-bot'}&lt;/username&gt;\n      &lt;ipAddresses&gt;'0.0.0.0'&lt;/ipAddresses&gt;\n    &lt;/obfuscation&gt;\n  &lt;/buildScan&gt;\n&lt;/develocity&gt;\n</code></pre>"},{"location":"develocity/readme/#tags","title":"Tags","text":"<ol> <li>Gradle: <code>build.gradle.kts</code></li> </ol> <p>doc: https://docs.gradle.com/develocity/gradle-plugin/current/#adding_tags</p> <p>e.g: with Gitlab CI </p> <pre><code>develocity {\n    buildScan {\n        tag(System.getenv(\"EF_SHORT_NAME\"))\n        tag(\"GitLab CI\")\n        link(\"VCS\", \"${System.getenv(\"CI_PROJECT_URL\")}/-/tree/${System.getenv(\"CI_COMMIT_REF_NAME\")}?ref_type=heads\")\n        value(\"Build Number\", \"${System.getenv(\"CI_PIPELINE_ID\")}\")\n    }\n}\n</code></pre> <ol> <li>Maven: <code>.mvn/develocity.xml</code></li> </ol> <p>doc: https://docs.gradle.com/develocity/maven-extension/current/#adding_tags</p> <pre><code>&lt;buildScan&gt;\n    &lt;tags&gt;\n      &lt;tag&gt;#{env['EF_SHORT_NAME']}&lt;/tag&gt;\n      &lt;tag&gt;maven&lt;/tag&gt;\n      &lt;tag&gt;Gitlab CI&lt;/tag&gt;\n    &lt;/tags&gt;\n&lt;/buildScan&gt;\n</code></pre>"},{"location":"develocity/readme/#support","title":"Support","text":"<ul> <li>HelpDesk</li> <li>IT chat service room: #eclipsefdn.it:matrix.eclipse.org</li> </ul>"},{"location":"develocity/readme/#useful-link","title":"Useful link","text":"<ul> <li>Develocity Documentation</li> <li>Gradle integration</li> <li>Maven integration</li> <li>CI Integration</li> <li>GitLab CI templates</li> <li>GitHub Action Gradle</li> <li>Develocity maven GitHub Action</li> <li>Develocity Gradle GitHub Action</li> <li>Gradle obfuscation</li> <li>Maven obfuscation</li> <li>Gradle tags</li> <li>Maven tags</li> </ul>"},{"location":"signing-services/","title":"Index","text":"<p>Home / signing-services</p>"},{"location":"signing-services/#cbi-maven-plugins-and-digital-signing-services","title":"CBI Maven plugins and digital signing services","text":"<p>This project requires Java 17+.</p>"},{"location":"signing-services/#deploy-a-new-released-version","title":"Deploy a new released version","text":"<ul> <li>Build a release</li> <li>https://ci.eclipse.org/cbi/job/org.eclipse.cbi/job/main/ and set <code>RELEASE_VERSION</code> and <code>NEXT_DEVELOPMENT_VERSION</code> to proper values</li> <li>Checkout tag <code>v$RELEASE_VERSION</code> and run  <pre><code>./webservice/service-deployment.sh webservice/signing/jar/default.jsonnet\n./webservice/service-deployment.sh webservice/signing/jar/jce.jsonnet\n./webservice/service-deployment.sh webservice/signing/windows/service.jsonnet\n</code></pre></li> </ul>"},{"location":"signing-services/#deploy-an-old-released-version","title":"Deploy an old released version","text":"<pre><code>VERSION=\"1.3.0\"\n./webservice/service-deployment.sh webservice/signing/jar/default.jsonnet \"${VERSION}\"\n./webservice/service-deployment.sh webservice/signing/jar/jce.jsonnet \"${VERSION}\"\n./webservice/service-deployment.sh webservice/signing/windows/service.jsonnet \"${VERSION}\"\n</code></pre>"},{"location":"signing-services/#deploy-staging-version-when-version-in-pom-is-snapshot","title":"Deploy staging version (when version in pom is -SNAPSHOT)","text":"<p>From a laptop with access to deployment cluster <code>make clean jar-signing authenticode-signing</code></p>"},{"location":"signing-services/CONTRIBUTING/","title":"CONTRIBUTING","text":"<p>Home / signing-services / CONTRIBUTING</p>"},{"location":"signing-services/CONTRIBUTING/#contributing-to-eclipse-common-build-infrastructure","title":"Contributing to Eclipse Common Build Infrastructure","text":"<p>Thanks for your interest in this project.</p>"},{"location":"signing-services/CONTRIBUTING/#project-description","title":"Project description","text":"<p>The Eclipse Common Build Infrastructure (CBI) combines technologies and practices for building Eclipse Software.</p> <ul> <li>https://projects.eclipse.org/projects/technology.cbi</li> </ul>"},{"location":"signing-services/CONTRIBUTING/#developer-resources","title":"Developer resources","text":"<p>Information regarding source code management, builds, coding standards, and more.</p> <ul> <li>https://projects.eclipse.org/projects/technology.cbi/developer</li> </ul> <p>This project uses GitHub issues on the respective repositories to track ongoing development and issues.</p> <p>Be sure to search for existing bugs before you create another one. Remember that contributions are always welcome!</p>"},{"location":"signing-services/CONTRIBUTING/#eclipse-development-process","title":"Eclipse Development Process","text":"<p>This Eclipse Foundation open project is governed by the Eclipse Foundation Development Process and operates under the terms of the Eclipse IP Policy.</p>"},{"location":"signing-services/CONTRIBUTING/#eclipse-contributor-agreement","title":"Eclipse Contributor Agreement","text":"<p>Before your contribution can be accepted by the project team contributors must electronically sign the Eclipse Contributor Agreement (ECA).</p> <ul> <li>http://www.eclipse.org/legal/ECA.php</li> </ul> <p>Commits that are provided by non-committers must have a Signed-off-by field in the footer indicating that the author is aware of the terms by which the contribution has been provided to the project. The non-committer must additionally have an Eclipse Foundation account and must have a signed Eclipse Contributor Agreement (ECA) on file.</p> <p>For more information, please see the Eclipse Committer Handbook: https://www.eclipse.org/projects/handbook/#resources-commit</p>"},{"location":"signing-services/CONTRIBUTING/#contact","title":"Contact","text":"<p>Contact the project developers via the project's dev list.</p> <ul> <li>mailto:cbi-dev@eclipse.org</li> </ul>"},{"location":"signing-services/NOTICE/","title":"NOTICE","text":"<p>Home / signing-services / NOTICE</p>"},{"location":"signing-services/NOTICE/#notices-for-eclipse-common-build-infrastructure","title":"Notices for Eclipse Common Build Infrastructure","text":"<p>This content is produced and maintained by the Eclipse Common Build Infrastructure project.</p> <ul> <li>Project home: https://projects.eclipse.org/projects/technology.cbi</li> </ul>"},{"location":"signing-services/NOTICE/#trademarks","title":"Trademarks","text":"<p>Eclipse Common Build Infrastructure, and Common Build Infrastructure are trademarks of the Eclipse Foundation.</p>"},{"location":"signing-services/NOTICE/#copyright","title":"Copyright","text":"<p>All content is the property of the respective authors or their employers. For more information regarding authorship of content, please consult the listed source code repository logs.</p>"},{"location":"signing-services/NOTICE/#declared-project-licenses","title":"Declared Project Licenses","text":"<p>This program and the accompanying materials are made available under the terms of the Eclipse Public License 2.0 which is available at https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html.</p> <p>SPDX-License-Identifier: EPL-2.0</p>"},{"location":"signing-services/NOTICE/#source-code","title":"Source Code","text":"<p>The project maintains the source code repositories as listed on  https://projects.eclipse.org/projects/technology.cbi/developer</p>"},{"location":"signing-services/NOTICE/#third-party-content","title":"Third-party Content","text":"<p>This project leverages the following third party content.</p>"},{"location":"signing-services/NOTICE/#cryptography","title":"Cryptography","text":"<p>Content may contain encryption software. The country in which you are currently may have restrictions on the import, possession, and use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check the country's laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted.</p>"},{"location":"signing-services/cli-tools/signing/jar/","title":"Index","text":"<p>Home / signing-services / cli-tools / signing / jar</p>"},{"location":"signing-services/cli-tools/signing/jar/#description","title":"Description:","text":"<p>sign: entry point.    Take a jar or a zip, an output dir, and a directive about how to queue the process (mail, nomail, now)   It builds a queue line (see below for the format)   If \"now\", netcat to SIGN_SERVER_HOSTNAME:SIGN_SERVER_PORT, otherwise write the line to QUEUE</p> <p>sign_queue_process.sh: cronjob and xinetd service   * if started from xinetd, read stdin for the queueline, and process it   * if started from cron, copy the QUEUE to a new queue (filename + PPID of the current run),   it iterates on all lines on this new queue file and process them</p> <p>processing a queue line is about spliting the parameter, and calling the jar processor on it.   The jar processor will itself call a sign script.</p> <p>Java version synchronization is done through the usage of jar_processor_signer_javaX symlinks, and    all path are configured in \"config\" file.</p>"},{"location":"signing-services/cli-tools/signing/jar/#format-of-the-queue-file","title":"Format of the Queue file","text":"<p>date:username:filetobesigned:queueoption:outputdir:skiprepack:java_version</p> <p>queueoption= mail|nomail|now skiprepack=empty or skiprepack java_version=java[0-9]+</p>"},{"location":"signing-services/maven-plugins/","title":"Index","text":"<p>Home / signing-services / maven-plugins CBI plugins is a set of Maven plugins that enable projects to use the Eclipse infrastructure to sign their build artifacts via Maven.</p> <p>wiki: http://wiki.eclipse.org/CBI</p> <p>mailing list: https://dev.eclipse.org/mailman/listinfo/cbi-dev</p> <p>bugzilla: https://bugs.eclipse.org</p> <p>sitedocs: http://www.eclipse.org/cbi/sitedocs</p>"},{"location":"signing-services/maven-plugins/#using-the-plugins","title":"Using the plugins","text":"<p>Add the CBI repository to your Maven &lt;pluginRepositories&gt; section</p> <pre><code>https://repo.eclipse.org/content/repositories/cbi-releases/\n\n*** Note the macsigner and winsigner plugins are available\n    starting with version 1.0.4 or later.\n</code></pre>"},{"location":"signing-services/maven-plugins/#using-eclipse-jarsigner-plugin","title":"Using eclipse-jarsigner-plugin","text":"<p>This plugin will sign your artifacts during the build and product signed jar jar files. The implementation of this plugin signs the artifacts during when a each specific artifact is built so they are signed individually allowing Maven and Tycho to gather the already signed artifacts when creating repositories or products. As such a signing profile should be created in your parent pom to enable this plugin.</p> <p>If your project is a Maven project using the plugin to sign your Maven jars can be done by adding a section.</p> <pre><code>&lt;profiles&gt;\n  &lt;profile&gt;\n    &lt;id&gt;sign&lt;/id&gt;\n    &lt;build&gt;\n      &lt;plugins&gt;\n        &lt;plugin&gt;\n          &lt;groupId&gt;org.eclipse.cbi.maven.plugins&lt;/groupId&gt;\n          &lt;artifactId&gt;eclipse-jarsigner-plugin&lt;/artifactId&gt;\n          &lt;version&gt;1.0.5&lt;/version&gt;\n          &lt;executions&gt;\n            &lt;execution&gt;\n              &lt;id&gt;sign&lt;/id&gt;\n              &lt;phase&gt;verify&lt;/phase&gt;\n              &lt;goals&gt;\n                &lt;goal&gt;sign&lt;/goal&gt;\n              &lt;/goals&gt;\n            &lt;/execution&gt;\n          &lt;/executions&gt;\n        &lt;/plugin&gt;\n      &lt;/plugins&gt;\n    &lt;/build&gt;\n  &lt;/profile&gt;\n&lt;/profiles&gt;\n</code></pre> <p>It is possible to override the default signing URL to use a service outside of the Eclipse Infrastructure. There are 2 ways to accomplish this.</p>"},{"location":"signing-services/maven-plugins/#method-1-via-commandline","title":"Method 1: via commandline","text":"<pre><code>-Dcbi.jarsigner.signerUrl=http://localhost\n</code></pre>"},{"location":"signing-services/maven-plugins/#method-2-via-pomxml","title":"Method 2: via pom.xml","text":"<pre><code>&lt;configuration&gt;\n  &lt;signerUrl&gt;http://localhost&lt;/signerUrl&gt;\n&lt;/configuration&gt;\n</code></pre> <p>If your project's a Tycho project that needs pack200 to be included in in your p2 repository you can use the Tycho pack200 plugin along with the eclipse-jarsigner-plugin as follows:</p> <pre><code>&lt;profiles&gt;\n  &lt;profile&gt;\n    &lt;id&gt;eclipse-sign&lt;/id&gt;\n    &lt;build&gt;\n      &lt;plugins&gt;\n        &lt;plugin&gt;\n          &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;\n          &lt;artifactId&gt;target-platform-configuration&lt;/artifactId&gt;\n          &lt;version&gt;0.18.0&lt;/version&gt;\n          &lt;configuration&gt;\n            &lt;includePackedArtifacts&gt;false&lt;/includePackedArtifacts&gt;\n          &lt;/configuration&gt;\n        &lt;/plugin&gt;\n        &lt;plugin&gt;\n          &lt;groupId&gt;org.eclipse.tycho.extras&lt;/groupId&gt;\n          &lt;artifactId&gt;tycho-pack200a-plugin&lt;/artifactId&gt;\n          &lt;version&gt;0.18.0&lt;/version&gt;\n          &lt;executions&gt;\n            &lt;execution&gt;\n              &lt;id&gt;pack200-normalize&lt;/id&gt;\n              &lt;goals&gt;\n                &lt;goal&gt;normalize&lt;/goal&gt;\n              &lt;/goals&gt;\n              &lt;phase&gt;verify&lt;/phase&gt;\n            &lt;/execution&gt;\n          &lt;/executions&gt;\n        &lt;/plugin&gt;\n        &lt;plugin&gt;\n          &lt;groupId&gt;org.eclipse.cbi.maven.plugins&lt;/groupId&gt;\n          &lt;artifactId&gt;eclipse-jarsigner-plugin&lt;/artifactId&gt;\n          &lt;version&gt;1.0.5&lt;/version&gt;\n          &lt;executions&gt;\n            &lt;execution&gt;\n              &lt;id&gt;sign&lt;/id&gt;\n              &lt;goals&gt;\n                &lt;goal&gt;sign&lt;/goal&gt;\n              &lt;/goals&gt;\n              &lt;phase&gt;verify&lt;/phase&gt;\n            &lt;/execution&gt;\n          &lt;/executions&gt;\n        &lt;/plugin&gt;\n        &lt;plugin&gt;\n          &lt;groupId&gt;org.eclipse.tycho.extras&lt;/groupId&gt;\n          &lt;artifactId&gt;tycho-pack200b-plugin&lt;/artifactId&gt;\n          &lt;version&gt;0.18.0&lt;/version&gt;\n          &lt;executions&gt;\n            &lt;execution&gt;\n              &lt;id&gt;pack200-pack&lt;/id&gt;\n              &lt;goals&gt;\n                &lt;goal&gt;pack&lt;/goal&gt;\n              &lt;/goals&gt;\n              &lt;phase&gt;verify&lt;/phase&gt;\n            &lt;/execution&gt;\n          &lt;/executions&gt;\n        &lt;/plugin&gt;\n        &lt;plugin&gt;\n          &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;\n          &lt;artifactId&gt;tycho-p2-plugin&lt;/artifactId&gt;\n          &lt;version&gt;0.18.0&lt;/version&gt;\n          &lt;executions&gt;\n            &lt;execution&gt;\n              &lt;id&gt;p2-metadata&lt;/id&gt;\n              &lt;goals&gt;\n                &lt;goal&gt;p2-metadata&lt;/goal&gt;\n              &lt;/goals&gt;\n              &lt;phase&gt;verify&lt;/phase&gt;\n            &lt;/execution&gt;\n          &lt;/executions&gt;\n          &lt;configuration&gt;\n            &lt;defaultP2Metadata&gt;false&lt;/defaultP2Metadata&gt;\n          &lt;/configuration&gt;\n        &lt;/plugin&gt;\n      &lt;/plugins&gt;\n    &lt;/build&gt;\n  &lt;/profile&gt;\n&lt;/profiles&gt;\n</code></pre> <p>More details on Tycho pack200 can be found on the Tycho wiki page:     http://wiki.eclipse.org/Tycho/Pack200</p>"},{"location":"signing-services/maven-plugins/#using-eclipse-macsigner-plugin","title":"Using eclipse-macsigner-plugin","text":"<p>Here is the standard POM configuration:</p> <pre><code>&lt;plugin&gt;\n  &lt;groupId&gt;org.eclipse.cbi.maven.plugins&lt;/groupId&gt;\n  &lt;artifactId&gt;eclipse-macsigner-plugin&lt;/artifactId&gt;\n  &lt;version&gt;1.0.5&lt;/version&gt;\n  &lt;executions&gt;\n    &lt;execution&gt;\n      &lt;id&gt;sign&lt;/id&gt;\n      &lt;phase&gt;package&lt;/phase&gt;\n      &lt;goals&gt;\n        &lt;goal&gt;sign&lt;/goal&gt;\n      &lt;/goals&gt;\n      &lt;configuration&gt;\n        &lt;signFiles&gt;\n          &lt;signFile&gt;${project.build.directory}/products/org.eclipse.sdk.ide/macosx/cocoa/x86/eclipse/eclipse.app&lt;/signFile&gt;\n          &lt;signFile&gt;${project.build.directory}/products/org.eclipse.sdk.ide/macosx/cocoa/x86_64/eclipse/eclipse.app&lt;/signFile&gt;\n        &lt;/signFiles&gt;\n      &lt;/configuration&gt;\n    &lt;/execution&gt;\n  &lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre> <p>An alternate configuration is:</p> <pre><code>    &lt;configuration&gt;\n      &lt;baseSearchDir&gt;${project.build.directory}/products/org.eclipse.sdk.ide&lt;/baseSearchDir&gt;\n      &lt;fileNames&gt;\n        &lt;fileName&gt;eclipse.app&lt;/fileName&gt;\n      &lt;/fileNames&gt;\n    &lt;/configuration&gt;\n</code></pre> <p>${fileNames} sets the app names that you would like signed and ${baseSearchDir} sets the directory that the plugin will recursively search for them from. eclipse.app is the default value for ${fileNames} and ${project.build.directory}/products/${project.artifactId}/ is the default value for ${baseSearchDir}, so it is not necessary to set these variables if this is the configuration that you want.</p> <p>If the ${signFiles} variable is set then the plugin will only sign those specific directories (if they exists) and nothing else, even if ${fileNames} and  ${baseSearchDir} are set.</p> <p>Please note that only the \"Contents\" folder will be added to a zip archive and sent to the signing service for signing because only that folder is relevant for Mac OS code signing. After signing, the signed archive will be received from the download service and extracted back into the app folder.</p> <p>In case you need to provide custom rules for resource signing to the signing service please create a standard CodeResources file in \"..app/Contents/_CodeSignature\" folder. The Eclipse signing service will detect an existing file and use it as input for the the Mac OS code signing tool to specify rules such as which resources should be excluded, etc.</p> <p>It is possible to override the default signing URL to use a service outside of the Eclipse Infrastructure. There are 2 ways to accomplish this.</p>"},{"location":"signing-services/maven-plugins/#method-1-via-commandline_1","title":"Method 1: via commandline","text":"<pre><code>-Dcbi.macsigner.signerUrl=http://localhost\n</code></pre>"},{"location":"signing-services/maven-plugins/#method-2-via-pomxml_1","title":"Method 2: via pom.xml","text":"<pre><code>&lt;configuration&gt;\n  &lt;signerUrl&gt;http://localhost&lt;/signerUrl&gt;\n&lt;/configuration&gt;\n</code></pre>"},{"location":"signing-services/maven-plugins/#using-eclipse-winsigner-plugin","title":"Using eclipse-winsigner-plugin","text":"<p>Here is the standard POM configuration:</p> <pre><code>&lt;plugin&gt;\n  &lt;groupId&gt;org.eclipse.cbi.maven.plugins&lt;/groupId&gt;\n  &lt;artifactId&gt;eclipse-winsigner-plugin&lt;/artifactId&gt;\n  &lt;version&gt;1.0.5&lt;/version&gt;\n  &lt;executions&gt;\n    &lt;execution&gt;\n      &lt;id&gt;sign&lt;/id&gt;\n      &lt;goals&gt;\n        &lt;goal&gt;sign&lt;/goal&gt;\n      &lt;/goals&gt;\n      &lt;phase&gt;package&lt;/phase&gt;\n      &lt;configuration&gt;\n        &lt;signFiles&gt;\n          &lt;signFile&gt;${project.build.directory}/products/org.eclipse.sdk.ide/win32/win32/x86/eclipse/eclipse.exe&lt;/signFile&gt;\n          &lt;signFile&gt;${project.build.directory}/products/org.eclipse.sdk.ide/win32/win32/x86/eclipse/eclipsec.exe&lt;/signFile&gt;\n        &lt;/signFiles&gt;\n      &lt;/configuration&gt;\n    &lt;/execution&gt;\n  &lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre> <p>An alternate configuration is:</p> <pre><code>    &lt;configuration&gt;\n      &lt;baseSearchDir&gt;${project.build.directory}/products/org.eclipse.sdk.ide&lt;/baseSearchDir&gt;\n      &lt;fileNames&gt;\n        &lt;fileName&gt;eclipse.exe&lt;/fileName&gt;\n        &lt;fileName&gt;eclipsec.exe&lt;/fileName&gt;\n      &lt;/fileNames&gt;\n    &lt;/configuration&gt;\n</code></pre> <p>${fileNames} sets the executable names that you would like signed and ${baseSearchDir} sets the directory that the plugin will recursively search for them from. eclipse.exe and eclipsec.exe are the default values for ${fileNames} and ${project.build.directory}/products/${project.artifactId}/ is the defualt value for ${baseSearchDir}, so it is not necessary to set these variables if this is the configuration that you want.</p> <p>If the ${signFiles} variable is set then the plugin will only sign those specific files (if they exists) and nothing else, even if ${fileNames} and ${baseSearchDir} are set.</p> <p>It is possible to override the default signing URL to use a service outside of the Eclipse Infrastructure. There are 2 ways to accomplish this.</p>"},{"location":"signing-services/maven-plugins/#method-1-via-commandline_2","title":"Method 1: via commandline","text":"<pre><code>-Dcbi.winsigner.signerUrl=http://localhost\n</code></pre>"},{"location":"signing-services/maven-plugins/#method-2-via-pomxml_2","title":"Method 2: via pom.xml","text":"<pre><code>&lt;configuration&gt;\n  &lt;signerUrl&gt;http://localhost&lt;/signerUrl&gt;\n&lt;/configuration&gt;\n</code></pre>"},{"location":"signing-services/webservice/signing/macosx/","title":"Index","text":"<p>Home / signing-services / webservice / signing / macosx</p>"},{"location":"signing-services/webservice/signing/macosx/#requirement","title":"Requirement","text":"<ul> <li>Java 8+</li> </ul>"},{"location":"signing-services/webservice/signing/macosx/#how-to-run-it","title":"How to run it?","text":"<pre><code>java -jar target/signing-macosx-X.Y.Z.jar -c etc/signing-macosx.properties\n</code></pre>"},{"location":"signing-services/webservice/signing/macosx/#how-to-build-it","title":"How to build it?","text":"<pre><code>mvn clean verify\n</code></pre>"},{"location":"signing-services/webservice/signing/macosx/#how-to-daemonize-it","title":"How to daemonize it?","text":"<p>Use launchd (see http://launchd.info/ and Apple's documentation)</p> <p>In the <code>launchd/</code> folder, there are two files:</p> <ul> <li><code>start.sh</code> a simple start script to put in <code>/Users/genie/signing</code> (along with the <code>jar</code>). It will automatically choose the latest version of the JAR in this directory.</li> <li><code>org.eclipsefoundation.signing.macosx.plist</code>, the daemon descriptor, to copy in <code>/Library/LaunchDaemons</code>.</li> </ul> <p>To start the daemon (will be started automatically in case of reboot thanks to <code>-w</code> option):</p> <pre><code>launchctl load -w /Library/LaunchDaemons/org.eclipsefoundation.signing.macosx.plist\n</code></pre> <p>To stop the daemon (will not be restarted after the next reboot because of the <code>-w</code> option):</p> <pre><code>launchctl unload -w /Library/LaunchDaemons/org.eclipsefoundation.signing.macosx.plist\n</code></pre> <p>ie <code>-w</code> make load and unload permanent.</p>"},{"location":"signing-services/website/content/","title":"Index","text":"<p>Home / signing-services / website / content +++ type = \"index\" toc = true +++</p> <p>The Eclipse Common Build Infrastructure (CBI) is an initiative combining technologies and practices for building Eclipse Software.</p>"},{"location":"signing-services/website/content/#what-is-cbi","title":"What is CBI","text":"<p>The core of CBI today is Maven with the Tycho plugins. The Tycho plugins teach Maven how to build (and consume) Eclipse plugins and OSGi bundles. This enables building Eclipse projects with \"maven clean install\" just as one would build other Maven projects.</p> <p>Common services such as the Jar signing facility, MacOS signing facility, and Windows signing facility are also included with CBI. Other tools and services may be included in the future as the need arises.</p> <p>Over time mature templates and common pom.xml files will be provided that set common values finely honed with experience.</p> <p>One might go so far as to include Git, Hudson, the build slaves, and Nexus (aka. the artifact repository &amp; server side of Maven) as part of CBI since they are also common and crucial to builds.</p> <p>Gerrit, Bugzilla, and the Downloads site are closely related. Some might consider them part of CBI as well.</p>"},{"location":"signing-services/website/content/#who-is-using-it","title":"Who is using it?","text":"<p>There's a list of projects building with CBI available.</p> <p>The Eclipse Foundation would like to have more than 50% of projects building with CBI by end of 2013.</p>"},{"location":"signing-services/website/content/#initiative-goals","title":"Initiative Goals","text":""},{"location":"signing-services/website/content/#primary","title":"Primary","text":"<ul> <li>Make it really easy to contribute Eclipse projects</li> <li>Make it really easy to copy &amp; modify source</li> <li>Make it really easy to build</li> <li>Make it really easy to test</li> <li>Make it really easy to post a change for review</li> <li>Make it really easy to sign software</li> </ul>"},{"location":"signing-services/website/content/#secondary","title":"Secondary","text":"<ul> <li>Get all Eclipse projects building their software on Eclipse Foundation hardware.</li> <li>Enable the Long Term Support Program.</li> <li>Make it easy for people to build custom Eclipse distributions.</li> </ul> <p>There is a strong link between CBI and the Long Term Support Program which enables a marketplace of companies providing maintenance and support for Eclipse technologies for durations far beyond typical community support.</p> <p>Please note: CBI features will be available to community.</p> <p>It is our hope that this project develops an offering that is compelling so that many projects will move to use it.</p>"},{"location":"signing-services/website/content/#resources","title":"Resources","text":"<ul> <li>Mailing list cbi-dev</li> </ul>"},{"location":"signing-services/website/content/#bugs","title":"Bugs","text":"<p>List of All Bugs</p>"},{"location":"signing-services/website/content/#tutorials-news-and-other-resources","title":"Tutorials, News, and other resources","text":"<ul> <li>Tycho tutorial by Lars Vogel</li> <li>Video discussing JBoss tools use of Tycho</li> <li>Building Eclipse SDK locally with Maven</li> <li>Sonar at Eclipse.org</li> <li>Tycho and CBI Adoption: Feedback from the trenches</li> <li>Eclipse Scout builds with CBI</li> </ul>"},{"location":"signing-services/website/content/#eclipse-platform-cbi-build","title":"Eclipse platform CBI build","text":"<ul> <li>Eclipse Platform Build based on CBI see the Platform Build Roadmap</li> </ul>"},{"location":"signing-services/website/content/#preferred-build-technologies","title":"Preferred Build Technologies","text":""},{"location":"signing-services/website/content/#hudson","title":"Hudson","text":"<ul> <li>The Eclipse Hudson instances; and</li> </ul>"},{"location":"signing-services/website/content/#maven","title":"Maven","text":"<p>Maven 3.0 drives the builds. Projects are expected to provide standard Maven 3.0 POM files for their builds. The builds should be built in such a way that they can be run on the local workstation, or on the Eclipse build server. Note that builds can only be signed on the Eclipse build server.</p>"},{"location":"signing-services/website/content/#tycho","title":"Tycho","text":"<p>Tycho is focused on a Maven-centric, manifest-first approach to building Eclipse plug-ins, features, update sites, RCP applications and OSGi bundles.</p> <p>Helpful links:</p> <ul> <li>Tycho project information, including demo projects</li> <li>Building Woolsey with Maven and Tycho</li> <li>Reference Card</li> <li>Packaging Types</li> </ul>"},{"location":"signing-services/website/content/#nexus","title":"Nexus","text":"<p>http://wiki.eclipse.org/Services/Nexus</p>"},{"location":"signing-services/website/content/#signing-tool","title":"Signing tool","text":"<ul> <li>Maven plugins for signing artifacts</li> <li>On demand signing tool</li> </ul>"},{"location":"signing-services/website/content/#cbi-license-bundle","title":"CBI License bundle","text":"<p>We offer a P2 repository containing the org.eclipse.license bundle which is located at <code>http://download.eclipse.org/cbi/updates/license/</code></p> <p>This URL is a composite P2 repo containing the license bundle.</p> <p>If you are using Tycho you can add the p2 repo to the  section of your pom.xml file. Something similar to this: <p>```xml,line-numbers  license-feature http://download.eclipse.org/cbi/updates/license/ p2 <pre><code>In any particular feature which you need the license you can use the usual feature.xml section:\n\n```xml,line-numbers\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;feature\n  id=\"org.eclipse.help\"\n  label=\"%featureName\"\n  version=\"2.0.0.qualifier\"\n  provider-name=\"%providerName\"\n  plugin=\"org.eclipse.help.base\"\n  license-feature=\"org.eclipse.license\"\n  license-feature-version=\"1.0.0.qualifier\"&gt;\n....\n</code></pre></p>"},{"location":"signing-services/website/content/#related-topics-and-links","title":"Related Topics and Links","text":"<ul> <li>Long Term Support</li> <li>List of Build Technologies</li> </ul>"},{"location":"signing-services/website/content/#faq","title":"FAQ","text":"<ul> <li>See your Frequently Asked Question list</li> </ul>"},{"location":"signing-services/website/content/about/","title":"About","text":"<p>Home / signing-services / website / content / about +++ date = \"2015-10-22T14:45:15+02:00\" draft = true title = \"about\" toc = true +++</p>"},{"location":"signing-services/website/content/about/#title-h1","title":"title H1","text":""},{"location":"signing-services/website/content/about/#title","title":"title","text":"<p>Some content</p>"},{"location":"signing-services/website/content/about/#title2","title":"title2","text":"<p>Some content</p>"},{"location":"signing-services/website/themes/solstice/","title":"Index","text":"<p>Home / signing-services / website / themes / solstice</p>"},{"location":"signing-services/website/themes/solstice/#solstice-hugo-theme","title":"solstice-hugo-theme","text":""},{"location":"signing-services/website/themes/solstice/#requirements","title":"Requirements","text":"<ul> <li>Hugo http://gohugo.io/</li> <li>Node.js https://www.npmjs.com/</li> </ul>"},{"location":"signing-services/website/themes/solstice/#how-to-build","title":"How to build","text":""},{"location":"signing-services/website/themes/solstice/#development","title":"Development","text":""},{"location":"signing-services/website/themes/solstice/LICENSE/","title":"LICENSE","text":"<p>Home / signing-services / website / themes / solstice / LICENSE Eclipse Public License - v 1.0</p> <p>THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC LICENSE (\"AGREEMENT\"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.</p> <ol> <li>DEFINITIONS</li> </ol> <p>\"Contribution\" means:</p> <p>a) in the case of the initial Contributor, the initial code and documentation distributed under this Agreement, and b) in the case of each subsequent Contributor:</p> <p>i) changes to the Program, and</p> <p>ii) additions to the Program;</p> <p>where such changes and/or additions to the Program originate from and are distributed by that particular Contributor. A Contribution 'originates' from a Contributor if it was added to the Program by such Contributor itself or anyone acting on such Contributor's behalf. Contributions do not include additions to the Program which: (i) are separate modules of software distributed in conjunction with the Program under their own license agreement, and (ii) are not derivative works of the Program.</p> <p>\"Contributor\" means any person or entity that distributes the Program.</p> <p>\"Licensed Patents \" mean patent claims licensable by a Contributor which are necessarily infringed by the use or sale of its Contribution alone or when combined with the Program.</p> <p>\"Program\" means the Contributions distributed in accordance with this Agreement.</p> <p>\"Recipient\" means anyone who receives the Program under this Agreement, including all Contributors.</p> <ol> <li>GRANT OF RIGHTS</li> </ol> <p>a) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, distribute and sublicense the Contribution of such Contributor, if any, and such derivative works, in source code and object code form.</p> <p>b) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free patent license under Licensed Patents to make, use, sell, offer to sell, import and otherwise transfer the Contribution of such Contributor, if any, in source code and object code form. This patent license shall apply to the combination of the Contribution and the Program if, at the time the Contribution is added by the Contributor, such addition of the Contribution causes such combination to be covered by the Licensed Patents. The patent license shall not apply to any other combinations which include the Contribution. No hardware per se is licensed hereunder.</p> <p>c) Recipient understands that although each Contributor grants the licenses to its Contributions set forth herein, no assurances are provided by any Contributor that the Program does not infringe the patent or other intellectual property rights of any other entity. Each Contributor disclaims any liability to Recipient for claims brought by any other entity based on infringement of intellectual property rights or otherwise. As a condition to exercising the rights and licenses granted hereunder, each Recipient hereby assumes sole responsibility to secure any other intellectual property rights needed, if any. For example, if a third party patent license is required to allow Recipient to distribute the Program, it is Recipient's responsibility to acquire that license before distributing the Program.</p> <p>d) Each Contributor represents that to its knowledge it has sufficient copyright rights in its Contribution, if any, to grant the copyright license set forth in this Agreement.</p> <ol> <li>REQUIREMENTS</li> </ol> <p>A Contributor may choose to distribute the Program in object code form under its own license agreement, provided that:</p> <p>a) it complies with the terms and conditions of this Agreement; and</p> <p>b) its license agreement:</p> <p>i) effectively disclaims on behalf of all Contributors all warranties and conditions, express and implied, including warranties or conditions of title and non-infringement, and implied warranties or conditions of merchantability and fitness for a particular purpose;</p> <p>ii) effectively excludes on behalf of all Contributors all liability for damages, including direct, indirect, special, incidental and consequential damages, such as lost profits;</p> <p>iii) states that any provisions which differ from this Agreement are offered by that Contributor alone and not by any other party; and</p> <p>iv) states that source code for the Program is available from such Contributor, and informs licensees how to obtain it in a reasonable manner on or through a medium customarily used for software exchange.</p> <p>When the Program is made available in source code form:</p> <p>a) it must be made available under this Agreement; and</p> <p>b) a copy of this Agreement must be included with each copy of the Program.</p> <p>Contributors may not remove or alter any copyright notices contained within the Program.</p> <p>Each Contributor must identify itself as the originator of its Contribution, if any, in a manner that reasonably allows subsequent Recipients to identify the originator of the Contribution.</p> <ol> <li>COMMERCIAL DISTRIBUTION</li> </ol> <p>Commercial distributors of software may accept certain responsibilities with respect to end users, business partners and the like. While this license is intended to facilitate the commercial use of the Program, the Contributor who includes the Program in a commercial product offering should do so in a manner which does not create potential liability for other Contributors. Therefore, if a Contributor includes the Program in a commercial product offering, such Contributor (\"Commercial Contributor\") hereby agrees to defend and indemnify every other Contributor (\"Indemnified Contributor\") against any losses, damages and costs (collectively \"Losses\") arising from claims, lawsuits and other legal actions brought by a third party against the Indemnified Contributor to the extent caused by the acts or omissions of such Commercial Contributor in connection with its distribution of the Program in a commercial product offering. The obligations in this section do not apply to any claims or Losses relating to any actual or alleged intellectual property infringement. In order to qualify, an Indemnified Contributor must: a) promptly notify the Commercial Contributor in writing of such claim, and b) allow the Commercial Contributor to control, and cooperate with the Commercial Contributor in, the defense and any related settlement negotiations. The Indemnified Contributor may participate in any such claim at its own expense.</p> <p>For example, a Contributor might include the Program in a commercial product offering, Product X. That Contributor is then a Commercial Contributor. If that Commercial Contributor then makes performance claims, or offers warranties related to Product X, those performance claims and warranties are such Commercial Contributor's responsibility alone. Under this section, the Commercial Contributor would have to defend claims against the other Contributors related to those performance claims and warranties, and if a court requires any other Contributor to pay any damages as a result, the Commercial Contributor must pay those damages.</p> <ol> <li>NO WARRANTY</li> </ol> <p>EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the Program and assumes all risks associated with its exercise of rights under this Agreement , including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations.</p> <ol> <li>DISCLAIMER OF LIABILITY</li> </ol> <p>EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <ol> <li>GENERAL</li> </ol> <p>If any provision of this Agreement is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this Agreement, and without further action by the parties hereto, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.</p> <p>If Recipient institutes patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Program itself (excluding combinations of the Program with other software or hardware) infringes such Recipient's patent(s), then such Recipient's rights granted under Section 2(b) shall terminate as of the date such litigation is filed.</p> <p>All Recipient's rights under this Agreement shall terminate if it fails to comply with any of the material terms or conditions of this Agreement and does not cure such failure in a reasonable period of time after becoming aware of such noncompliance. If all Recipient's rights under this Agreement terminate, Recipient agrees to cease use and distribution of the Program as soon as reasonably practicable. However, Recipient's obligations under this Agreement and any licenses granted by Recipient relating to the Program shall continue and survive.</p> <p>Everyone is permitted to copy and distribute copies of this Agreement, but in order to avoid inconsistency the Agreement is copyrighted and may only be modified in the following manner. The Agreement Steward reserves the right to publish new versions (including revisions) of this Agreement from time to time. No one other than the Agreement Steward has the right to modify this Agreement. The Eclipse Foundation is the initial Agreement Steward. The Eclipse Foundation may assign the responsibility to serve as the Agreement Steward to a suitable separate entity. Each new version of the Agreement will be given a distinguishing version number. The Program (including Contributions) may always be distributed subject to the version of the Agreement under which it was received. In addition, after a new version of the Agreement is published, Contributor may elect to distribute the Program (including its Contributions) under the new version. Except as expressly stated in Sections 2(a) and 2(b) above, Recipient receives no rights or licenses to the intellectual property of any Contributor under this Agreement, whether expressly, by implication, estoppel or otherwise. All rights in the Program not expressly granted under this Agreement are reserved.</p> <p>This Agreement is governed by the laws of the State of New York and the intellectual property laws of the United States of America. No party to this Agreement will bring a legal action under this Agreement more than one year after the cause of action arose. Each party waives its rights to a jury trial in any resulting litigation.</p>"},{"location":"signing-services/website/themes/solstice/archetypes/default/","title":"Default","text":"<p>Home / signing-services / website / themes / solstice / archetypes / default +++ weight = 5 [menu]   [menu.main]     parent = \"x\" +++</p>"},{"location":"best-practices/","title":"Index","text":"<p>Home / best-practices</p>"},{"location":"best-practices/#eclipse-common-build-infrastructure-best-practices","title":"Eclipse Common Build Infrastructure Best Practices","text":"<ul> <li>Open Source Software Supply Chain Best Practices at the Eclipse Foundation</li> </ul>"},{"location":"best-practices/CONTRIBUTING/","title":"CONTRIBUTING","text":"<p>Home / best-practices / CONTRIBUTING</p>"},{"location":"best-practices/CONTRIBUTING/#contributing-to-eclipse-common-build-infrastructure","title":"Contributing to Eclipse Common Build Infrastructure","text":"<p>Thanks for your interest in this project.</p>"},{"location":"best-practices/CONTRIBUTING/#project-description","title":"Project description","text":"<p>The Eclipse Common Build Infrastructure (CBI) combines technologies and practices for building Eclipse Software.</p> <ul> <li>https://projects.eclipse.org/projects/technology.cbi</li> </ul>"},{"location":"best-practices/CONTRIBUTING/#developer-resources","title":"Developer resources","text":"<p>Information regarding source code management, builds, coding standards, and more.</p> <ul> <li>https://projects.eclipse.org/projects/technology.cbi/developer</li> </ul> <p>This project uses GitHub issues on the respective repositories to track ongoing development and issues.</p> <p>Be sure to search for existing bugs before you create another one. Remember that contributions are always welcome!</p>"},{"location":"best-practices/CONTRIBUTING/#eclipse-development-process","title":"Eclipse Development Process","text":"<p>This Eclipse Foundation open project is governed by the Eclipse Foundation Development Process and operates under the terms of the Eclipse IP Policy.</p>"},{"location":"best-practices/CONTRIBUTING/#eclipse-contributor-agreement","title":"Eclipse Contributor Agreement","text":"<p>Before your contribution can be accepted by the project team contributors must electronically sign the Eclipse Contributor Agreement (ECA).</p> <ul> <li>http://www.eclipse.org/legal/ECA.php</li> </ul> <p>Commits that are provided by non-committers must have a Signed-off-by field in the footer indicating that the author is aware of the terms by which the contribution has been provided to the project. The non-committer must additionally have an Eclipse Foundation account and must have a signed Eclipse Contributor Agreement (ECA) on file.</p> <p>For more information, please see the Eclipse Committer Handbook: https://www.eclipse.org/projects/handbook/#resources-commit</p>"},{"location":"best-practices/CONTRIBUTING/#contact","title":"Contact","text":"<p>Contact the project developers via the project's dev list.</p> <ul> <li>mailto:cbi-dev@eclipse.org</li> </ul>"},{"location":"best-practices/NOTICE/","title":"NOTICE","text":"<p>Home / best-practices / NOTICE</p>"},{"location":"best-practices/NOTICE/#notices-for-eclipse-common-build-infrastructure","title":"Notices for Eclipse Common Build Infrastructure","text":"<p>This content is produced and maintained by the Eclipse Common Build Infrastructure project.</p> <ul> <li>Project home: https://projects.eclipse.org/projects/technology.cbi</li> </ul>"},{"location":"best-practices/NOTICE/#trademarks","title":"Trademarks","text":"<p>Eclipse Common Build Infrastructure, and Common Build Infrastructure are trademarks of the Eclipse Foundation.</p>"},{"location":"best-practices/NOTICE/#copyright","title":"Copyright","text":"<p>All content is the property of the respective authors or their employers. For more information regarding authorship of content, please consult the listed source code repository logs.</p>"},{"location":"best-practices/NOTICE/#declared-project-licenses","title":"Declared Project Licenses","text":"<p>This program and the accompanying materials are made available under the terms of the Eclipse Public License 2.0 which is available at https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html, or the MIT License  which is available at https://opensource.org/licenses/MIT.</p> <p>SPDX-License-Identifier: EPL-2.0 or MIT</p>"},{"location":"best-practices/NOTICE/#source-code","title":"Source Code","text":"<p>The project maintains the source code repositories as listed on  https://projects.eclipse.org/projects/technology.cbi/developer</p>"},{"location":"best-practices/NOTICE/#third-party-content","title":"Third-party Content","text":"<p>This project leverages the following third party content.</p>"},{"location":"best-practices/NOTICE/#cryptography","title":"Cryptography","text":"<p>Content may contain encryption software. The country in which you are currently may have restrictions on the import, possession, and use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check the country's laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted.</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/","title":"Osssc best practices","text":"<p>Home / best-practices / software-supply-chain / osssc-best-practices</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#open-source-software-supply-chain-best-practices-at-the-eclipse-foundation","title":"Open Source Software Supply Chain Best Practices at the Eclipse Foundation","text":"<p>With the increasing number of software supply chain attacks, we've defined a (non-exhaustive) list of best practices that we encourage Eclipse Foundation committers and projects to follow. Note that we also listed some best practices that may require the Eclipse Foundation to step in in order to make them achievable or easier to implement.</p> <p>Building open source software is increasingly complex and distributed. It is a process comprised of many packages which are retrieved, digested and stored and where any flaw can be a vector of a supply chain attack as depicted on the picture below from the SLSA security framework.</p> <p></p> <p>Proper threat modeling of each step is required in order to mitigate any such flaw. However, there is no one size fits all in terms of threat modeling, so we just enumerate some common best practices defending against the most common attacks.</p> <p>This work takes inspiration in various publications from entities like the CNCF and the Linux Foundation.</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#protect-the-code-repositories","title":"Protect the code repositories","text":"<p>The first artifact that needs to be protected in the software supply chain is the actual source code. The best practices below aim at preventing that unintentional commits get into the source code repository.</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#strengthen-the-git-authentication-methods","title":"Strengthen the git authentication methods","text":"<p>Committers shall use long, strong passwords for their Eclipse Foundation account. Rule number 1 is that length trumps complexity, so a long passphrase is always more secure. If the password is randomly generated, then a shorter password could be used (12 characters minimum).</p> <p>Committers should also enable two-factors authentication (2FA) or multi-factors authentication (MFA) wherever possible. It is currently possible on GitHub, and on Eclipse Foundation's GitLab.</p> <p>Note that Eclipse Foundation's accounts do not yet support MFA. See issue 576311.</p> <p>If you generated your SSH key a long time ago, it is advised to rotate it. Meanwhile, you should make it long (at least 4096 bits for RSA) or use newer, stronger algorithms (e.g., <code>Ed25519</code>).</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#require-signed-commits","title":"Require signed commits","text":"<p>For additional security, projects can require all commits to be signed with GPG or S/MIME signature. On GitHub and Eclipse Foundation's GitLab, this can be enabled as a branch protection rule, meaning that commits that are not signed get rejected. In both cases, you should open a ticket with webmaster to get it activated.</p> <p>It's not possible on Gerrit to protect commits before push, but projects can still define policies in order to verify, e.g., before doing a release, that all commits since the previous release are properly signed with known keys.</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#disable-force-push","title":"Disable force-push","text":"<p>In addition to not being courteous to other committers, force push can be used to create commits seemingly legit but introducing malicious changes (e.g., in case of impersonification of a committer after a credentials leak). At least the <code>main</code> branch should be forbidding force-push. By default this should be properly configured on all Eclipse Foundation projects repositories. In case of doubt, open a request to webmasters.</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#require-reviews-before-merging","title":"Require reviews before merging","text":"<p>Protecting the <code>main</code> branch from direct push by requiring pull requests / reviews is a way to lower the chances for a malicious change to be included silently into the repository.</p> <p>In addition to the expected code quality improvment and knowledge dissemination it provides, systematic code review mostly protects against committers identity theft and rogue behaviors in the context of an Eclipse Foundation project where write permissions are only granted to elected committers.</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#review-external-services-having-access-to-repositories","title":"Review external services having access to repositories","text":"<p>It's a common practice nowadays to rely on external services (e.g. GitHub apps) for static code analysis, secrets detection, auto-triage of issues, etc. Those services requires various permission levels. Permissions must be granted on the principle of least privilege. If an app requires more permissions than needed, it must not be installed.</p> <p>Connected apps shall be reviewed frequently and the ones that are not used anymore must be removed. There have been a couple of issues with such apps in the last years (e.g., Travis CI, CodeCov), and it becomes a major concern.</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#securing-third-party-artifacts","title":"Securing third-party artifacts","text":"<p>Source code is only one part of the equation when building software. Many dependencies are retrieved and included as part of the build pipeline. It is important to ensure that retrieved dependencies are the expected ones, and that they have not been tempered with.</p> <p>Parts of securing third-parties dependencies are already covered by the Eclipse Foundation intellectual property due diligence process which aims at ensuring license compatibility. By doing so, it requires projects to have a good understanding of their dependencies. Some best practices below will highlight some ways to have an even better understanding.</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#use-only-https-to-retrieve-dependencies","title":"Use only <code>https</code> to retrieve dependencies","text":"<p>Retrieving dependencies over the web must be done over secured connection, aka <code>HTTPS</code>. This will be prevent man-in-the-middle (MITM) attack that could temper with the dependency. Some tooling, like Maven can be configured to block access to all <code>HTTP</code> repositories. Since Maven 3.8.1, it is the default.</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#use-trusted-primary-registries","title":"Use trusted, primary registries","text":"<p>Getting dependencies from not well-known registries shall be avoided. Only the most trustworthy sources, like central registries (e.g., Maven Central, npmjs.com, or crates.io), must be used.</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#review-your-dependencies-and-pay-attention-to-typo-squatting","title":"Review your dependencies and pay attention to typo-squatting","text":"<p>Dependencies names must be scrutinized for typos to avoid dependending on malicious code. This must be done during code reviews and may be done in regular dependencies audit (e.g., at release time). Extra care should be taken to identify similar Unicode characters (homoglyph), and even ASCII ones like <code>1</code> and <code>l</code> or <code>0</code> and <code>O</code>.</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#verify-checksums-and-signatures-of-all-downloaded-dependencies","title":"Verify checksums and signatures of all downloaded dependencies","text":"<p>Checksums must always be verified, even when downloading dependencies over <code>HTTPS</code>. Checksums are usually served from different servers or different storage backends and it may not be easy for an attacker to silently change both the artifact and its checksum file. Some build tools can be told to enforce checksum verification, e.g., Maven has a <code>-C</code> or <code>--strict-checksums</code> argument.</p> <p>When available, digital signatures should be checked that they have been issued by its expected creators.</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#securing-build-pipelines","title":"Securing Build Pipelines","text":"<p>The build pipeline by nature has a high level of permissions over the source code repository but also on the deployment environment. If compromised, it can be used to introduce undetectable malicious changes to the source code or its dependencies and make the project deliver what it thinks is a perfectly clean output. This is what happened to SolarWind in 2020.</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#use-immutable-build-pipelines","title":"Use immutable build pipelines","text":"<p>Build scripts shall be checked in the code repositories and should only be modified in there. Having build pipelines versioned along with the code ensures that only committers with write permissions on the code can modify the build pipeline. Also, it makes it easier to review and verify the pipeline for later audits, e.g., in case of an incident.</p> <p>Committers can use Eclipse Foundation's CI service based Jenkins, with Jenkins pipeline, independently from where the code is hosted. It is especially important for projects using Jenkins Freestyle jobs to convert their jobs to Jenkins pipeline.</p> <p>When hosted on GitHub, projects can use GitHub actions with similar benefits.</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#use-a-vault-to-store-and-access-secrets-during-build","title":"Use a vault to store and access secrets during build","text":"<p>Secrets required during a a build pipeline (ssh keys, registry credentials...) must not be stored in the git repository and must not be stored in the pipeline configuration. Tools should be used to detect or prevent committing secrets to the repositories: Git hooks that run on your computer, e.g. git-secrets from AWS Labs, GitHub secret scanning, or GitLab secret scanning.</p> <p>Some secrets storage mechanism or vault must be used in order to get those secrets: GitHub actions use encrypted secrets and Jenkins has a number of plugins providing credentials bindings.</p> <p>Most of those solutions export the credentials as environment variables. Those variables should never be printed to standard output (even if obfuscation is handled by the CI system).</p> <p>Finally, when using shell scripts, always favor passing secrets via <code>stdin</code> rather than as command line arguments. Command parameters can be viewed by any user logged on the system (e.g, with <code>ps aux</code>).</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#do-not-start-build-automatically-from-untrusted-sources","title":"Do not start build automatically from untrusted sources","text":"<p>It is a great added value to be able to build new contributions from non-committers when they submit a new piece of code for review. However, great care must be taken at the CI level to avoid granting too many permissions to such builds.</p> <p>On GitHub actions, workflows from public forks require approval for first-time contributors by default. This shall be changed to <code>Require approval for all outside collaborators</code>. In all cases, committers should be especially alert to any proposed changes in the <code>.github/workflows/</code> directory that affect workflow files.</p> <p>On Jenkins, depending on which git hosting is used, the situation differs. Jenkins and Gerrit integrations are not safe to use, be it via the Gerrit Code Review plugin or the Gerrit Trigger Plugin. While the former is made to be used in a pipeline job, none checks for user permissions before starting a build. Any external contribution triggers a build, which means that any malicious code can be executed as a result.</p> <p>The Gerrit Trigger Plugin has one advantage as it has a configuration that prevents a build from being triggered if the review contains changes to some files. Note that it does not discriminate committers and non-committers, preventing build to be triggered for both categories.</p> <p></p> <p>This shall be used to exclude all changes modifying a build pipeline related files (e.g., <code>Makefile</code>, <code>pom.xml</code>, shell scripts that gets executed...) from automatically triggering a build.</p> <p>When using Jenkins pipelines with GitHub or GitLab hosted repositories, the configuration of the branch source configuration must be done carefully. More specifically, in order to protect against a malicious pull request itself modifying the <code>Jenkinsfile</code> to remove the protections, the trust policy for pull requests from forks shall be set to <code>From users with Admin or Write permission</code>.</p> <p></p> <p>It will only protect the <code>Jenkinsfile</code> file by default. Any other pipeline related file (e.g., <code>Makefile</code>, <code>pom.xml</code>, shell scripts that gets executed...) that can execute some code should be protected as well. The <code>readTrusted</code> step must be used to do so.</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#protect-build-outputs","title":"Protect build outputs","text":"<p>Once the binaries are produced, downstream consumers should have a way to verifiy that what they get is what the project published, i.e., that it has not been tempered with during transfer or by a compromised build pipeline.</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#sign-everything","title":"Sign everything","text":"<p>All produced artifacts should be digitally signed with a project specific key. The Eclipse Foundation manages a GPG-based web of trust, mostly for letting project publish artifacts to Maven Central. This infrastructure can be reused for GPG signing build artifacts and thus fullfilling this best practice.</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#use-platforms-code-signing-windows-macos-jar","title":"Use platform's code signing (Windows, macOS, JAR, ...)","text":"<p>When applicable, sign your code with code signing certificates. Compared to regular digital signature, this has the advantage to be checked by the deployment platform rather than relying on the user (or the provisionning software) to verify signatures manually. It also prevents security warnings during download and install. Finally, some platforms add more requirements than just code signatures (e.g. on macOS, applications shall be notarized) which increases protection against malware.</p> <p>The Eclipse CBI project provides services that let you sign your code with certificates owned by the Eclipse Foundation.</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#generate-publish-and-sign-sbom-on-release","title":"Generate, publish (and sign) SBOM on release","text":"<p>A Software Bill Of Materials (SBOM) is a list of components in a piece of software. It is valuable both for consumers of the project and to the project itself to perform out of band vulnerability or license analysis. Those analysis are easier when using a well established format for such a SBOM. The most two commons are CycloneDX and SPDX.</p> <p>License analysis can be done via the Eclipse Dash License Tool. Note however that it does not yet read a SBOM format listed above, but rather a plain list of ClearlyDefined coordinates.</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#make-your-build-reproducibles","title":"Make your build reproducibles","text":"<p>A reproducible build allows verification by a third party that no vulnerabilities or backdoors have been introduced during build pipeline. It lets them build the binaries on their own and let them verify that what they get is binary identical to the released artifacts.</p> <p>The reproducible-builds.org documentation is full of best practices and tips how to achieve that in various languages. There are pages specifically for artifacts targetting the JVM. Also, both Maven and Gradle have plugins and instructions to help projects achieve reproducibility.</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#protect-deployments","title":"Protect deployments","text":""},{"location":"best-practices/software-supply-chain/osssc-best-practices/#software-update-systems","title":"Software update systems","text":"<p>Software update systems are hard to design and hard to secure. They are an easy target as they eventually deploy binaries on clients' machines. To be considered secure, a software update system must ensure that:</p> <ul> <li>it knows about the latest available updates in a timely manner</li> <li>any files it downloads are the correct files, and,</li> <li>no harm results from checking or downloading files.</li> </ul> <p>These are the foundations of The Update Framework, TUF. It has been designed with strategies against a well defined threat model. A secure software update system must define mitigation against those attacks.</p>"},{"location":"best-practices/software-supply-chain/osssc-best-practices/#addendum","title":"Addendum","text":"<p>There are several assement tools and evaluation framework out there that projects should use in order to review the security of their software supply chain. The two most well known / up to date are:</p> <ul> <li>OSSF Security Scorecards: https://github.com/ossf/scorecard</li> <li>Secure Supply Chain Assessment from the CNCF Security Technical Advisory Group: https://github.com/cncf/tag-security/blob/master/supply-chain-security/supply-chain-security-paper/secure-supply-chain-assessment.md</li> <li>SLSA (\"salsa\") - Supply-chain Levels for Software Artifacts: https://slsa.dev</li> </ul>"},{"location":"macos-notarization-service/","title":"Index","text":"<p>Home / macos-notarization-service</p>"},{"location":"macos-notarization-service/#macos-notarization-service","title":"macOS Notarization Service","text":"<p>This is a web service that runs on macOS and offers a REST API to notarize signed application bundles or signed DMG. You can read more about notarization on the Apple developer website.</p>"},{"location":"macos-notarization-service/#getting-started","title":"Getting started","text":""},{"location":"macos-notarization-service/#requirements","title":"Requirements","text":"<ul> <li>Java 17+. We advise to use the Temurin binaries via homebrew</li> </ul> <pre><code>brew install temurin17\n</code></pre>"},{"location":"macos-notarization-service/#build","title":"Build","text":"<pre><code>$ ./mvnw clean package\n</code></pre> <p>It produces the self-contained application in <code>/target/quarkus-app</code>.</p> <p>You can run the application using: <code>java -jar target/quarkus-app/quarkus-run.jar</code></p> <p>See below for advanced startup method.</p>"},{"location":"macos-notarization-service/#installation","title":"Installation","text":"<p>To download a release and perform verification whether the downloaded artifact has been produced by the project, you should use the <code>download-github-release.sh</code> script (supported since <code>v1.2.0</code>):</p> <pre><code>$ ./download-github-release.sh -v 1.3.0\n</code></pre> <p>This will download the <code>1.3.0</code> release together with the provenance and perform verification (requires that the slsa-verifier tool is installe):</p> <pre><code>$ ./download-github-release.sh -v 1.3.0\nREPO = eclipse-cbi/macos-notarization-service\nVERSION = 1.3.0\nARTIFACT = macos-notarization-service\nDownloaded artifact 'macos-notarization-service-1.3.0.zip'\nDownloaded provenance 'macos-notarization-service-1.3.0-attestation.intoto.build.slsa'\nVerifying artifact 'macos-notarization-service-1.3.0.zip' using provenance 'macos-notarization-service-1.3.0-attestation.intoto.build.slsa':\n\nVerified build using builder \"https://github.com/jreleaser/release-action/.github/workflows/builder_slsa3.yml@refs/tags/v1.1.0-java\" at commit 5325c11c611568f5e043d934185183783f228c0a\nVerifying artifact macos-notarization-service-1.3.0.zip: PASSED\n\nPASSED: Verified SLSA provenance\n</code></pre>"},{"location":"macos-notarization-service/#run","title":"Run","text":"<p>Configure <code>NOTARIZATION_APPLEID_USERNAME</code>, <code>NOTARIZATION_APPLEID_PASSWORD</code> and <code>NOTARIZATION_APPLEID_TEAMID</code> with the proper values for your Apple developer ID account in file <code>start.sh</code>. Then, just run</p> <pre><code>./start.sh\n</code></pre> <p>On production system, it is advised to run this service as a system daemon with <code>launchd</code>. The service will then be started automatically at boot time or if the program crash. You can find a sample file to edit and put in <code>/Library/LaunchDaemons</code> in src/main/launchd/org.eclipse.cbi.macos-notarization-service.plist. To load (or unload) the service, just do</p> <pre><code>sudo launchctl load -w /Library/LaunchDaemons/org.eclipse.cbi.macos-notarization-service.plist\n</code></pre> <p>or</p> <pre><code>sudo launchctl unload -w /Library/LaunchDaemons/org.eclipse.cbi.macos-notarization-service.plist\n</code></pre> <p>See Apple documentation about daemons and agents for more options.</p>"},{"location":"macos-notarization-service/#documentation","title":"Documentation","text":"<p>The service is Quarkus application exposing a simple REST API with 3 endpoints. See Quarkus documentation for all of its configuration options. </p> <p>The following script calls the 3 endpoints successively to notarize a signed DMG file. It assumes that <code>jq</code> is installed on the system running the script. The notarization service is expected to run on IP <code>10.0.0.1</code> on port <code>8383</code>.</p> <pre><code>DMG=\"/path/to/myApp.dmg\"\n\nRESPONSE=\\\n$(curl -s -X POST \\\n  -F file=@${DMG} \\\n  -F 'options={\"primaryBundleId\": \"my-primary-bundle-id\", \"staple\": true};type=application/json' \\\n  http://10.0.0.1:8383/macos-notarization-service/notarize)\n\nUUID=$(echo ${RESPONSE} | jq -r '.uuid')\n\nSTATUS=$(echo ${RESPONSE} | jq -r '.notarizationStatus.status')\n\nwhile [[ ${STATUS} == 'IN_PROGRESS' ]]; do\n  sleep 1m\n  RESPONSE=$(curl -s http://10.0.0.1:8383/macos-notarization-service/${UUID}/status)\n  STATUS=$(echo ${RESPONSE} | jq -r '.notarizationStatus.status')\ndone\n\nif [[ ${STATUS} != 'COMPLETE' ]]; then\n  echo \"Notarization failed: ${RESPONSE}\"\n  exit 1\nfi\n\nmv \"${DMG}\" \"unnotarized-${DMG}\"\n\ncurl -JO http://10.0.0.1:8383/macos-notarization-service/${UUID}/download\n</code></pre> <p>We first upload our DMG to the service endpoint <code>macos-notarization-service/notarize</code> in a form part named <code>file</code> along with a set of options in JSON format in a form part named <code>options</code>. Only two options are available for now:</p> <ul> <li>primaryBundleId (required): the primary bundle ID that will be sent to the notarization service by <code>xcrun altool</code>. The value you give doesn\u2019t need to match the bundle identifier of the submitted app or have any particular value. It only needs to make sense to you. See Apple documentation for more information.</li> <li>staple: a boolean to specify wether or not the notarization ticket should be stapled to the notarized binary at the end of the process. Default is false. We advise you always set it to <code>true</code>. This ensures that Gatekeeper can find the notarization ticket even when a network connection isn\u2019t available.</li> </ul> <p>Once the upload to the notarization is complete, you will receive (the <code>$RESPONSE</code> variable in the script above) a JSON file with a content similar to </p> <pre><code>{ \n  \"uuid\":\"e68713e3-2ee7-4ebd-8672-20949a9ecdb9\",\n  \"notarizationStatus\": {\n    \"status\":\"IN_PROGRESS\",\n    \"message\":\"Uploading' file to Apple notarization 'service\"\n  }\n}\n</code></pre> <p>The <code>uuid</code> field is very important as it will be the one that will let you poll the service to know the status of the notarization process for your file and to download the results in the end. The <code>notarizationStatus</code> object contains the current status.</p> <p>The <code>$STATUS</code> will change from <code>\u00ccN_PROGRESS</code> to either <code>COMPLETE</code> or <code>ERROR</code> depending on the outcome of the process. Here the script polls the service every minute to check if the process is done via the second endpoint <code>macos-notarization-service/$UUID/status</code>. </p> <p>Once the process is done, you can download the notarized DMG with the endpoint <code>macos-notarization-service/${UUID}/download</code>. Note that this is unnecessary if you did not asked for the notarization ticket to be stapled to the binary to be notarized. Indeed, the notarization itself is side effect free for binaries if you don't staple the ticket. </p>"},{"location":"macos-notarization-service/#trademarks","title":"Trademarks","text":"<ul> <li>Eclipse\u00ae is a Trademark of the Eclipse Foundation, Inc.</li> <li>Eclipse Foundation is a Trademark of the Eclipse Foundation, Inc.</li> </ul>"},{"location":"macos-notarization-service/#copyright-and-license","title":"Copyright and license","text":"<p>Copyright 2019 the Eclipse Foundation, Inc. and others. Code released under the Eclipse Public License Version 2.0 (EPL-2.0). </p> <p>SPDX-License-Identifier: EPL-2.0</p>"},{"location":"project-website-boilerplate/","title":"Index","text":"<p>Home / project-website-boilerplate</p>"},{"location":"project-website-boilerplate/#hugo-eclipsefdn-website-boilerplate","title":"hugo-eclipsefdn-website-boilerplate","text":"<p>This boilerplate was created to help Eclipse Projects migrate their website to Hugo!</p> <p>We've ensured that this project is compatible with <code>Hugo 0.110.0</code>. For information on the specific versions of Hugo we support, you can refer to the readme.md of our Hugo Solstice Theme project.</p> <p>[[TOC]]</p>"},{"location":"project-website-boilerplate/#getting-started","title":"Getting started","text":"<p>Clone the project with submodules and start a web server:</p> <pre><code>git clone --recurse-submodules https://gitlab.eclipse.org/eclipsefdn/it/webdev/hugo-eclipsefdn-website-boilerplate.git\ncd hugo-eclipsefdn-website-boilerplate\nhugo server\n</code></pre>"},{"location":"project-website-boilerplate/#update-hugo-solstice-theme","title":"Update hugo-solstice-theme","text":"<p>The hugo-solstice-theme was added to this project as a Git submodule. We recomend that you update to the latest version before getting started:</p> <pre><code>git submodule update --remote\n</code></pre> <p>Please make sure to keep this sub-module up-to-date if you decide to utilize it. The Eclipse Foundation Webdev team regularly publishes new versions. For more information, please see Git documentation on submodules.</p>"},{"location":"project-website-boilerplate/#build-my-projects-website","title":"Build my project's website","text":"<p>The preferred static website generator for Eclipse project websites is Hugo and we recommend to our projects that they get started by creating a copy of our hugo-eclipsefdn-website-boilerplate project. While you're not obligated to use them, please note that Hugo and hugo-eclipsefdn-website-boilerplate are the supported solutions by the Eclipse Foundation. Using a different technology may result in reduced support.</p> <p>We recommend two different solutions to create and manage your static project website. The easiest solution is to keep both the source and distribution files together in one repository. The \"hugo\" command will create all the static files for your website in the \"public\" folder which you need to commit in your repository. To do so, remove \"/public/\" from the .gitignore file. This is included by default because projects often prefer to keep their source code and distribution files in separate repositories and utilize CI to ensure their website is always built with the same version of Hugo. We don't recommend the single Git repo solution if more than one individual is responsible for updating the website. This brings us to our next solution.</p> <p>In the advanced setup, you'll need two Git repositories. The first one will contain your Hugo website's source code, which you can get started by cloning this repo. The second repository stores your Hugo build results (the static HTML that our web server will end up hosting). Once you've completed the initial setup, managing two repos isn't a concern because the second one will be automatically updated via CI. See the Jenkins integration section below for more information.</p> <p>When your website is ready for publication or if you need help creating your website Git repositories, please notify us by opening a ticket. Ensure to share pertinent project information and your Git repositories information with us.</p> <p>If you don't already have two Git repositories for your website, you can request them to be created by .</p>"},{"location":"project-website-boilerplate/#jenkins-integration","title":"Jenkins integration","text":"<p>Before deploying your website, you must update the <code>Jenkinsfile</code> at the root of this repository with the correct values for the <code>PROJECT_NAME</code> and <code>PROJECT_BOT_NAME</code> environment variables. Please note that this boilerplate includes two <code>Jenkinsfile</code> template depending on whether your repositories are hosted on Eclipse GitLab or GitHub. You'll need to rename either <code>Jenkinsfile.GitHub</code> or <code>Jenkinsfile.GitLab</code> to <code>Jenkinsfile</code> based on where your Git repositories are hosted.  Additionally, it's important to update the <code>README.md</code>, <code>config.toml</code>, and all files in the <code>content</code> folder. Remember, this is just a boilerplate to kickstart your project; you'll still need to create pages and content.</p> <p>If you don't have a Jenkins instance already, ask for one. Please note that the <code>Jenkinsfile</code> file example makes several assumptions. For instance, it assumes that your project will use main as the default branch. Projects must customize the file to suit their specific requirements and configurations.</p>"},{"location":"project-website-boilerplate/#gitlab-ci-integration","title":"GitLab CI integration","text":"<p>Before deploying your website, rename <code>.gitlab-ci.template.yml</code> to <code>.gitlab-ci.yml</code>.</p> <p>Configure your project to support CI integration. Only GitLab project maintainers have access to this setting. Navigate to <code>Settings</code> &gt; <code>General</code> &gt; <code>Visibility, project features, permissions</code>, and ensure that <code>CI/CD</code> is checked. Don't forget to save your changes.</p> <p>Please be aware that the example <code>.gitlab-ci.template.yml</code> file makes several assumptions. For instance, it assumes that your project source is in the <code>main</code> branch, <code>deploy</code> is the targeting branch for generated files and that <code>push-modification</code> only runs with manual action. Customize your configuration according to specific requirements and configurations.</p>"},{"location":"project-website-boilerplate/#learn-hugo","title":"Learn Hugo","text":"<p>If you're new to Hugo, I highly recommend checking out its documentation to learn how to create pages and customize your site. Although you're starting with hugo-solstice-theme, remember that Hugo is highly extensible, allowing you to override as much or as little as you need. For example, you may choose to keep our default footer but override our header. You can make as many changes as you want as long as your website continues to adhere to the Eclipse Foundation Hosted Services Privacy and Acceptable Usage Policy.</p>"},{"location":"project-website-boilerplate/#update-pmi","title":"Update PMI","text":"<p>Finally, to publish your website on <code>eclipse.dev</code>, you'll need support from us to update your project's website metadata in the projects.eclipse.org (PMI). This informs us on where to find the necessary static HTML to serve. You can request an update to your website deployment metadata by opening a ticket.</p> <p>If you need assistance with the process, open a ticket.</p>"},{"location":"project-website-boilerplate/#contributing","title":"Contributing","text":"<ol> <li>Fork the hugo-eclipsefdn-website-boilerplate repository</li> <li>Clone repository: <code>git clone --recurse-submodules https://gitlab.eclipse.org/[your_gitlab_username]/hugo-eclipsefdn-website-boilerplate.git</code></li> <li>Create your feature branch: <code>git checkout -b my-new-feature</code></li> <li>Commit your changes: <code>git commit -m 'Add some feature' -s</code></li> <li>Push feature branch: <code>git push origin my-new-feature</code></li> <li>Submit a pull request</li> </ol>"},{"location":"project-website-boilerplate/#declared-project-licenses","title":"Declared Project Licenses","text":"<p>This program and the accompanying materials are made available under the terms of the Eclipse Public License v. 2.0 which is available at http://www.eclipse.org/legal/epl-2.0.</p> <p>SPDX-License-Identifier: EPL-2.0</p>"},{"location":"project-website-boilerplate/#related-projects","title":"Related projects","text":""},{"location":"project-website-boilerplate/#solstice-assets","title":"solstice-assets","text":"<p>Images, less and JavaScript files for the Eclipse Foundation look and feel.</p>"},{"location":"project-website-boilerplate/#hugo-solstice-theme","title":"hugo-solstice-theme","text":"<p>Hugo theme of the Eclipse Foundation look and feel.</p>"},{"location":"project-website-boilerplate/#bugs-and-feature-requests","title":"Bugs and feature requests","text":"<p>Have a bug or a feature request? Please search for existing and closed issues. If your problem or idea is not addressed yet, please open a new issue.</p>"},{"location":"project-website-boilerplate/#author","title":"Author","text":"<p>Christopher Guindon (Eclipse Foundation)</p> <ul> <li>https://twitter.com/chrisguindon</li> <li>https://github.com/chrisguindon</li> </ul>"},{"location":"project-website-boilerplate/#trademarks","title":"Trademarks","text":"<ul> <li>Eclipse\u00ae is a Trademark of the Eclipse Foundation, Inc.</li> <li>Eclipse Foundation is a Trademark of the Eclipse Foundation, Inc.</li> </ul>"},{"location":"project-website-boilerplate/#copyright-and-license","title":"Copyright and license","text":"<p>Copyright 2021 the Eclipse Foundation, Inc. and the hugo-eclipsefdn-website-boilerplate authors. Code released under the Eclipse Public License Version 2.0 (EPL-2.0).</p>"},{"location":"blog/archive/2024/","title":"2024","text":"<p>Home / blog / archive / 2024</p>"},{"location":"blog/archive/2024/#2024","title":"2024","text":""},{"location":"blog/category/chat-service/","title":"Chat service","text":"<p>Home / blog / category / chat-service</p>"},{"location":"blog/category/chat-service/#chat-service","title":"Chat Service","text":""}]}